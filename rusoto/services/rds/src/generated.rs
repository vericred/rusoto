// =================================================================
//
//                           * WARNING *
//
//                    This file is generated!
//
//  Changes made to this file will be overwritten. If changes are
//  required to the generated code, the service_crategen project
//  must be updated to generate the changes.
//
// =================================================================

use std::error::Error;
use std::fmt;

use async_trait::async_trait;
use rusoto_core::credential::ProvideAwsCredentials;
use rusoto_core::region;
use rusoto_core::request::{BufferedHttpResponse, DispatchSignedRequest};
use rusoto_core::{Client, RusotoError};

use rusoto_core::param::{Params, ServiceParams};
use rusoto_core::proto::xml::error::*;
use rusoto_core::proto::xml::util::{
    self as xml_util, deserialize_elements, find_start_element, skip_tree,
};
use rusoto_core::proto::xml::util::{Next, Peek, XmlParseError, XmlResponse};
use rusoto_core::request::HttpResponse;
use rusoto_core::signature::SignedRequest;
#[cfg(feature = "deserialize_structs")]
use serde::Deserialize;
#[cfg(feature = "serialize_structs")]
use serde::Serialize;
use serde_urlencoded;
use std::str::FromStr;
use xml::EventReader;

impl RdsClient {
    fn new_params(&self, operation_name: &str) -> Params {
        let mut params = Params::new();

        params.put("Action", operation_name);
        params.put("Version", "2014-10-31");

        params
    }

    async fn sign_and_dispatch<E>(
        &self,
        request: SignedRequest,
        from_response: fn(BufferedHttpResponse) -> RusotoError<E>,
    ) -> Result<HttpResponse, RusotoError<E>> {
        let mut response = self.client.sign_and_dispatch(request).await?;
        if !response.status.is_success() {
            let response = response.buffer().await.map_err(RusotoError::HttpDispatch)?;
            return Err(from_response(response));
        }

        Ok(response)
    }
}

/// <p>Data returned by the <b>DescribeAccountAttributes</b> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AccountAttributesMessage {
    /// <p>A list of <code>AccountQuota</code> objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.</p>
    pub account_quotas: Option<Vec<AccountQuota>>,
}

#[allow(dead_code)]
struct AccountAttributesMessageDeserializer;
impl AccountAttributesMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AccountAttributesMessage, XmlParseError> {
        deserialize_elements::<_, AccountAttributesMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AccountQuotas" => {
                        obj.account_quotas.get_or_insert(vec![]).extend(
                            AccountQuotaListDeserializer::deserialize("AccountQuotas", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a quota for an Amazon Web Services account.</p> <p>The following are account quotas:</p> <ul> <li> <p> <code>AllocatedStorage</code> - The total allocated storage per account, in GiB. The used value is the total allocated storage in the account, in GiB.</p> </li> <li> <p> <code>AuthorizationsPerDBSecurityGroup</code> - The number of ingress rules per DB security group. The used value is the highest number of ingress rules in a DB security group in the account. Other DB security groups in the account might have a lower number of ingress rules.</p> </li> <li> <p> <code>CustomEndpointsPerDBCluster</code> - The number of custom endpoints per DB cluster. The used value is the highest number of custom endpoints in a DB clusters in the account. Other DB clusters in the account might have a lower number of custom endpoints.</p> </li> <li> <p> <code>DBClusterParameterGroups</code> - The number of DB cluster parameter groups per account, excluding default parameter groups. The used value is the count of nondefault DB cluster parameter groups in the account.</p> </li> <li> <p> <code>DBClusterRoles</code> - The number of associated Amazon Web Services Identity and Access Management (IAM) roles per DB cluster. The used value is the highest number of associated IAM roles for a DB cluster in the account. Other DB clusters in the account might have a lower number of associated IAM roles.</p> </li> <li> <p> <code>DBClusters</code> - The number of DB clusters per account. The used value is the count of DB clusters in the account.</p> </li> <li> <p> <code>DBInstanceRoles</code> - The number of associated IAM roles per DB instance. The used value is the highest number of associated IAM roles for a DB instance in the account. Other DB instances in the account might have a lower number of associated IAM roles.</p> </li> <li> <p> <code>DBInstances</code> - The number of DB instances per account. The used value is the count of the DB instances in the account.</p> <p>Amazon RDS DB instances, Amazon Aurora DB instances, Amazon Neptune instances, and Amazon DocumentDB instances apply to this quota.</p> </li> <li> <p> <code>DBParameterGroups</code> - The number of DB parameter groups per account, excluding default parameter groups. The used value is the count of nondefault DB parameter groups in the account.</p> </li> <li> <p> <code>DBSecurityGroups</code> - The number of DB security groups (not VPC security groups) per account, excluding the default security group. The used value is the count of nondefault DB security groups in the account.</p> </li> <li> <p> <code>DBSubnetGroups</code> - The number of DB subnet groups per account. The used value is the count of the DB subnet groups in the account.</p> </li> <li> <p> <code>EventSubscriptions</code> - The number of event subscriptions per account. The used value is the count of the event subscriptions in the account.</p> </li> <li> <p> <code>ManualClusterSnapshots</code> - The number of manual DB cluster snapshots per account. The used value is the count of the manual DB cluster snapshots in the account.</p> </li> <li> <p> <code>ManualSnapshots</code> - The number of manual DB instance snapshots per account. The used value is the count of the manual DB instance snapshots in the account.</p> </li> <li> <p> <code>OptionGroups</code> - The number of DB option groups per account, excluding default option groups. The used value is the count of nondefault DB option groups in the account.</p> </li> <li> <p> <code>ReadReplicasPerMaster</code> - The number of read replicas per DB instance. The used value is the highest number of read replicas for a DB instance in the account. Other DB instances in the account might have a lower number of read replicas.</p> </li> <li> <p> <code>ReservedDBInstances</code> - The number of reserved DB instances per account. The used value is the count of the active reserved DB instances in the account.</p> </li> <li> <p> <code>SubnetsPerDBSubnetGroup</code> - The number of subnets per DB subnet group. The used value is highest number of subnets for a DB subnet group in the account. Other DB subnet groups in the account might have a lower number of subnets.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html">Quotas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_Limits.html">Quotas for Amazon Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AccountQuota {
    /// <p>The name of the Amazon RDS quota for this Amazon Web Services account.</p>
    pub account_quota_name: Option<String>,
    /// <p>The maximum allowed value for the quota.</p>
    pub max: Option<i64>,
    /// <p>The amount currently used toward the quota maximum.</p>
    pub used: Option<i64>,
}

#[allow(dead_code)]
struct AccountQuotaDeserializer;
impl AccountQuotaDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AccountQuota, XmlParseError> {
        deserialize_elements::<_, AccountQuota, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AccountQuotaName" => {
                    obj.account_quota_name =
                        Some(StringDeserializer::deserialize("AccountQuotaName", stack)?);
                }
                "Max" => {
                    obj.max = Some(LongDeserializer::deserialize("Max", stack)?);
                }
                "Used" => {
                    obj.used = Some(LongDeserializer::deserialize("Used", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct AccountQuotaListDeserializer;
impl AccountQuotaListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AccountQuota>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "AccountQuota" {
                obj.push(AccountQuotaDeserializer::deserialize(
                    "AccountQuota",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ActivityStreamModeDeserializer;
impl ActivityStreamModeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct ActivityStreamModeListDeserializer;
impl ActivityStreamModeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ActivityStreamStatusDeserializer;
impl ActivityStreamStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct AddRoleToDBClusterMessage {
    /// <p>The name of the DB cluster to associate the IAM role with.</p>
    pub db_cluster_identifier: String,
    /// <p>The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
    pub feature_name: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example, <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
    pub role_arn: String,
}

/// Serialize `AddRoleToDBClusterMessage` contents to a `SignedRequest`.
struct AddRoleToDBClusterMessageSerializer;
impl AddRoleToDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddRoleToDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.feature_name {
            params.put(&format!("{}{}", prefix, "FeatureName"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "RoleArn"), &obj.role_arn);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct AddRoleToDBInstanceMessage {
    /// <p>The name of the DB instance to associate the IAM role with.</p>
    pub db_instance_identifier: String,
    /// <p>The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. </p>
    pub feature_name: String,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. </p>
    pub role_arn: String,
}

/// Serialize `AddRoleToDBInstanceMessage` contents to a `SignedRequest`.
struct AddRoleToDBInstanceMessageSerializer;
impl AddRoleToDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddRoleToDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        params.put(&format!("{}{}", prefix, "FeatureName"), &obj.feature_name);
        params.put(&format!("{}{}", prefix, "RoleArn"), &obj.role_arn);
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct AddSourceIdentifierToSubscriptionMessage {
    /// <p><p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p> </li> </ul></p>
    pub source_identifier: String,
    /// <p>The name of the RDS event notification subscription you want to add a source identifier to.</p>
    pub subscription_name: String,
}

/// Serialize `AddSourceIdentifierToSubscriptionMessage` contents to a `SignedRequest`.
struct AddSourceIdentifierToSubscriptionMessageSerializer;
impl AddSourceIdentifierToSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddSourceIdentifierToSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceIdentifier"),
            &obj.source_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "SubscriptionName"),
            &obj.subscription_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AddSourceIdentifierToSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

#[allow(dead_code)]
struct AddSourceIdentifierToSubscriptionResultDeserializer;
impl AddSourceIdentifierToSubscriptionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AddSourceIdentifierToSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, AddSourceIdentifierToSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscription" => {
                        obj.event_subscription = Some(EventSubscriptionDeserializer::deserialize(
                            "EventSubscription",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct AddTagsToResourceMessage {
    /// <p>The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub resource_name: String,
    /// <p>The tags to be assigned to the Amazon RDS resource.</p>
    pub tags: Vec<Tag>,
}

/// Serialize `AddTagsToResourceMessage` contents to a `SignedRequest`.
struct AddTagsToResourceMessageSerializer;
impl AddTagsToResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddTagsToResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ResourceName"), &obj.resource_name);
        TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), &obj.tags);
    }
}

#[allow(dead_code)]
struct ApplyMethodDeserializer;
impl ApplyMethodDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ApplyPendingMaintenanceActionMessage {
    /// <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
    pub apply_action: String,
    /// <p><p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can&#39;t be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul></p>
    pub opt_in_type: String,
    /// <p>The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub resource_identifier: String,
}

/// Serialize `ApplyPendingMaintenanceActionMessage` contents to a `SignedRequest`.
struct ApplyPendingMaintenanceActionMessageSerializer;
impl ApplyPendingMaintenanceActionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ApplyPendingMaintenanceActionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ApplyAction"), &obj.apply_action);
        params.put(&format!("{}{}", prefix, "OptInType"), &obj.opt_in_type);
        params.put(
            &format!("{}{}", prefix, "ResourceIdentifier"),
            &obj.resource_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ApplyPendingMaintenanceActionResult {
    pub resource_pending_maintenance_actions: Option<ResourcePendingMaintenanceActions>,
}

#[allow(dead_code)]
struct ApplyPendingMaintenanceActionResultDeserializer;
impl ApplyPendingMaintenanceActionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ApplyPendingMaintenanceActionResult, XmlParseError> {
        deserialize_elements::<_, ApplyPendingMaintenanceActionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ResourcePendingMaintenanceActions" => {
                        obj.resource_pending_maintenance_actions =
                            Some(ResourcePendingMaintenanceActionsDeserializer::deserialize(
                                "ResourcePendingMaintenanceActions",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct AttributeValueListDeserializer;
impl AttributeValueListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "AttributeValue" {
                obj.push(StringDeserializer::deserialize("AttributeValue", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `AttributeValueList` contents to a `SignedRequest`.
struct AttributeValueListSerializer;
impl AttributeValueListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[allow(dead_code)]
struct AuthSchemeDeserializer;
impl AuthSchemeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct AuthorizeDBSecurityGroupIngressMessage {
    /// <p>The IP range to authorize.</p>
    pub cidrip: Option<String>,
    /// <p>The name of the DB security group to add authorization to.</p>
    pub db_security_group_name: String,
    /// <p> Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_id: Option<String>,
    /// <p> Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_name: Option<String>,
    /// <p> Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_owner_id: Option<String>,
}

/// Serialize `AuthorizeDBSecurityGroupIngressMessage` contents to a `SignedRequest`.
struct AuthorizeDBSecurityGroupIngressMessageSerializer;
impl AuthorizeDBSecurityGroupIngressMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AuthorizeDBSecurityGroupIngressMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidrip {
            params.put(&format!("{}{}", prefix, "CIDRIP"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBSecurityGroupName"),
            &obj.db_security_group_name,
        );
        if let Some(ref field_value) = obj.ec2_security_group_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.ec2_security_group_name {
            params.put(
                &format!("{}{}", prefix, "EC2SecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.ec2_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "EC2SecurityGroupOwnerId"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AuthorizeDBSecurityGroupIngressResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

#[allow(dead_code)]
struct AuthorizeDBSecurityGroupIngressResultDeserializer;
impl AuthorizeDBSecurityGroupIngressResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AuthorizeDBSecurityGroupIngressResult, XmlParseError> {
        deserialize_elements::<_, AuthorizeDBSecurityGroupIngressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSecurityGroup" => {
                        obj.db_security_group = Some(DBSecurityGroupDeserializer::deserialize(
                            "DBSecurityGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains Availability Zone information.</p> <p> This data type is used as an element in the <code>OrderableDBInstanceOption</code> data type.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AvailabilityZone {
    /// <p>The name of the Availability Zone.</p>
    pub name: Option<String>,
}

#[allow(dead_code)]
struct AvailabilityZoneDeserializer;
impl AvailabilityZoneDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AvailabilityZone, XmlParseError> {
        deserialize_elements::<_, AvailabilityZone, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Name" => {
                    obj.name = Some(StringDeserializer::deserialize("Name", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct AvailabilityZoneListDeserializer;
impl AvailabilityZoneListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AvailabilityZone>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "AvailabilityZone" {
                obj.push(AvailabilityZoneDeserializer::deserialize(
                    "AvailabilityZone",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct AvailabilityZonesDeserializer;
impl AvailabilityZonesDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "AvailabilityZone" {
                obj.push(StringDeserializer::deserialize("AvailabilityZone", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `AvailabilityZones` contents to a `SignedRequest`.
struct AvailabilityZonesSerializer;
impl AvailabilityZonesSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains the available processor feature information for the DB instance class of a DB instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring the Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide. </i> </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct AvailableProcessorFeature {
    /// <p>The allowed values for the processor feature of the DB instance class.</p>
    pub allowed_values: Option<String>,
    /// <p>The default value for the processor feature of the DB instance class.</p>
    pub default_value: Option<String>,
    /// <p>The name of the processor feature. Valid names are <code>coreCount</code> and <code>threadsPerCore</code>.</p>
    pub name: Option<String>,
}

#[allow(dead_code)]
struct AvailableProcessorFeatureDeserializer;
impl AvailableProcessorFeatureDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AvailableProcessorFeature, XmlParseError> {
        deserialize_elements::<_, AvailableProcessorFeature, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AllowedValues" => {
                        obj.allowed_values =
                            Some(StringDeserializer::deserialize("AllowedValues", stack)?);
                    }
                    "DefaultValue" => {
                        obj.default_value =
                            Some(StringDeserializer::deserialize("DefaultValue", stack)?);
                    }
                    "Name" => {
                        obj.name = Some(StringDeserializer::deserialize("Name", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct AvailableProcessorFeatureListDeserializer;
impl AvailableProcessorFeatureListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AvailableProcessorFeature>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "AvailableProcessorFeature" {
                obj.push(AvailableProcessorFeatureDeserializer::deserialize(
                    "AvailableProcessorFeature",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct BacktrackDBClusterMessage {
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
    pub backtrack_to: String,
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: String,
    /// <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub force: Option<bool>,
    /// <p>A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub use_earliest_time_on_point_in_time_unavailable: Option<bool>,
}

/// Serialize `BacktrackDBClusterMessage` contents to a `SignedRequest`.
struct BacktrackDBClusterMessageSerializer;
impl BacktrackDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &BacktrackDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "BacktrackTo"), &obj.backtrack_to);
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.force {
            params.put(&format!("{}{}", prefix, "Force"), &field_value);
        }
        if let Some(ref field_value) = obj.use_earliest_time_on_point_in_time_unavailable {
            params.put(
                &format!("{}{}", prefix, "UseEarliestTimeOnPointInTimeUnavailable"),
                &field_value,
            );
        }
    }
}

#[allow(dead_code)]
struct BooleanDeserializer;
impl BooleanDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<bool, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(bool::from_str(&s).unwrap()))
    }
}
#[allow(dead_code)]
struct BooleanOptionalDeserializer;
impl BooleanOptionalDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<bool, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(bool::from_str(&s).unwrap()))
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CancelExportTaskMessage {
    /// <p>The identifier of the snapshot export task to cancel.</p>
    pub export_task_identifier: String,
}

/// Serialize `CancelExportTaskMessage` contents to a `SignedRequest`.
struct CancelExportTaskMessageSerializer;
impl CancelExportTaskMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelExportTaskMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ExportTaskIdentifier"),
            &obj.export_task_identifier,
        );
    }
}

/// <p>A CA certificate for an Amazon Web Services account.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Certificate {
    /// <p>The Amazon Resource Name (ARN) for the certificate.</p>
    pub certificate_arn: Option<String>,
    /// <p>The unique key that identifies a certificate.</p>
    pub certificate_identifier: Option<String>,
    /// <p>The type of the certificate.</p>
    pub certificate_type: Option<String>,
    /// <p>Whether there is an override for the default certificate identifier.</p>
    pub customer_override: Option<bool>,
    /// <p>If there is an override for the default certificate identifier, when the override expires.</p>
    pub customer_override_valid_till: Option<String>,
    /// <p>The thumbprint of the certificate.</p>
    pub thumbprint: Option<String>,
    /// <p>The starting date from which the certificate is valid.</p>
    pub valid_from: Option<String>,
    /// <p>The final date that the certificate continues to be valid.</p>
    pub valid_till: Option<String>,
}

#[allow(dead_code)]
struct CertificateDeserializer;
impl CertificateDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Certificate, XmlParseError> {
        deserialize_elements::<_, Certificate, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CertificateArn" => {
                    obj.certificate_arn =
                        Some(StringDeserializer::deserialize("CertificateArn", stack)?);
                }
                "CertificateIdentifier" => {
                    obj.certificate_identifier = Some(StringDeserializer::deserialize(
                        "CertificateIdentifier",
                        stack,
                    )?);
                }
                "CertificateType" => {
                    obj.certificate_type =
                        Some(StringDeserializer::deserialize("CertificateType", stack)?);
                }
                "CustomerOverride" => {
                    obj.customer_override = Some(BooleanOptionalDeserializer::deserialize(
                        "CustomerOverride",
                        stack,
                    )?);
                }
                "CustomerOverrideValidTill" => {
                    obj.customer_override_valid_till = Some(TStampDeserializer::deserialize(
                        "CustomerOverrideValidTill",
                        stack,
                    )?);
                }
                "Thumbprint" => {
                    obj.thumbprint = Some(StringDeserializer::deserialize("Thumbprint", stack)?);
                }
                "ValidFrom" => {
                    obj.valid_from = Some(TStampDeserializer::deserialize("ValidFrom", stack)?);
                }
                "ValidTill" => {
                    obj.valid_till = Some(TStampDeserializer::deserialize("ValidTill", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct CertificateListDeserializer;
impl CertificateListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Certificate>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Certificate" {
                obj.push(CertificateDeserializer::deserialize("Certificate", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Data returned by the <b>DescribeCertificates</b> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CertificateMessage {
    /// <p>The list of <code>Certificate</code> objects for the Amazon Web Services account.</p>
    pub certificates: Option<Vec<Certificate>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct CertificateMessageDeserializer;
impl CertificateMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CertificateMessage, XmlParseError> {
        deserialize_elements::<_, CertificateMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Certificates" => {
                    obj.certificates.get_or_insert(vec![]).extend(
                        CertificateListDeserializer::deserialize("Certificates", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> This data type is used as a response element in the action <code>DescribeDBEngineVersions</code>. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CharacterSet {
    /// <p>The description of the character set.</p>
    pub character_set_description: Option<String>,
    /// <p>The name of the character set.</p>
    pub character_set_name: Option<String>,
}

#[allow(dead_code)]
struct CharacterSetDeserializer;
impl CharacterSetDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CharacterSet, XmlParseError> {
        deserialize_elements::<_, CharacterSet, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CharacterSetDescription" => {
                    obj.character_set_description = Some(StringDeserializer::deserialize(
                        "CharacterSetDescription",
                        stack,
                    )?);
                }
                "CharacterSetName" => {
                    obj.character_set_name =
                        Some(StringDeserializer::deserialize("CharacterSetName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used.</p> <p>For more information about exporting CloudWatch Logs for Amazon RDS DB instances, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about exporting CloudWatch Logs for Amazon Aurora DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CloudwatchLogsExportConfiguration {
    /// <p>The list of log types to disable.</p>
    pub disable_log_types: Option<Vec<String>>,
    /// <p>The list of log types to enable.</p>
    pub enable_log_types: Option<Vec<String>>,
}

/// Serialize `CloudwatchLogsExportConfiguration` contents to a `SignedRequest`.
struct CloudwatchLogsExportConfigurationSerializer;
impl CloudwatchLogsExportConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CloudwatchLogsExportConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.disable_log_types {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DisableLogTypes"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_log_types {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableLogTypes"),
                field_value,
            );
        }
    }
}

/// <p>This data type is used as a response element in the <code>ModifyDBCluster</code> operation and contains changes that will be applied during the next maintenance window.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ClusterPendingModifiedValues {
    /// <p>The DBClusterIdentifier value for the DB cluster.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>The database engine version.</p>
    pub engine_version: Option<String>,
    /// <p>A value that indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>The master credentials for the DB cluster.</p>
    pub master_user_password: Option<String>,
    pub pending_cloudwatch_logs_exports: Option<PendingCloudwatchLogsExports>,
}

#[allow(dead_code)]
struct ClusterPendingModifiedValuesDeserializer;
impl ClusterPendingModifiedValuesDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClusterPendingModifiedValues, XmlParseError> {
        deserialize_elements::<_, ClusterPendingModifiedValues, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterIdentifier" => {
                        obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                            "DBClusterIdentifier",
                            stack,
                        )?);
                    }
                    "EngineVersion" => {
                        obj.engine_version =
                            Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                    }
                    "IAMDatabaseAuthenticationEnabled" => {
                        obj.iam_database_authentication_enabled =
                            Some(BooleanOptionalDeserializer::deserialize(
                                "IAMDatabaseAuthenticationEnabled",
                                stack,
                            )?);
                    }
                    "MasterUserPassword" => {
                        obj.master_user_password = Some(StringDeserializer::deserialize(
                            "MasterUserPassword",
                            stack,
                        )?);
                    }
                    "PendingCloudwatchLogsExports" => {
                        obj.pending_cloudwatch_logs_exports =
                            Some(PendingCloudwatchLogsExportsDeserializer::deserialize(
                                "PendingCloudwatchLogsExports",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ConnectionPoolConfiguration {
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
    pub connection_borrow_timeout: Option<i64>,
    /// <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
    pub init_query: Option<String>,
    /// <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
    pub max_connections_percent: Option<i64>,
    /// <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
    pub max_idle_connections_percent: Option<i64>,
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
    pub session_pinning_filters: Option<Vec<String>>,
}

/// Serialize `ConnectionPoolConfiguration` contents to a `SignedRequest`.
struct ConnectionPoolConfigurationSerializer;
impl ConnectionPoolConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ConnectionPoolConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.connection_borrow_timeout {
            params.put(
                &format!("{}{}", prefix, "ConnectionBorrowTimeout"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.init_query {
            params.put(&format!("{}{}", prefix, "InitQuery"), &field_value);
        }
        if let Some(ref field_value) = obj.max_connections_percent {
            params.put(
                &format!("{}{}", prefix, "MaxConnectionsPercent"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.max_idle_connections_percent {
            params.put(
                &format!("{}{}", prefix, "MaxIdleConnectionsPercent"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.session_pinning_filters {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SessionPinningFilters"),
                field_value,
            );
        }
    }
}

/// <p>Displays the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTarget</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ConnectionPoolConfigurationInfo {
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    pub connection_borrow_timeout: Option<i64>,
    /// <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p>
    pub init_query: Option<String>,
    /// <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    pub max_connections_percent: Option<i64>,
    /// <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p>
    pub max_idle_connections_percent: Option<i64>,
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
    pub session_pinning_filters: Option<Vec<String>>,
}

#[allow(dead_code)]
struct ConnectionPoolConfigurationInfoDeserializer;
impl ConnectionPoolConfigurationInfoDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ConnectionPoolConfigurationInfo, XmlParseError> {
        deserialize_elements::<_, ConnectionPoolConfigurationInfo, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ConnectionBorrowTimeout" => {
                        obj.connection_borrow_timeout = Some(IntegerDeserializer::deserialize(
                            "ConnectionBorrowTimeout",
                            stack,
                        )?);
                    }
                    "InitQuery" => {
                        obj.init_query = Some(StringDeserializer::deserialize("InitQuery", stack)?);
                    }
                    "MaxConnectionsPercent" => {
                        obj.max_connections_percent = Some(IntegerDeserializer::deserialize(
                            "MaxConnectionsPercent",
                            stack,
                        )?);
                    }
                    "MaxIdleConnectionsPercent" => {
                        obj.max_idle_connections_percent = Some(IntegerDeserializer::deserialize(
                            "MaxIdleConnectionsPercent",
                            stack,
                        )?);
                    }
                    "SessionPinningFilters" => {
                        obj.session_pinning_filters.get_or_insert(vec![]).extend(
                            StringListDeserializer::deserialize("SessionPinningFilters", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CopyDBClusterParameterGroupMessage {
    /// <p><p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> </ul></p>
    pub source_db_cluster_parameter_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>A description for the copied DB cluster parameter group.</p>
    pub target_db_cluster_parameter_group_description: String,
    /// <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
    pub target_db_cluster_parameter_group_identifier: String,
}

/// Serialize `CopyDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct CopyDBClusterParameterGroupMessageSerializer;
impl CopyDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceDBClusterParameterGroupIdentifier"),
            &obj.source_db_cluster_parameter_group_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetDBClusterParameterGroupDescription"),
            &obj.target_db_cluster_parameter_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "TargetDBClusterParameterGroupIdentifier"),
            &obj.target_db_cluster_parameter_group_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CopyDBClusterParameterGroupResult {
    pub db_cluster_parameter_group: Option<DBClusterParameterGroup>,
}

#[allow(dead_code)]
struct CopyDBClusterParameterGroupResultDeserializer;
impl CopyDBClusterParameterGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyDBClusterParameterGroupResult, XmlParseError> {
        deserialize_elements::<_, CopyDBClusterParameterGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterParameterGroup" => {
                        obj.db_cluster_parameter_group =
                            Some(DBClusterParameterGroupDeserializer::deserialize(
                                "DBClusterParameterGroup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CopyDBClusterSnapshotMessage {
    /// <p>A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.</p>
    pub copy_tags: Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p> <p>If you copy an encrypted DB cluster snapshot from your Amazon Web Services account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same Amazon Web Services KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another Amazon Web Services Region, you must set <code>KmsKeyId</code> to the Amazon Web Services KMS key identifier you want to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
    pub kms_key_id: Option<String>,
    /// <p><p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the Amazon Web Services Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another Amazon Web Services Region. Don&#39;t specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same Amazon Web Services Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> </note></p>
    pub pre_signed_url: Option<String>,
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one Amazon Web Services Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across Amazon Web Services Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
    pub source_db_cluster_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
    pub target_db_cluster_snapshot_identifier: String,
}

/// Serialize `CopyDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct CopyDBClusterSnapshotMessageSerializer;
impl CopyDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.copy_tags {
            params.put(&format!("{}{}", prefix, "CopyTags"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SourceDBClusterSnapshotIdentifier"),
            &obj.source_db_cluster_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetDBClusterSnapshotIdentifier"),
            &obj.target_db_cluster_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CopyDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

#[allow(dead_code)]
struct CopyDBClusterSnapshotResultDeserializer;
impl CopyDBClusterSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyDBClusterSnapshotResult, XmlParseError> {
        deserialize_elements::<_, CopyDBClusterSnapshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshot" => {
                        obj.db_cluster_snapshot = Some(DBClusterSnapshotDeserializer::deserialize(
                            "DBClusterSnapshot",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CopyDBParameterGroupMessage {
    /// <p><p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> </ul></p>
    pub source_db_parameter_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>A description for the copied DB parameter group.</p>
    pub target_db_parameter_group_description: String,
    /// <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
    pub target_db_parameter_group_identifier: String,
}

/// Serialize `CopyDBParameterGroupMessage` contents to a `SignedRequest`.
struct CopyDBParameterGroupMessageSerializer;
impl CopyDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceDBParameterGroupIdentifier"),
            &obj.source_db_parameter_group_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetDBParameterGroupDescription"),
            &obj.target_db_parameter_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "TargetDBParameterGroupIdentifier"),
            &obj.target_db_parameter_group_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CopyDBParameterGroupResult {
    pub db_parameter_group: Option<DBParameterGroup>,
}

#[allow(dead_code)]
struct CopyDBParameterGroupResultDeserializer;
impl CopyDBParameterGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyDBParameterGroupResult, XmlParseError> {
        deserialize_elements::<_, CopyDBParameterGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBParameterGroup" => {
                        obj.db_parameter_group = Some(DBParameterGroupDeserializer::deserialize(
                            "DBParameterGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CopyDBSnapshotMessage {
    /// <p>A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.</p>
    pub copy_tags: Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). </p> <p>If you copy an encrypted DB snapshot from your Amazon Web Services account, you can specify a value for this parameter to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same Amazon Web Services KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another Amazon Web Services account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different Amazon Web Services Region, then you must specify a Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region. </p>
    pub kms_key_id: Option<String>,
    /// <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one Amazon Web Services Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across Amazon Web Services Regions. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option group considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub option_group_name: Option<String>,
    /// <p><p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source Amazon Web Services Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another Amazon Web Services Region by using the Amazon RDS API. Don&#39;t specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same Amazon Web Services Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The Amazon Web Services Region that the encrypted DB snapshot is copied to. This Amazon Web Services Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 Amazon Web Services Region to the us-east-1 Amazon Web Services Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 Amazon Web Services Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 Amazon Web Services Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination Amazon Web Services Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> </note></p>
    pub pre_signed_url: Option<String>,
    /// <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB snapshot ARN. For example, you might specify <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source Amazon Web Services Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
    pub source_db_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>The external custom Availability Zone (CAZ) identifier for the target CAZ.</p> <p>Example: <code>rds-caz-aiqhTgQv</code>.</p>
    pub target_custom_availability_zone: Option<String>,
    /// <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
    pub target_db_snapshot_identifier: String,
}

/// Serialize `CopyDBSnapshotMessage` contents to a `SignedRequest`.
struct CopyDBSnapshotMessageSerializer;
impl CopyDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.copy_tags {
            params.put(&format!("{}{}", prefix, "CopyTags"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SourceDBSnapshotIdentifier"),
            &obj.source_db_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.target_custom_availability_zone {
            params.put(
                &format!("{}{}", prefix, "TargetCustomAvailabilityZone"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TargetDBSnapshotIdentifier"),
            &obj.target_db_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CopyDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

#[allow(dead_code)]
struct CopyDBSnapshotResultDeserializer;
impl CopyDBSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyDBSnapshotResult, XmlParseError> {
        deserialize_elements::<_, CopyDBSnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSnapshot" => {
                    obj.db_snapshot =
                        Some(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CopyOptionGroupMessage {
    /// <p><p>The identifier for the source option group. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> </ul></p>
    pub source_option_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>The description for the copied option group.</p>
    pub target_option_group_description: String,
    /// <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
    pub target_option_group_identifier: String,
}

/// Serialize `CopyOptionGroupMessage` contents to a `SignedRequest`.
struct CopyOptionGroupMessageSerializer;
impl CopyOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceOptionGroupIdentifier"),
            &obj.source_option_group_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetOptionGroupDescription"),
            &obj.target_option_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "TargetOptionGroupIdentifier"),
            &obj.target_option_group_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CopyOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

#[allow(dead_code)]
struct CopyOptionGroupResultDeserializer;
impl CopyOptionGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyOptionGroupResult, XmlParseError> {
        deserialize_elements::<_, CopyOptionGroupResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "OptionGroup" => {
                    obj.option_group =
                        Some(OptionGroupDeserializer::deserialize("OptionGroup", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateCustomAvailabilityZoneMessage {
    /// <p>The name of the custom Availability Zone (AZ).</p>
    pub custom_availability_zone_name: String,
    /// <p>The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.</p>
    pub existing_vpn_id: Option<String>,
    /// <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
    pub new_vpn_tunnel_name: Option<String>,
    /// <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
    pub vpn_tunnel_originator_ip: Option<String>,
}

/// Serialize `CreateCustomAvailabilityZoneMessage` contents to a `SignedRequest`.
struct CreateCustomAvailabilityZoneMessageSerializer;
impl CreateCustomAvailabilityZoneMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateCustomAvailabilityZoneMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CustomAvailabilityZoneName"),
            &obj.custom_availability_zone_name,
        );
        if let Some(ref field_value) = obj.existing_vpn_id {
            params.put(&format!("{}{}", prefix, "ExistingVpnId"), &field_value);
        }
        if let Some(ref field_value) = obj.new_vpn_tunnel_name {
            params.put(&format!("{}{}", prefix, "NewVpnTunnelName"), &field_value);
        }
        if let Some(ref field_value) = obj.vpn_tunnel_originator_ip {
            params.put(
                &format!("{}{}", prefix, "VpnTunnelOriginatorIP"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateCustomAvailabilityZoneResult {
    pub custom_availability_zone: Option<CustomAvailabilityZone>,
}

#[allow(dead_code)]
struct CreateCustomAvailabilityZoneResultDeserializer;
impl CreateCustomAvailabilityZoneResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateCustomAvailabilityZoneResult, XmlParseError> {
        deserialize_elements::<_, CreateCustomAvailabilityZoneResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "CustomAvailabilityZone" => {
                        obj.custom_availability_zone =
                            Some(CustomAvailabilityZoneDeserializer::deserialize(
                                "CustomAvailabilityZone",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBClusterEndpointMessage {
    /// <p>The identifier to use for the new endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: String,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_identifier: String,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub endpoint_type: String,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub excluded_members: Option<Vec<String>>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: Option<Vec<String>>,
    /// <p>The tags to be assigned to the Amazon RDS resource.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBClusterEndpointMessage` contents to a `SignedRequest`.
struct CreateDBClusterEndpointMessageSerializer;
impl CreateDBClusterEndpointMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterEndpointMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterEndpointIdentifier"),
            &obj.db_cluster_endpoint_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        params.put(&format!("{}{}", prefix, "EndpointType"), &obj.endpoint_type);
        if let Some(ref field_value) = obj.excluded_members {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExcludedMembers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.static_members {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "StaticMembers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBClusterMessage {
    /// <p>A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub availability_zones: Option<Vec<String>>,
    /// <p><p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <note> <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p> </note> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul></p>
    pub backtrack_window: Option<i64>,
    /// <p><p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
    pub character_set_name: Option<String>,
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: String,
    /// <p><p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.</p>
    pub database_name: Option<String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.</p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory directory ID to create the DB cluster in.</p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p> <p> <b>Aurora MySQL</b> </p> <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>. </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Possible value is <code>postgresql</code>. </p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.</p> <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then. </p>
    pub enable_global_write_forwarding: Option<bool>,
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_http_endpoint: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
    pub engine: String,
    /// <p><p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>The <code>parallelquery</code> engine mode isn&#39;t required for Aurora MySQL version 1.23 and higher 1.x versions, and version 2.09 and higher 2.x versions.</p> <p>The <code>global</code> engine mode isn&#39;t required for Aurora MySQL version 1.22 and higher 1.x versions, and <code>global</code> engine mode isn&#39;t required for any 2.x versions.</p> <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p> <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn&#39;t required, and both the <code>parallelquery</code> and the <code>multimaster</code> engine modes currently aren&#39;t supported.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Limitations of Aurora Global Databases</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul></p>
    pub engine_mode: Option<String>,
    /// <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
    pub engine_version: Option<String>,
    /// <p> The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. </p>
    pub global_cluster_identifier: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>When a CMK isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the CMK used to encrypt the source. Otherwise, Amazon RDS will use your default CMK. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default CMK.</p> </li> </ul> <p>There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p> <p>If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you must set <code>KmsKeyId</code> to a Amazon Web Services KMS key identifier that is valid in the destination Amazon Web Services Region. This CMK is used to encrypt the read replica in that Amazon Web Services Region.</p>
    pub kms_key_id: Option<String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: Option<String>,
    /// <p><p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul></p>
    pub master_username: Option<String>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
    pub port: Option<i64>,
    /// <p><p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source Amazon Web Services Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same Amazon Web Services KMS CMK for both the <code>CreateDBCluster</code> action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that Aurora read replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> </note></p>
    pub pre_signed_url: Option<String>,
    /// <p><p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica.</p>
    pub replication_source_identifier: Option<String>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    pub scaling_configuration: Option<ScalingConfiguration>,
    /// <p>A value that indicates whether the DB cluster is encrypted.</p>
    pub storage_encrypted: Option<bool>,
    /// <p>Tags to assign to the DB cluster.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>A list of EC2 VPC security groups to associate with this DB cluster.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `CreateDBClusterMessage` contents to a `SignedRequest`.
struct CreateDBClusterMessageSerializer;
impl CreateDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AvailabilityZone"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.backtrack_window {
            params.put(&format!("{}{}", prefix, "BacktrackWindow"), &field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_global_write_forwarding {
            params.put(
                &format!("{}{}", prefix, "EnableGlobalWriteForwarding"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_http_endpoint {
            params.put(&format!("{}{}", prefix, "EnableHttpEndpoint"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_mode {
            params.put(&format!("{}{}", prefix, "EngineMode"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "GlobalClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"), &field_value);
        }
        if let Some(ref field_value) = obj.master_username {
            params.put(&format!("{}{}", prefix, "MasterUsername"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"), &field_value);
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.replication_source_identifier {
            params.put(
                &format!("{}{}", prefix, "ReplicationSourceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.scaling_configuration {
            ScalingConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ScalingConfiguration"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBClusterParameterGroupMessage {
    /// <p><p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></p>
    pub db_cluster_parameter_group_name: String,
    /// <p><p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p> <p>To list all of the available parameter group families for a DB engine, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query &quot;DBEngineVersions[].DBParameterGroupFamily&quot; --engine &lt;engine&gt;</code> </p> <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query &quot;DBEngineVersions[].DBParameterGroupFamily&quot; --engine aurora-postgresql</code> </p> <note> <p>The output contains duplicates.</p> </note> <p>The following are the valid DB engine values:</p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> </ul></p>
    pub db_parameter_group_family: String,
    /// <p>The description for the DB cluster parameter group.</p>
    pub description: String,
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct CreateDBClusterParameterGroupMessageSerializer;
impl CreateDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterParameterGroupName"),
            &obj.db_cluster_parameter_group_name,
        );
        params.put(
            &format!("{}{}", prefix, "DBParameterGroupFamily"),
            &obj.db_parameter_group_family,
        );
        params.put(&format!("{}{}", prefix, "Description"), &obj.description);
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBClusterParameterGroupResult {
    pub db_cluster_parameter_group: Option<DBClusterParameterGroup>,
}

#[allow(dead_code)]
struct CreateDBClusterParameterGroupResultDeserializer;
impl CreateDBClusterParameterGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBClusterParameterGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateDBClusterParameterGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterParameterGroup" => {
                        obj.db_cluster_parameter_group =
                            Some(DBClusterParameterGroupDeserializer::deserialize(
                                "DBClusterParameterGroup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct CreateDBClusterResultDeserializer;
impl CreateDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBClusterResult, XmlParseError> {
        deserialize_elements::<_, CreateDBClusterResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBCluster" => {
                    obj.db_cluster = Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBClusterSnapshotMessage {
    /// <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: String,
    /// <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
    pub db_cluster_snapshot_identifier: String,
    /// <p>The tags to be assigned to the DB cluster snapshot.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct CreateDBClusterSnapshotMessageSerializer;
impl CreateDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
            &obj.db_cluster_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

#[allow(dead_code)]
struct CreateDBClusterSnapshotResultDeserializer;
impl CreateDBClusterSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBClusterSnapshotResult, XmlParseError> {
        deserialize_elements::<_, CreateDBClusterSnapshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshot" => {
                        obj.db_cluster_snapshot = Some(DBClusterSnapshotDeserializer::deserialize(
                            "DBClusterSnapshot",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBInstanceMessage {
    /// <p><p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul></p>
    pub allocated_storage: Option<i64>,
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p><p> The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Web Services Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can&#39;t be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint. </p> <note> <p>If you&#39;re creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p> </note></p>
    pub availability_zone: Option<String>,
    /// <p><p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can&#39;t be set to 0 if the DB instance is a source to read replicas</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    pub character_set_name: Option<String>,
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The identifier of the DB cluster that the instance will belong to.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub db_instance_class: String,
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
    pub db_instance_identifier: String,
    /// <p><p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn&#39;t specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can&#39;t be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn&#39;t specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can&#39;t be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn&#39;t specified, a database named <code>postgres</code> is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can&#39;t be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can&#39;t specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can&#39;t be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora MySQL</b> </p> <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn&#39;t specified for an Aurora MySQL DB cluster, no database is created in the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>It must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>It can&#39;t be a word reserved by the database engine.</p> </li> </ul> <p> <b>Amazon Aurora PostgreSQL</b> </p> <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn&#39;t specified for an Aurora PostgreSQL DB cluster, a database named <code>postgres</code> is created in the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>It must contain 1 to 63 alphanumeric characters.</p> </li> <li> <p>It must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0 to 9).</p> </li> <li> <p>It can&#39;t be a word reserved by the database engine.</p> </li> </ul></p>
    pub db_name: Option<String>,
    /// <p><p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul></p>
    pub db_parameter_group_name: Option<String>,
    /// <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
    pub db_security_groups: Option<Vec<String>>,
    /// <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. CloudWatch Logs exports are managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>. </p> <p> <b>Microsoft SQL Server</b> </p> <p>Possible values are <code>agent</code> and <code>error</code>. </p> <p> <b>MySQL</b> </p> <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>. </p> <p> <b>Oracle</b> </p> <p>Possible values are <code>alert</code>, <code>audit</code>, <code>listener</code>, <code>trace</code>, and <code>oemagent</code>. </p> <p> <b>PostgreSQL</b> </p> <p>Possible values are <code>postgresql</code> and <code>upgrade</code>. </p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p> <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
    pub enable_performance_insights: Option<bool>,
    /// <p><p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every Amazon Web Services Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: String,
    /// <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server Versions on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub engine_version: Option<String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
    pub iops: Option<i64>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub kms_key_id: Option<String>,
    /// <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub license_model: Option<String>,
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub master_user_password: Option<String>,
    /// <p><p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul></p>
    pub master_username: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p> <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    pub monitoring_interval: Option<i64>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: Option<String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: Option<bool>,
    /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
    pub nchar_character_set_name: Option<String>,
    /// <p>A value that indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub performance_insights_kms_key_id: Option<String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: Option<i64>,
    /// <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>, <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and <code>49152-49156</code>.</p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p>Type: Integer</p>
    pub port: Option<i64>,
    /// <p><p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
    pub promotion_tier: Option<i64>,
    /// <p><p>A value that indicates whether the DB instance is publicly accessible.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance&#39;s VPC, and to the public IP address from outside of the DB instance&#39;s VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn&#39;t permit it.</p> <p>When the DB instance isn&#39;t publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn&#39;t specified, and <code>PubliclyAccessible</code> isn&#39;t specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn&#39;t specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul></p>
    pub publicly_accessible: Option<bool>,
    /// <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
    pub storage_encrypted: Option<bool>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    /// <p>Tags to assign to the DB instance.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: Option<String>,
    /// <p>The time zone of the DB instance. The time zone parameter is currently supported only by <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. </p>
    pub timezone: Option<String>,
    /// <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `CreateDBInstanceMessage` contents to a `SignedRequest`.
struct CreateDBInstanceMessageSerializer;
impl CreateDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocated_storage {
            params.put(&format!("{}{}", prefix, "AllocatedStorage"), &field_value);
        }
        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterIdentifier"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceClass"),
            &obj.db_instance_class,
        );
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"), &field_value);
        }
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_security_groups {
            DBSecurityGroupNameListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBSecurityGroupName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_customer_owned_ip {
            params.put(
                &format!("{}{}", prefix, "EnableCustomerOwnedIp"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_performance_insights {
            params.put(
                &format!("{}{}", prefix, "EnablePerformanceInsights"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"), &field_value);
        }
        if let Some(ref field_value) = obj.master_username {
            params.put(&format!("{}{}", prefix, "MasterUsername"), &field_value);
        }
        if let Some(ref field_value) = obj.max_allocated_storage {
            params.put(
                &format!("{}{}", prefix, "MaxAllocatedStorage"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.nchar_character_set_name {
            params.put(
                &format!("{}{}", prefix, "NcharCharacterSetName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.performance_insights_kms_key_id {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsKMSKeyId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.performance_insights_retention_period {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.promotion_tier {
            params.put(&format!("{}{}", prefix, "PromotionTier"), &field_value);
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"), &field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(
                &format!("{}{}", prefix, "TdeCredentialPassword"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.timezone {
            params.put(&format!("{}{}", prefix, "Timezone"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBInstanceReadReplicaMessage {
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the read replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>The Availability Zone (AZ) where the read replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p> <p> Example: <code>us-east-1d</code> </p>
    pub availability_zone: Option<String>,
    /// <p>A value that indicates whether to copy all tags from the read replica to snapshots of the read replica. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The compute and memory capacity of the read replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>The DB instance identifier of the read replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.</p>
    pub db_instance_identifier: String,
    /// <p><p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region read replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region read replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul></p>
    pub db_parameter_group_name: Option<String>,
    /// <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another Amazon Web Services Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same Amazon Web Services Region in which the operation is running.</p> </li> <li> <p>All read replicas in one Amazon Web Services Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these read replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these read replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the read replica. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
    pub enable_performance_insights: Option<bool>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
    pub iops: Option<i64>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted read replica.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS CMK.</p> <p>If you create an encrypted read replica in the same Amazon Web Services Region as the source DB instance, then do not specify a value for this parameter. A read replica in the same Region is always encrypted with the same Amazon Web Services KMS CMK as the source DB instance.</p> <p>If you create an encrypted read replica in a different Amazon Web Services Region, then you must specify a Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon Web Services Region in another Amazon Web Services Region.</p> <p>You can't create an encrypted read replica from an unencrypted DB instance.</p>
    pub kms_key_id: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p> <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the read replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    pub monitoring_interval: Option<i64>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: Option<String>,
    /// <p>A value that indicates whether the read replica is in a Multi-AZ deployment. </p> <p>You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your read replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
    pub multi_az: Option<bool>,
    /// <p><p>The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.</p> <note> <p>For SQL Server, you must use the option group associated with the source instance.</p> </note></p>
    pub option_group_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub performance_insights_kms_key_id: Option<String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: Option<i64>,
    /// <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
    pub port: Option<i64>,
    /// <p><p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source Amazon Web Services Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted read replica from another Amazon Web Services Region by using the Amazon RDS API. Don&#39;t specify <code>PreSignedUrl</code> when you are creating an encrypted read replica in the same Amazon Web Services Region.</p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The Amazon Web Services Region that the encrypted read replica is created in. This Amazon Web Services Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL.</p> <p>For example, if you create an encrypted DB instance in the us-west-1 Amazon Web Services Region, from a source DB instance in the us-east-2 Amazon Web Services Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 Amazon Web Services Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 Amazon Web Services Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the key to use to encrypt the read replica in the destination Amazon Web Services Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination Amazon Web Services Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are creating an encrypted read replica from a DB instance in the us-west-2 Amazon Web Services Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a presigned URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> <p> <code>SourceRegion</code> isn&#39;t supported for SQL Server, because SQL Server on Amazon RDS doesn&#39;t support cross-region read replicas.</p> </note></p>
    pub pre_signed_url: Option<String>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: Option<bool>,
    /// <p>The open mode of the replica database: mounted or read-only.</p> <note> <p>This parameter is only supported for Oracle DB instances.</p> </note> <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload.</p> <p>You can create a combination of mounted and read-only DB replicas for the same primary DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub replica_mode: Option<String>,
    /// <p><p>The identifier of the DB instance that will act as the source for the read replica. Each DB instance can have up to five read replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL read replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>For the limitations of SQL Server read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.Limitations.html">Read Replica Limitations with Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, that is, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same Amazon Web Services Region as the read replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different Amazon Web Services Region from the read replica, specify a valid DB instance ARN. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. This doesn&#39;t apply to SQL Server, which doesn&#39;t support cross-region replicas.</p> </li> </ul></p>
    pub source_db_instance_identifier: String,
    /// <p>Specifies the storage type to be associated with the read replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: Option<bool>,
    /// <p> A list of EC2 VPC security groups to associate with the read replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `CreateDBInstanceReadReplicaMessage` contents to a `SignedRequest`.
struct CreateDBInstanceReadReplicaMessageSerializer;
impl CreateDBInstanceReadReplicaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBInstanceReadReplicaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_performance_insights {
            params.put(
                &format!("{}{}", prefix, "EnablePerformanceInsights"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.max_allocated_storage {
            params.put(
                &format!("{}{}", prefix, "MaxAllocatedStorage"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.performance_insights_kms_key_id {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsKMSKeyId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.performance_insights_retention_period {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"), &field_value);
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        if let Some(ref field_value) = obj.replica_mode {
            params.put(&format!("{}{}", prefix, "ReplicaMode"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SourceDBInstanceIdentifier"),
            &obj.source_db_instance_identifier,
        );
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.use_default_processor_features {
            params.put(
                &format!("{}{}", prefix, "UseDefaultProcessorFeatures"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBInstanceReadReplicaResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct CreateDBInstanceReadReplicaResultDeserializer;
impl CreateDBInstanceReadReplicaResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBInstanceReadReplicaResult, XmlParseError> {
        deserialize_elements::<_, CreateDBInstanceReadReplicaResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstance" => {
                        obj.db_instance =
                            Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct CreateDBInstanceResultDeserializer;
impl CreateDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, CreateDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBParameterGroupMessage {
    /// <p><p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families for a DB engine, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query &quot;DBEngineVersions[].DBParameterGroupFamily&quot; --engine &lt;engine&gt;</code> </p> <p>For example, to list all of the available parameter group families for the MySQL DB engine, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query &quot;DBEngineVersions[].DBParameterGroupFamily&quot; --engine mysql</code> </p> <note> <p>The output contains duplicates.</p> </note> <p>The following are the valid DB engine values:</p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub db_parameter_group_family: String,
    /// <p><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></p>
    pub db_parameter_group_name: String,
    /// <p>The description for the DB parameter group.</p>
    pub description: String,
    /// <p>Tags to assign to the DB parameter group.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBParameterGroupMessage` contents to a `SignedRequest`.
struct CreateDBParameterGroupMessageSerializer;
impl CreateDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupFamily"),
            &obj.db_parameter_group_family,
        );
        params.put(
            &format!("{}{}", prefix, "DBParameterGroupName"),
            &obj.db_parameter_group_name,
        );
        params.put(&format!("{}{}", prefix, "Description"), &obj.description);
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBParameterGroupResult {
    pub db_parameter_group: Option<DBParameterGroup>,
}

#[allow(dead_code)]
struct CreateDBParameterGroupResultDeserializer;
impl CreateDBParameterGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBParameterGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateDBParameterGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBParameterGroup" => {
                        obj.db_parameter_group = Some(DBParameterGroupDeserializer::deserialize(
                            "DBParameterGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBProxyEndpointRequest {
    /// <p>The name of the DB proxy endpoint to create.</p>
    pub db_proxy_endpoint_name: String,
    /// <p>The name of the DB proxy associated with the DB proxy endpoint that you create.</p>
    pub db_proxy_name: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations. The default is <code>READ_WRITE</code>.</p>
    pub target_role: Option<String>,
    /// <p>The VPC security group IDs for the DB proxy endpoint that you create. You can specify a different set of security group IDs than for the original DB proxy. The default is the default security group for the VPC.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
    /// <p>The VPC subnet IDs for the DB proxy endpoint that you create. You can specify a different set of subnet IDs than for the original DB proxy.</p>
    pub vpc_subnet_ids: Vec<String>,
}

/// Serialize `CreateDBProxyEndpointRequest` contents to a `SignedRequest`.
struct CreateDBProxyEndpointRequestSerializer;
impl CreateDBProxyEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBProxyEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBProxyEndpointName"),
            &obj.db_proxy_endpoint_name,
        );
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.target_role {
            params.put(&format!("{}{}", prefix, "TargetRole"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupIds"),
                field_value,
            );
        }
        StringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "VpcSubnetIds"),
            &obj.vpc_subnet_ids,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBProxyEndpointResponse {
    /// <p>The <code>DBProxyEndpoint</code> object that is created by the API operation. The DB proxy endpoint that you create might provide capabilities such as read/write or read-only operations, or using a different VPC than the proxy's default VPC.</p>
    pub db_proxy_endpoint: Option<DBProxyEndpoint>,
}

#[allow(dead_code)]
struct CreateDBProxyEndpointResponseDeserializer;
impl CreateDBProxyEndpointResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBProxyEndpointResponse, XmlParseError> {
        deserialize_elements::<_, CreateDBProxyEndpointResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyEndpoint" => {
                        obj.db_proxy_endpoint = Some(DBProxyEndpointDeserializer::deserialize(
                            "DBProxyEndpoint",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBProxyRequest {
    /// <p>The authorization mechanism that the proxy uses.</p>
    pub auth: Vec<UserAuthConfig>,
    /// <p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub db_proxy_name: String,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub debug_logging: Option<bool>,
    /// <p>The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
    pub engine_family: String,
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub idle_client_timeout: Option<i64>,
    /// <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
    pub require_tls: Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub role_arn: String,
    /// <p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>One or more VPC security group IDs to associate with the new proxy.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
    /// <p>One or more VPC subnet IDs to associate with the new proxy.</p>
    pub vpc_subnet_ids: Vec<String>,
}

/// Serialize `CreateDBProxyRequest` contents to a `SignedRequest`.
struct CreateDBProxyRequestSerializer;
impl CreateDBProxyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBProxyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        UserAuthConfigListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Auth"),
            &obj.auth,
        );
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.debug_logging {
            params.put(&format!("{}{}", prefix, "DebugLogging"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "EngineFamily"), &obj.engine_family);
        if let Some(ref field_value) = obj.idle_client_timeout {
            params.put(&format!("{}{}", prefix, "IdleClientTimeout"), &field_value);
        }
        if let Some(ref field_value) = obj.require_tls {
            params.put(&format!("{}{}", prefix, "RequireTLS"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "RoleArn"), &obj.role_arn);
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupIds"),
                field_value,
            );
        }
        StringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "VpcSubnetIds"),
            &obj.vpc_subnet_ids,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBProxyResponse {
    /// <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
    pub db_proxy: Option<DBProxy>,
}

#[allow(dead_code)]
struct CreateDBProxyResponseDeserializer;
impl CreateDBProxyResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBProxyResponse, XmlParseError> {
        deserialize_elements::<_, CreateDBProxyResponse, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBProxy" => {
                    obj.db_proxy = Some(DBProxyDeserializer::deserialize("DBProxy", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBSecurityGroupMessage {
    /// <p>The description for the DB security group.</p>
    pub db_security_group_description: String,
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
    pub db_security_group_name: String,
    /// <p>Tags to assign to the DB security group.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBSecurityGroupMessage` contents to a `SignedRequest`.
struct CreateDBSecurityGroupMessageSerializer;
impl CreateDBSecurityGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSecurityGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSecurityGroupDescription"),
            &obj.db_security_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "DBSecurityGroupName"),
            &obj.db_security_group_name,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBSecurityGroupResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

#[allow(dead_code)]
struct CreateDBSecurityGroupResultDeserializer;
impl CreateDBSecurityGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBSecurityGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateDBSecurityGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSecurityGroup" => {
                        obj.db_security_group = Some(DBSecurityGroupDeserializer::deserialize(
                            "DBSecurityGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBSnapshotMessage {
    /// <p><p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
    pub db_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBSnapshotMessage` contents to a `SignedRequest`.
struct CreateDBSnapshotMessageSerializer;
impl CreateDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

#[allow(dead_code)]
struct CreateDBSnapshotResultDeserializer;
impl CreateDBSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBSnapshotResult, XmlParseError> {
        deserialize_elements::<_, CreateDBSnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSnapshot" => {
                    obj.db_snapshot =
                        Some(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateDBSubnetGroupMessage {
    /// <p>The description for the DB subnet group.</p>
    pub db_subnet_group_description: String,
    /// <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: String,
    /// <p>The EC2 Subnet IDs for the DB subnet group.</p>
    pub subnet_ids: Vec<String>,
    /// <p>Tags to assign to the DB subnet group.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateDBSubnetGroupMessage` contents to a `SignedRequest`.
struct CreateDBSubnetGroupMessageSerializer;
impl CreateDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSubnetGroupDescription"),
            &obj.db_subnet_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "DBSubnetGroupName"),
            &obj.db_subnet_group_name,
        );
        SubnetIdentifierListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SubnetIdentifier"),
            &obj.subnet_ids,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateDBSubnetGroupResult {
    pub db_subnet_group: Option<DBSubnetGroup>,
}

#[allow(dead_code)]
struct CreateDBSubnetGroupResultDeserializer;
impl CreateDBSubnetGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDBSubnetGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateDBSubnetGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSubnetGroup" => {
                        obj.db_subnet_group = Some(DBSubnetGroupDeserializer::deserialize(
                            "DBSubnetGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateEventSubscriptionMessage {
    /// <p> A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. </p>
    pub enabled: Option<bool>,
    /// <p> A list of event categories for a particular source type (<code>SourceType</code>) that you want to subscribe to. You can see a list of the categories for a given source type in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation. </p>
    pub event_categories: Option<Vec<String>>,
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub sns_topic_arn: String,
    /// <p><p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can&#39;t end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If <code>SourceIds</code> are supplied, <code>SourceType</code> must also be provided.</p> </li> <li> <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p> </li> </ul></p>
    pub source_ids: Option<Vec<String>>,
    /// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to <code>db-instance</code>. If this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
    pub source_type: Option<String>,
    /// <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
    pub subscription_name: String,
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateEventSubscriptionMessage` contents to a `SignedRequest`.
struct CreateEventSubscriptionMessageSerializer;
impl CreateEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EventCategory"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "SnsTopicArn"), &obj.sns_topic_arn);
        if let Some(ref field_value) = obj.source_ids {
            SourceIdsListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SourceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SubscriptionName"),
            &obj.subscription_name,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

#[allow(dead_code)]
struct CreateEventSubscriptionResultDeserializer;
impl CreateEventSubscriptionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateEventSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, CreateEventSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscription" => {
                        obj.event_subscription = Some(EventSubscriptionDeserializer::deserialize(
                            "EventSubscription",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateGlobalClusterMessage {
    /// <p> The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. </p>
    pub database_name: Option<String>,
    /// <p> The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub engine: Option<String>,
    /// <p>The engine version of the Aurora global database.</p>
    pub engine_version: Option<String>,
    /// <p>The cluster identifier of the new global database cluster.</p>
    pub global_cluster_identifier: Option<String>,
    /// <p> The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. </p>
    pub source_db_cluster_identifier: Option<String>,
    /// <p> The storage encryption setting for the new global database cluster. </p>
    pub storage_encrypted: Option<bool>,
}

/// Serialize `CreateGlobalClusterMessage` contents to a `SignedRequest`.
struct CreateGlobalClusterMessageSerializer;
impl CreateGlobalClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateGlobalClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "GlobalClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "SourceDBClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateGlobalClusterResult {
    pub global_cluster: Option<GlobalCluster>,
}

#[allow(dead_code)]
struct CreateGlobalClusterResultDeserializer;
impl CreateGlobalClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateGlobalClusterResult, XmlParseError> {
        deserialize_elements::<_, CreateGlobalClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "GlobalCluster" => {
                        obj.global_cluster = Some(GlobalClusterDeserializer::deserialize(
                            "GlobalCluster",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct CreateOptionGroupMessage {
    /// <p><p>Specifies the name of the engine that this option group should be associated with.</p> <p>Valid Values: </p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine_name: String,
    /// <p>Specifies the major version of the engine that this option group should be associated with.</p>
    pub major_engine_version: String,
    /// <p>The description of the option group.</p>
    pub option_group_description: String,
    /// <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
    pub option_group_name: String,
    /// <p>Tags to assign to the option group.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `CreateOptionGroupMessage` contents to a `SignedRequest`.
struct CreateOptionGroupMessageSerializer;
impl CreateOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "EngineName"), &obj.engine_name);
        params.put(
            &format!("{}{}", prefix, "MajorEngineVersion"),
            &obj.major_engine_version,
        );
        params.put(
            &format!("{}{}", prefix, "OptionGroupDescription"),
            &obj.option_group_description,
        );
        params.put(
            &format!("{}{}", prefix, "OptionGroupName"),
            &obj.option_group_name,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CreateOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

#[allow(dead_code)]
struct CreateOptionGroupResultDeserializer;
impl CreateOptionGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateOptionGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateOptionGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "OptionGroup" => {
                        obj.option_group =
                            Some(OptionGroupDeserializer::deserialize("OptionGroup", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CustomAvailabilityZone {
    /// <p>The identifier of the custom AZ.</p> <p>Amazon RDS generates a unique identifier when a custom AZ is created.</p>
    pub custom_availability_zone_id: Option<String>,
    /// <p>The name of the custom AZ.</p>
    pub custom_availability_zone_name: Option<String>,
    /// <p>The status of the custom AZ.</p>
    pub custom_availability_zone_status: Option<String>,
    /// <p>Information about the virtual private network (VPN) between the VMware vSphere cluster and the Amazon Web Services website.</p>
    pub vpn_details: Option<VpnDetails>,
}

#[allow(dead_code)]
struct CustomAvailabilityZoneDeserializer;
impl CustomAvailabilityZoneDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CustomAvailabilityZone, XmlParseError> {
        deserialize_elements::<_, CustomAvailabilityZone, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CustomAvailabilityZoneId" => {
                    obj.custom_availability_zone_id = Some(StringDeserializer::deserialize(
                        "CustomAvailabilityZoneId",
                        stack,
                    )?);
                }
                "CustomAvailabilityZoneName" => {
                    obj.custom_availability_zone_name = Some(StringDeserializer::deserialize(
                        "CustomAvailabilityZoneName",
                        stack,
                    )?);
                }
                "CustomAvailabilityZoneStatus" => {
                    obj.custom_availability_zone_status = Some(StringDeserializer::deserialize(
                        "CustomAvailabilityZoneStatus",
                        stack,
                    )?);
                }
                "VpnDetails" => {
                    obj.vpn_details =
                        Some(VpnDetailsDeserializer::deserialize("VpnDetails", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct CustomAvailabilityZoneListDeserializer;
impl CustomAvailabilityZoneListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CustomAvailabilityZone>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "CustomAvailabilityZone" {
                obj.push(CustomAvailabilityZoneDeserializer::deserialize(
                    "CustomAvailabilityZone",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct CustomAvailabilityZoneMessage {
    /// <p>The list of <a>CustomAvailabilityZone</a> objects for the Amazon Web Services account.</p>
    pub custom_availability_zones: Option<Vec<CustomAvailabilityZone>>,
    /// <p>An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct CustomAvailabilityZoneMessageDeserializer;
impl CustomAvailabilityZoneMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CustomAvailabilityZoneMessage, XmlParseError> {
        deserialize_elements::<_, CustomAvailabilityZoneMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "CustomAvailabilityZones" => {
                        obj.custom_availability_zones.get_or_insert(vec![]).extend(
                            CustomAvailabilityZoneListDeserializer::deserialize(
                                "CustomAvailabilityZones",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the details of an Amazon Aurora DB cluster. </p> <p>This data type is used as a response element in the <code>DescribeDBClusters</code>, <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBCluster {
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub activity_stream_kinesis_stream_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub activity_stream_kms_key_id: Option<String>,
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. </p>
    pub activity_stream_mode: Option<String>,
    /// <p>The status of the database activity stream.</p>
    pub activity_stream_status: Option<String>,
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub allocated_storage: Option<i64>,
    /// <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.</p>
    pub associated_roles: Option<Vec<DBClusterRole>>,
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p>The number of change records stored for Backtrack.</p>
    pub backtrack_consumed_change_records: Option<i64>,
    /// <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
    pub backtrack_window: Option<i64>,
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    pub backup_retention_period: Option<i64>,
    /// <p>The current capacity of an Aurora Serverless DB cluster. The capacity is 0 (zero) when the cluster is paused.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub capacity: Option<i64>,
    /// <p>If present, specifies the name of the character set that this cluster is associated with.</p>
    pub character_set_name: Option<String>,
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    pub clone_group_id: Option<String>,
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub cluster_create_time: Option<String>,
    /// <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
    pub cross_account_clone: Option<bool>,
    /// <p>Identifies all custom endpoints associated with the cluster.</p>
    pub custom_endpoints: Option<Vec<String>>,
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    pub db_cluster_arn: Option<String>,
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    pub db_cluster_members: Option<Vec<DBClusterMember>>,
    /// <p>Provides the list of option group memberships for this DB cluster.</p>
    pub db_cluster_option_group_memberships: Option<Vec<DBClusterOptionGroupStatus>>,
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    pub db_cluster_parameter_group: Option<String>,
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
    pub db_subnet_group: Option<String>,
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
    pub database_name: Option<String>,
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS CMK for the DB cluster is accessed.</p>
    pub db_cluster_resource_id: Option<String>,
    /// <p>Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory Domain membership records associated with the DB cluster.</p>
    pub domain_memberships: Option<Vec<DomainMembership>>,
    /// <p>The earliest time to which a DB cluster can be backtracked.</p>
    pub earliest_backtrack_time: Option<String>,
    /// <p>The earliest time to which a database can be restored with point-in-time restore.</p>
    pub earliest_restorable_time: Option<String>,
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p> <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    pub endpoint: Option<String>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub engine: Option<String>,
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    pub engine_mode: Option<String>,
    /// <p>Indicates the database engine version.</p>
    pub engine_version: Option<String>,
    /// <p>Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed before using the write forwarding feature for this cluster.</p>
    pub global_write_forwarding_requested: Option<bool>,
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    pub global_write_forwarding_status: Option<String>,
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    pub hosted_zone_id: Option<String>,
    /// <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub http_endpoint_enabled: Option<bool>,
    /// <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub latest_restorable_time: Option<String>,
    /// <p>Contains the master username for the DB cluster.</p>
    pub master_username: Option<String>,
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    pub multi_az: Option<bool>,
    /// <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    pub pending_modified_values: Option<ClusterPendingModifiedValues>,
    /// <p>Specifies the progress of the operation as a percentage.</p>
    pub percent_progress: Option<String>,
    /// <p>Specifies the port that the database engine is listening on.</p>
    pub port: Option<i64>,
    /// <p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    pub preferred_backup_window: Option<String>,
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>Contains one or more identifiers of the read replicas associated with this DB cluster.</p>
    pub read_replica_identifiers: Option<Vec<String>>,
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster. </p> <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    pub reader_endpoint: Option<String>,
    /// <p>Contains the identifier of the source DB cluster if this DB cluster is a read replica.</p>
    pub replication_source_identifier: Option<String>,
    pub scaling_configuration_info: Option<ScalingConfigurationInfo>,
    /// <p>Specifies the current state of this DB cluster.</p>
    pub status: Option<String>,
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    pub storage_encrypted: Option<bool>,
    pub tag_list: Option<Vec<Tag>>,
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    pub vpc_security_groups: Option<Vec<VpcSecurityGroupMembership>>,
}

#[allow(dead_code)]
struct DBClusterDeserializer;
impl DBClusterDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBCluster, XmlParseError> {
        deserialize_elements::<_, DBCluster, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ActivityStreamKinesisStreamName" => {
                    obj.activity_stream_kinesis_stream_name = Some(
                        StringDeserializer::deserialize("ActivityStreamKinesisStreamName", stack)?,
                    );
                }
                "ActivityStreamKmsKeyId" => {
                    obj.activity_stream_kms_key_id = Some(StringDeserializer::deserialize(
                        "ActivityStreamKmsKeyId",
                        stack,
                    )?);
                }
                "ActivityStreamMode" => {
                    obj.activity_stream_mode = Some(ActivityStreamModeDeserializer::deserialize(
                        "ActivityStreamMode",
                        stack,
                    )?);
                }
                "ActivityStreamStatus" => {
                    obj.activity_stream_status =
                        Some(ActivityStreamStatusDeserializer::deserialize(
                            "ActivityStreamStatus",
                            stack,
                        )?);
                }
                "AllocatedStorage" => {
                    obj.allocated_storage = Some(IntegerOptionalDeserializer::deserialize(
                        "AllocatedStorage",
                        stack,
                    )?);
                }
                "AssociatedRoles" => {
                    obj.associated_roles.get_or_insert(vec![]).extend(
                        DBClusterRolesDeserializer::deserialize("AssociatedRoles", stack)?,
                    );
                }
                "AvailabilityZones" => {
                    obj.availability_zones.get_or_insert(vec![]).extend(
                        AvailabilityZonesDeserializer::deserialize("AvailabilityZones", stack)?,
                    );
                }
                "BacktrackConsumedChangeRecords" => {
                    obj.backtrack_consumed_change_records =
                        Some(LongOptionalDeserializer::deserialize(
                            "BacktrackConsumedChangeRecords",
                            stack,
                        )?);
                }
                "BacktrackWindow" => {
                    obj.backtrack_window = Some(LongOptionalDeserializer::deserialize(
                        "BacktrackWindow",
                        stack,
                    )?);
                }
                "BackupRetentionPeriod" => {
                    obj.backup_retention_period = Some(IntegerOptionalDeserializer::deserialize(
                        "BackupRetentionPeriod",
                        stack,
                    )?);
                }
                "Capacity" => {
                    obj.capacity =
                        Some(IntegerOptionalDeserializer::deserialize("Capacity", stack)?);
                }
                "CharacterSetName" => {
                    obj.character_set_name =
                        Some(StringDeserializer::deserialize("CharacterSetName", stack)?);
                }
                "CloneGroupId" => {
                    obj.clone_group_id =
                        Some(StringDeserializer::deserialize("CloneGroupId", stack)?);
                }
                "ClusterCreateTime" => {
                    obj.cluster_create_time =
                        Some(TStampDeserializer::deserialize("ClusterCreateTime", stack)?);
                }
                "CopyTagsToSnapshot" => {
                    obj.copy_tags_to_snapshot = Some(BooleanOptionalDeserializer::deserialize(
                        "CopyTagsToSnapshot",
                        stack,
                    )?);
                }
                "CrossAccountClone" => {
                    obj.cross_account_clone = Some(BooleanOptionalDeserializer::deserialize(
                        "CrossAccountClone",
                        stack,
                    )?);
                }
                "CustomEndpoints" => {
                    obj.custom_endpoints.get_or_insert(vec![]).extend(
                        StringListDeserializer::deserialize("CustomEndpoints", stack)?,
                    );
                }
                "DBClusterArn" => {
                    obj.db_cluster_arn =
                        Some(StringDeserializer::deserialize("DBClusterArn", stack)?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "DBClusterMembers" => {
                    obj.db_cluster_members.get_or_insert(vec![]).extend(
                        DBClusterMemberListDeserializer::deserialize("DBClusterMembers", stack)?,
                    );
                }
                "DBClusterOptionGroupMemberships" => {
                    obj.db_cluster_option_group_memberships
                        .get_or_insert(vec![])
                        .extend(DBClusterOptionGroupMembershipsDeserializer::deserialize(
                            "DBClusterOptionGroupMemberships",
                            stack,
                        )?);
                }
                "DBClusterParameterGroup" => {
                    obj.db_cluster_parameter_group = Some(StringDeserializer::deserialize(
                        "DBClusterParameterGroup",
                        stack,
                    )?);
                }
                "DBSubnetGroup" => {
                    obj.db_subnet_group =
                        Some(StringDeserializer::deserialize("DBSubnetGroup", stack)?);
                }
                "DatabaseName" => {
                    obj.database_name =
                        Some(StringDeserializer::deserialize("DatabaseName", stack)?);
                }
                "DbClusterResourceId" => {
                    obj.db_cluster_resource_id = Some(StringDeserializer::deserialize(
                        "DbClusterResourceId",
                        stack,
                    )?);
                }
                "DeletionProtection" => {
                    obj.deletion_protection = Some(BooleanOptionalDeserializer::deserialize(
                        "DeletionProtection",
                        stack,
                    )?);
                }
                "DomainMemberships" => {
                    obj.domain_memberships.get_or_insert(vec![]).extend(
                        DomainMembershipListDeserializer::deserialize("DomainMemberships", stack)?,
                    );
                }
                "EarliestBacktrackTime" => {
                    obj.earliest_backtrack_time = Some(TStampDeserializer::deserialize(
                        "EarliestBacktrackTime",
                        stack,
                    )?);
                }
                "EarliestRestorableTime" => {
                    obj.earliest_restorable_time = Some(TStampDeserializer::deserialize(
                        "EarliestRestorableTime",
                        stack,
                    )?);
                }
                "EnabledCloudwatchLogsExports" => {
                    obj.enabled_cloudwatch_logs_exports
                        .get_or_insert(vec![])
                        .extend(LogTypeListDeserializer::deserialize(
                            "EnabledCloudwatchLogsExports",
                            stack,
                        )?);
                }
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineMode" => {
                    obj.engine_mode = Some(StringDeserializer::deserialize("EngineMode", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "GlobalWriteForwardingRequested" => {
                    obj.global_write_forwarding_requested =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "GlobalWriteForwardingRequested",
                            stack,
                        )?);
                }
                "GlobalWriteForwardingStatus" => {
                    obj.global_write_forwarding_status =
                        Some(WriteForwardingStatusDeserializer::deserialize(
                            "GlobalWriteForwardingStatus",
                            stack,
                        )?);
                }
                "HostedZoneId" => {
                    obj.hosted_zone_id =
                        Some(StringDeserializer::deserialize("HostedZoneId", stack)?);
                }
                "HttpEndpointEnabled" => {
                    obj.http_endpoint_enabled = Some(BooleanOptionalDeserializer::deserialize(
                        "HttpEndpointEnabled",
                        stack,
                    )?);
                }
                "IAMDatabaseAuthenticationEnabled" => {
                    obj.iam_database_authentication_enabled =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "IAMDatabaseAuthenticationEnabled",
                            stack,
                        )?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "LatestRestorableTime" => {
                    obj.latest_restorable_time = Some(TStampDeserializer::deserialize(
                        "LatestRestorableTime",
                        stack,
                    )?);
                }
                "MasterUsername" => {
                    obj.master_username =
                        Some(StringDeserializer::deserialize("MasterUsername", stack)?);
                }
                "MultiAZ" => {
                    obj.multi_az =
                        Some(BooleanOptionalDeserializer::deserialize("MultiAZ", stack)?);
                }
                "PendingModifiedValues" => {
                    obj.pending_modified_values =
                        Some(ClusterPendingModifiedValuesDeserializer::deserialize(
                            "PendingModifiedValues",
                            stack,
                        )?);
                }
                "PercentProgress" => {
                    obj.percent_progress =
                        Some(StringDeserializer::deserialize("PercentProgress", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerOptionalDeserializer::deserialize("Port", stack)?);
                }
                "PreferredBackupWindow" => {
                    obj.preferred_backup_window = Some(StringDeserializer::deserialize(
                        "PreferredBackupWindow",
                        stack,
                    )?);
                }
                "PreferredMaintenanceWindow" => {
                    obj.preferred_maintenance_window = Some(StringDeserializer::deserialize(
                        "PreferredMaintenanceWindow",
                        stack,
                    )?);
                }
                "ReadReplicaIdentifiers" => {
                    obj.read_replica_identifiers.get_or_insert(vec![]).extend(
                        ReadReplicaIdentifierListDeserializer::deserialize(
                            "ReadReplicaIdentifiers",
                            stack,
                        )?,
                    );
                }
                "ReaderEndpoint" => {
                    obj.reader_endpoint =
                        Some(StringDeserializer::deserialize("ReaderEndpoint", stack)?);
                }
                "ReplicationSourceIdentifier" => {
                    obj.replication_source_identifier = Some(StringDeserializer::deserialize(
                        "ReplicationSourceIdentifier",
                        stack,
                    )?);
                }
                "ScalingConfigurationInfo" => {
                    obj.scaling_configuration_info =
                        Some(ScalingConfigurationInfoDeserializer::deserialize(
                            "ScalingConfigurationInfo",
                            stack,
                        )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "StorageEncrypted" => {
                    obj.storage_encrypted =
                        Some(BooleanDeserializer::deserialize("StorageEncrypted", stack)?);
                }
                "TagList" => {
                    obj.tag_list
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("TagList", stack)?);
                }
                "VpcSecurityGroups" => {
                    obj.vpc_security_groups.get_or_insert(vec![]).extend(
                        VpcSecurityGroupMembershipListDeserializer::deserialize(
                            "VpcSecurityGroups",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>This data type is used as a response element in the <code>DescribeDBClusterBacktracks</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterBacktrack {
    /// <p>Contains the backtrack identifier.</p>
    pub backtrack_identifier: Option<String>,
    /// <p>The timestamp of the time at which the backtrack was requested.</p>
    pub backtrack_request_creation_time: Option<String>,
    /// <p>The timestamp of the time to which the DB cluster was backtracked.</p>
    pub backtrack_to: Option<String>,
    /// <p>The timestamp of the time from which the DB cluster was backtracked.</p>
    pub backtracked_from: Option<String>,
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p><p>The status of the backtrack. This property returns one of the following values:</p> <ul> <li> <p> <code>applying</code> - The backtrack is currently being applied to or rolled back from the DB cluster.</p> </li> <li> <p> <code>completed</code> - The backtrack has successfully been applied to or rolled back from the DB cluster.</p> </li> <li> <p> <code>failed</code> - An error occurred while the backtrack was applied to or rolled back from the DB cluster.</p> </li> <li> <p> <code>pending</code> - The backtrack is currently pending application to or rollback from the DB cluster.</p> </li> </ul></p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBClusterBacktrackDeserializer;
impl DBClusterBacktrackDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterBacktrack, XmlParseError> {
        deserialize_elements::<_, DBClusterBacktrack, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "BacktrackIdentifier" => {
                    obj.backtrack_identifier = Some(StringDeserializer::deserialize(
                        "BacktrackIdentifier",
                        stack,
                    )?);
                }
                "BacktrackRequestCreationTime" => {
                    obj.backtrack_request_creation_time = Some(TStampDeserializer::deserialize(
                        "BacktrackRequestCreationTime",
                        stack,
                    )?);
                }
                "BacktrackTo" => {
                    obj.backtrack_to = Some(TStampDeserializer::deserialize("BacktrackTo", stack)?);
                }
                "BacktrackedFrom" => {
                    obj.backtracked_from =
                        Some(TStampDeserializer::deserialize("BacktrackedFrom", stack)?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBClusterBacktrackListDeserializer;
impl DBClusterBacktrackListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterBacktrack>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterBacktrack" {
                obj.push(DBClusterBacktrackDeserializer::deserialize(
                    "DBClusterBacktrack",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the result of a successful invocation of the <code>DescribeDBClusterBacktracks</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterBacktrackMessage {
    /// <p>Contains a list of backtracks for the user.</p>
    pub db_cluster_backtracks: Option<Vec<DBClusterBacktrack>>,
    /// <p>A pagination token that can be used in a later <code>DescribeDBClusterBacktracks</code> request.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBClusterBacktrackMessageDeserializer;
impl DBClusterBacktrackMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterBacktrackMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterBacktrackMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterBacktracks" => {
                        obj.db_cluster_backtracks.get_or_insert(vec![]).extend(
                            DBClusterBacktrackListDeserializer::deserialize(
                                "DBClusterBacktracks",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterCapacityInfo {
    /// <p>The current capacity of the DB cluster.</p>
    pub current_capacity: Option<i64>,
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster. </p>
    pub db_cluster_identifier: Option<String>,
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    pub pending_capacity: Option<i64>,
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    pub seconds_before_timeout: Option<i64>,
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub timeout_action: Option<String>,
}

#[allow(dead_code)]
struct DBClusterCapacityInfoDeserializer;
impl DBClusterCapacityInfoDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterCapacityInfo, XmlParseError> {
        deserialize_elements::<_, DBClusterCapacityInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CurrentCapacity" => {
                    obj.current_capacity = Some(IntegerOptionalDeserializer::deserialize(
                        "CurrentCapacity",
                        stack,
                    )?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "PendingCapacity" => {
                    obj.pending_capacity = Some(IntegerOptionalDeserializer::deserialize(
                        "PendingCapacity",
                        stack,
                    )?);
                }
                "SecondsBeforeTimeout" => {
                    obj.seconds_before_timeout = Some(IntegerOptionalDeserializer::deserialize(
                        "SecondsBeforeTimeout",
                        stack,
                    )?);
                }
                "TimeoutAction" => {
                    obj.timeout_action =
                        Some(StringDeserializer::deserialize("TimeoutAction", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>This data type represents the information you need to connect to an Amazon Aurora DB cluster. This data type is used as a response element in the following actions:</p> <ul> <li> <p> <code>CreateDBClusterEndpoint</code> </p> </li> <li> <p> <code>DescribeDBClusterEndpoints</code> </p> </li> <li> <p> <code>ModifyDBClusterEndpoint</code> </p> </li> <li> <p> <code>DeleteDBClusterEndpoint</code> </p> </li> </ul> <p>For the data structure that represents Amazon RDS DB instance endpoints, see <code>Endpoint</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterEndpoint {
    /// <p>The type associated with a custom endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub custom_endpoint_type: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
    pub db_cluster_endpoint_arn: Option<String>,
    /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: Option<String>,
    /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
    pub db_cluster_endpoint_resource_identifier: Option<String>,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>The DNS address of the endpoint.</p>
    pub endpoint: Option<String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
    pub endpoint_type: Option<String>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub excluded_members: Option<Vec<String>>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: Option<Vec<String>>,
    /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster, such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBClusterEndpointDeserializer;
impl DBClusterEndpointDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterEndpoint, XmlParseError> {
        deserialize_elements::<_, DBClusterEndpoint, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CustomEndpointType" => {
                    obj.custom_endpoint_type = Some(StringDeserializer::deserialize(
                        "CustomEndpointType",
                        stack,
                    )?);
                }
                "DBClusterEndpointArn" => {
                    obj.db_cluster_endpoint_arn = Some(StringDeserializer::deserialize(
                        "DBClusterEndpointArn",
                        stack,
                    )?);
                }
                "DBClusterEndpointIdentifier" => {
                    obj.db_cluster_endpoint_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterEndpointIdentifier",
                        stack,
                    )?);
                }
                "DBClusterEndpointResourceIdentifier" => {
                    obj.db_cluster_endpoint_resource_identifier =
                        Some(StringDeserializer::deserialize(
                            "DBClusterEndpointResourceIdentifier",
                            stack,
                        )?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "EndpointType" => {
                    obj.endpoint_type =
                        Some(StringDeserializer::deserialize("EndpointType", stack)?);
                }
                "ExcludedMembers" => {
                    obj.excluded_members.get_or_insert(vec![]).extend(
                        StringListDeserializer::deserialize("ExcludedMembers", stack)?,
                    );
                }
                "StaticMembers" => {
                    obj.static_members
                        .get_or_insert(vec![])
                        .extend(StringListDeserializer::deserialize("StaticMembers", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBClusterEndpointListDeserializer;
impl DBClusterEndpointListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterEndpoint>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterEndpointList" {
                obj.push(DBClusterEndpointDeserializer::deserialize(
                    "DBClusterEndpointList",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterEndpointMessage {
    /// <p>Contains the details of the endpoints associated with the cluster and matching any filter conditions.</p>
    pub db_cluster_endpoints: Option<Vec<DBClusterEndpoint>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBClusterEndpointMessageDeserializer;
impl DBClusterEndpointMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterEndpointMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterEndpointMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterEndpoints" => {
                        obj.db_cluster_endpoints.get_or_insert(vec![]).extend(
                            DBClusterEndpointListDeserializer::deserialize(
                                "DBClusterEndpoints",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBClusterListDeserializer;
impl DBClusterListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBCluster>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBCluster" {
                obj.push(DBClusterDeserializer::deserialize("DBCluster", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains information about an instance that is part of a DB cluster.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterMember {
    /// <p>Specifies the status of the DB cluster parameter group for this member of the DB cluster.</p>
    pub db_cluster_parameter_group_status: Option<String>,
    /// <p>Specifies the instance identifier for this member of the DB cluster.</p>
    pub db_instance_identifier: Option<String>,
    /// <p>Value that is <code>true</code> if the cluster member is the primary instance for the DB cluster and <code>false</code> otherwise.</p>
    pub is_cluster_writer: Option<bool>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub promotion_tier: Option<i64>,
}

#[allow(dead_code)]
struct DBClusterMemberDeserializer;
impl DBClusterMemberDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterMember, XmlParseError> {
        deserialize_elements::<_, DBClusterMember, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBClusterParameterGroupStatus" => {
                    obj.db_cluster_parameter_group_status = Some(StringDeserializer::deserialize(
                        "DBClusterParameterGroupStatus",
                        stack,
                    )?);
                }
                "DBInstanceIdentifier" => {
                    obj.db_instance_identifier = Some(StringDeserializer::deserialize(
                        "DBInstanceIdentifier",
                        stack,
                    )?);
                }
                "IsClusterWriter" => {
                    obj.is_cluster_writer =
                        Some(BooleanDeserializer::deserialize("IsClusterWriter", stack)?);
                }
                "PromotionTier" => {
                    obj.promotion_tier = Some(IntegerOptionalDeserializer::deserialize(
                        "PromotionTier",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBClusterMemberListDeserializer;
impl DBClusterMemberListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterMember>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterMember" {
                obj.push(DBClusterMemberDeserializer::deserialize(
                    "DBClusterMember",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the result of a successful invocation of the <code>DescribeDBClusters</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterMessage {
    /// <p>Contains a list of DB clusters for the user.</p>
    pub db_clusters: Option<Vec<DBCluster>>,
    /// <p>A pagination token that can be used in a later DescribeDBClusters request.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBClusterMessageDeserializer;
impl DBClusterMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBClusters" => {
                    obj.db_clusters
                        .get_or_insert(vec![])
                        .extend(DBClusterListDeserializer::deserialize("DBClusters", stack)?);
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBClusterOptionGroupMembershipsDeserializer;
impl DBClusterOptionGroupMembershipsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterOptionGroupStatus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterOptionGroup" {
                obj.push(DBClusterOptionGroupStatusDeserializer::deserialize(
                    "DBClusterOptionGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains status information for a DB cluster option group.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterOptionGroupStatus {
    /// <p>Specifies the name of the DB cluster option group.</p>
    pub db_cluster_option_group_name: Option<String>,
    /// <p>Specifies the status of the DB cluster option group.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBClusterOptionGroupStatusDeserializer;
impl DBClusterOptionGroupStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterOptionGroupStatus, XmlParseError> {
        deserialize_elements::<_, DBClusterOptionGroupStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterOptionGroupName" => {
                        obj.db_cluster_option_group_name = Some(StringDeserializer::deserialize(
                            "DBClusterOptionGroupName",
                            stack,
                        )?);
                    }
                    "Status" => {
                        obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the details of an Amazon RDS DB cluster parameter group. </p> <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterParameterGroup {
    /// <p>The Amazon Resource Name (ARN) for the DB cluster parameter group.</p>
    pub db_cluster_parameter_group_arn: Option<String>,
    /// <p>The name of the DB cluster parameter group.</p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>The name of the DB parameter group family that this DB cluster parameter group is compatible with.</p>
    pub db_parameter_group_family: Option<String>,
    /// <p>Provides the customer-specified description for this DB cluster parameter group.</p>
    pub description: Option<String>,
}

#[allow(dead_code)]
struct DBClusterParameterGroupDeserializer;
impl DBClusterParameterGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterParameterGroup, XmlParseError> {
        deserialize_elements::<_, DBClusterParameterGroup, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterParameterGroupArn" => {
                        obj.db_cluster_parameter_group_arn = Some(StringDeserializer::deserialize(
                            "DBClusterParameterGroupArn",
                            stack,
                        )?);
                    }
                    "DBClusterParameterGroupName" => {
                        obj.db_cluster_parameter_group_name = Some(
                            StringDeserializer::deserialize("DBClusterParameterGroupName", stack)?,
                        );
                    }
                    "DBParameterGroupFamily" => {
                        obj.db_parameter_group_family = Some(StringDeserializer::deserialize(
                            "DBParameterGroupFamily",
                            stack,
                        )?);
                    }
                    "Description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("Description", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Provides details about a DB cluster parameter group including the parameters in the DB cluster parameter group.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterParameterGroupDetails {
    /// <p> An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
    /// <p>Provides a list of parameters for the DB cluster parameter group.</p>
    pub parameters: Option<Vec<Parameter>>,
}

#[allow(dead_code)]
struct DBClusterParameterGroupDetailsDeserializer;
impl DBClusterParameterGroupDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterParameterGroupDetails, XmlParseError> {
        deserialize_elements::<_, DBClusterParameterGroupDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "Parameters" => {
                        obj.parameters.get_or_insert(vec![]).extend(
                            ParametersListDeserializer::deserialize("Parameters", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBClusterParameterGroupListDeserializer;
impl DBClusterParameterGroupListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterParameterGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterParameterGroup" {
                obj.push(DBClusterParameterGroupDeserializer::deserialize(
                    "DBClusterParameterGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterParameterGroupNameMessage {
    /// <p><p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></p>
    pub db_cluster_parameter_group_name: Option<String>,
}

#[allow(dead_code)]
struct DBClusterParameterGroupNameMessageDeserializer;
impl DBClusterParameterGroupNameMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterParameterGroupNameMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterParameterGroupNameMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterParameterGroupName" => {
                        obj.db_cluster_parameter_group_name = Some(
                            StringDeserializer::deserialize("DBClusterParameterGroupName", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterParameterGroupsMessage {
    /// <p>A list of DB cluster parameter groups.</p>
    pub db_cluster_parameter_groups: Option<Vec<DBClusterParameterGroup>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBClusterParameterGroupsMessageDeserializer;
impl DBClusterParameterGroupsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterParameterGroupsMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterParameterGroupsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterParameterGroups" => {
                        obj.db_cluster_parameter_groups
                            .get_or_insert(vec![])
                            .extend(DBClusterParameterGroupListDeserializer::deserialize(
                                "DBClusterParameterGroups",
                                stack,
                            )?);
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB cluster.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterRole {
    /// <p>The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For the list of supported feature names, see <a>DBEngineVersion</a>. </p>
    pub feature_name: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.</p>
    pub role_arn: Option<String>,
    /// <p><p>Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:</p> <ul> <li> <p> <code>ACTIVE</code> - the IAM role ARN is associated with the DB cluster and can be used to access other Amazon Web Services on your behalf.</p> </li> <li> <p> <code>PENDING</code> - the IAM role ARN is being associated with the DB cluster.</p> </li> <li> <p> <code>INVALID</code> - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other Amazon Web Services on your behalf.</p> </li> </ul></p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBClusterRoleDeserializer;
impl DBClusterRoleDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterRole, XmlParseError> {
        deserialize_elements::<_, DBClusterRole, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "FeatureName" => {
                    obj.feature_name = Some(StringDeserializer::deserialize("FeatureName", stack)?);
                }
                "RoleArn" => {
                    obj.role_arn = Some(StringDeserializer::deserialize("RoleArn", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBClusterRolesDeserializer;
impl DBClusterRolesDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterRole>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterRole" {
                obj.push(DBClusterRoleDeserializer::deserialize(
                    "DBClusterRole",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the details for an Amazon RDS DB cluster snapshot </p> <p>This data type is used as a response element in the <code>DescribeDBClusterSnapshots</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterSnapshot {
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub allocated_storage: Option<i64>,
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub cluster_create_time: Option<String>,
    /// <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
    pub db_cluster_snapshot_arn: Option<String>,
    /// <p>Specifies the identifier for the DB cluster snapshot.</p>
    pub db_cluster_snapshot_identifier: Option<String>,
    /// <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
    pub engine: Option<String>,
    /// <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
    pub engine_mode: Option<String>,
    /// <p>Provides the version of the database engine for this DB cluster snapshot.</p>
    pub engine_version: Option<String>,
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>Provides the license model information for this DB cluster snapshot.</p>
    pub license_model: Option<String>,
    /// <p>Provides the master username for this DB cluster snapshot.</p>
    pub master_username: Option<String>,
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    pub percent_progress: Option<i64>,
    /// <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
    pub port: Option<i64>,
    /// <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
    pub snapshot_create_time: Option<String>,
    /// <p>Provides the type of the DB cluster snapshot.</p>
    pub snapshot_type: Option<String>,
    /// <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
    pub source_db_cluster_snapshot_arn: Option<String>,
    /// <p>Specifies the status of this DB cluster snapshot.</p>
    pub status: Option<String>,
    /// <p>Specifies whether the DB cluster snapshot is encrypted.</p>
    pub storage_encrypted: Option<bool>,
    pub tag_list: Option<Vec<Tag>>,
    /// <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct DBClusterSnapshotDeserializer;
impl DBClusterSnapshotDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterSnapshot, XmlParseError> {
        deserialize_elements::<_, DBClusterSnapshot, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllocatedStorage" => {
                    obj.allocated_storage =
                        Some(IntegerDeserializer::deserialize("AllocatedStorage", stack)?);
                }
                "AvailabilityZones" => {
                    obj.availability_zones.get_or_insert(vec![]).extend(
                        AvailabilityZonesDeserializer::deserialize("AvailabilityZones", stack)?,
                    );
                }
                "ClusterCreateTime" => {
                    obj.cluster_create_time =
                        Some(TStampDeserializer::deserialize("ClusterCreateTime", stack)?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "DBClusterSnapshotArn" => {
                    obj.db_cluster_snapshot_arn = Some(StringDeserializer::deserialize(
                        "DBClusterSnapshotArn",
                        stack,
                    )?);
                }
                "DBClusterSnapshotIdentifier" => {
                    obj.db_cluster_snapshot_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterSnapshotIdentifier",
                        stack,
                    )?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineMode" => {
                    obj.engine_mode = Some(StringDeserializer::deserialize("EngineMode", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "IAMDatabaseAuthenticationEnabled" => {
                    obj.iam_database_authentication_enabled =
                        Some(BooleanDeserializer::deserialize(
                            "IAMDatabaseAuthenticationEnabled",
                            stack,
                        )?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "LicenseModel" => {
                    obj.license_model =
                        Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                }
                "MasterUsername" => {
                    obj.master_username =
                        Some(StringDeserializer::deserialize("MasterUsername", stack)?);
                }
                "PercentProgress" => {
                    obj.percent_progress =
                        Some(IntegerDeserializer::deserialize("PercentProgress", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerDeserializer::deserialize("Port", stack)?);
                }
                "SnapshotCreateTime" => {
                    obj.snapshot_create_time = Some(TStampDeserializer::deserialize(
                        "SnapshotCreateTime",
                        stack,
                    )?);
                }
                "SnapshotType" => {
                    obj.snapshot_type =
                        Some(StringDeserializer::deserialize("SnapshotType", stack)?);
                }
                "SourceDBClusterSnapshotArn" => {
                    obj.source_db_cluster_snapshot_arn = Some(StringDeserializer::deserialize(
                        "SourceDBClusterSnapshotArn",
                        stack,
                    )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "StorageEncrypted" => {
                    obj.storage_encrypted =
                        Some(BooleanDeserializer::deserialize("StorageEncrypted", stack)?);
                }
                "TagList" => {
                    obj.tag_list
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("TagList", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the name and values of a manual DB cluster snapshot attribute.</p> <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterSnapshotAttribute {
    /// <p>The name of the manual DB cluster snapshot attribute.</p> <p>The attribute named <code>restore</code> refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub attribute_name: Option<String>,
    /// <p>The value(s) for the manual DB cluster snapshot attribute.</p> <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of <code>all</code> is in the list, then the manual DB cluster snapshot is public and available for any Amazon Web Services account to copy or restore.</p>
    pub attribute_values: Option<Vec<String>>,
}

#[allow(dead_code)]
struct DBClusterSnapshotAttributeDeserializer;
impl DBClusterSnapshotAttributeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterSnapshotAttribute, XmlParseError> {
        deserialize_elements::<_, DBClusterSnapshotAttribute, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AttributeName" => {
                        obj.attribute_name =
                            Some(StringDeserializer::deserialize("AttributeName", stack)?);
                    }
                    "AttributeValues" => {
                        obj.attribute_values.get_or_insert(vec![]).extend(
                            AttributeValueListDeserializer::deserialize("AttributeValues", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBClusterSnapshotAttributeListDeserializer;
impl DBClusterSnapshotAttributeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterSnapshotAttribute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterSnapshotAttribute" {
                obj.push(DBClusterSnapshotAttributeDeserializer::deserialize(
                    "DBClusterSnapshotAttribute",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterSnapshotAttributesResult {
    /// <p>The list of attributes and values for the manual DB cluster snapshot.</p>
    pub db_cluster_snapshot_attributes: Option<Vec<DBClusterSnapshotAttribute>>,
    /// <p>The identifier of the manual DB cluster snapshot that the attributes apply to.</p>
    pub db_cluster_snapshot_identifier: Option<String>,
}

#[allow(dead_code)]
struct DBClusterSnapshotAttributesResultDeserializer;
impl DBClusterSnapshotAttributesResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterSnapshotAttributesResult, XmlParseError> {
        deserialize_elements::<_, DBClusterSnapshotAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshotAttributes" => {
                        obj.db_cluster_snapshot_attributes
                            .get_or_insert(vec![])
                            .extend(DBClusterSnapshotAttributeListDeserializer::deserialize(
                                "DBClusterSnapshotAttributes",
                                stack,
                            )?);
                    }
                    "DBClusterSnapshotIdentifier" => {
                        obj.db_cluster_snapshot_identifier = Some(StringDeserializer::deserialize(
                            "DBClusterSnapshotIdentifier",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBClusterSnapshotListDeserializer;
impl DBClusterSnapshotListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBClusterSnapshot>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBClusterSnapshot" {
                obj.push(DBClusterSnapshotDeserializer::deserialize(
                    "DBClusterSnapshot",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Provides a list of DB cluster snapshots for the user as the result of a call to the <code>DescribeDBClusterSnapshots</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBClusterSnapshotMessage {
    /// <p>Provides a list of DB cluster snapshots for the user.</p>
    pub db_cluster_snapshots: Option<Vec<DBClusterSnapshot>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBClusterSnapshotMessageDeserializer;
impl DBClusterSnapshotMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBClusterSnapshotMessage, XmlParseError> {
        deserialize_elements::<_, DBClusterSnapshotMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshots" => {
                        obj.db_cluster_snapshots.get_or_insert(vec![]).extend(
                            DBClusterSnapshotListDeserializer::deserialize(
                                "DBClusterSnapshots",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p> This data type is used as a response element in the action <code>DescribeDBEngineVersions</code>. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBEngineVersion {
    /// <p>The description of the database engine.</p>
    pub db_engine_description: Option<String>,
    /// <p>The description of the database engine version.</p>
    pub db_engine_version_description: Option<String>,
    /// <p>The name of the DB parameter group family for the database engine.</p>
    pub db_parameter_group_family: Option<String>,
    /// <p> The default character set for new instances of this engine version, if the <code>CharacterSetName</code> parameter of the CreateDBInstance API isn't specified. </p>
    pub default_character_set: Option<CharacterSet>,
    /// <p>The name of the database engine.</p>
    pub engine: Option<String>,
    /// <p>The version number of the database engine.</p>
    pub engine_version: Option<String>,
    /// <p>The types of logs that the database engine has available for export to CloudWatch Logs.</p>
    pub exportable_log_types: Option<Vec<String>>,
    /// <p>The status of the DB engine version, either <code>available</code> or <code>deprecated</code>.</p>
    pub status: Option<String>,
    /// <p>A list of the character sets supported by this engine for the <code>CharacterSetName</code> parameter of the <code>CreateDBInstance</code> operation. </p>
    pub supported_character_sets: Option<Vec<CharacterSet>>,
    /// <p>A list of the supported DB engine modes.</p>
    pub supported_engine_modes: Option<Vec<String>>,
    /// <p><p> A list of features supported by the DB engine. Supported feature names include the following. </p> <ul> <li> <p>s3Import</p> </li> </ul></p>
    pub supported_feature_names: Option<Vec<String>>,
    /// <p>A list of the character sets supported by the Oracle DB engine for the <code>NcharCharacterSetName</code> parameter of the <code>CreateDBInstance</code> operation. </p>
    pub supported_nchar_character_sets: Option<Vec<CharacterSet>>,
    /// <p>A list of the time zones supported by this engine for the <code>Timezone</code> parameter of the <code>CreateDBInstance</code> action. </p>
    pub supported_timezones: Option<Vec<Timezone>>,
    /// <p>A value that indicates whether you can use Aurora global databases with a specific DB engine version.</p>
    pub supports_global_databases: Option<bool>,
    /// <p>A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.</p>
    pub supports_log_exports_to_cloudwatch_logs: Option<bool>,
    /// <p>A value that indicates whether you can use Aurora parallel query with a specific DB engine version.</p>
    pub supports_parallel_query: Option<bool>,
    /// <p>Indicates whether the database engine version supports read replicas.</p>
    pub supports_read_replica: Option<bool>,
    /// <p>A list of engine versions that this database engine version can be upgraded to.</p>
    pub valid_upgrade_target: Option<Vec<UpgradeTarget>>,
}

#[allow(dead_code)]
struct DBEngineVersionDeserializer;
impl DBEngineVersionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBEngineVersion, XmlParseError> {
        deserialize_elements::<_, DBEngineVersion, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBEngineDescription" => {
                    obj.db_engine_description = Some(StringDeserializer::deserialize(
                        "DBEngineDescription",
                        stack,
                    )?);
                }
                "DBEngineVersionDescription" => {
                    obj.db_engine_version_description = Some(StringDeserializer::deserialize(
                        "DBEngineVersionDescription",
                        stack,
                    )?);
                }
                "DBParameterGroupFamily" => {
                    obj.db_parameter_group_family = Some(StringDeserializer::deserialize(
                        "DBParameterGroupFamily",
                        stack,
                    )?);
                }
                "DefaultCharacterSet" => {
                    obj.default_character_set = Some(CharacterSetDeserializer::deserialize(
                        "DefaultCharacterSet",
                        stack,
                    )?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "ExportableLogTypes" => {
                    obj.exportable_log_types.get_or_insert(vec![]).extend(
                        LogTypeListDeserializer::deserialize("ExportableLogTypes", stack)?,
                    );
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "SupportedCharacterSets" => {
                    obj.supported_character_sets.get_or_insert(vec![]).extend(
                        SupportedCharacterSetsListDeserializer::deserialize(
                            "SupportedCharacterSets",
                            stack,
                        )?,
                    );
                }
                "SupportedEngineModes" => {
                    obj.supported_engine_modes.get_or_insert(vec![]).extend(
                        EngineModeListDeserializer::deserialize("SupportedEngineModes", stack)?,
                    );
                }
                "SupportedFeatureNames" => {
                    obj.supported_feature_names.get_or_insert(vec![]).extend(
                        FeatureNameListDeserializer::deserialize("SupportedFeatureNames", stack)?,
                    );
                }
                "SupportedNcharCharacterSets" => {
                    obj.supported_nchar_character_sets
                        .get_or_insert(vec![])
                        .extend(SupportedCharacterSetsListDeserializer::deserialize(
                            "SupportedNcharCharacterSets",
                            stack,
                        )?);
                }
                "SupportedTimezones" => {
                    obj.supported_timezones.get_or_insert(vec![]).extend(
                        SupportedTimezonesListDeserializer::deserialize(
                            "SupportedTimezones",
                            stack,
                        )?,
                    );
                }
                "SupportsGlobalDatabases" => {
                    obj.supports_global_databases = Some(BooleanDeserializer::deserialize(
                        "SupportsGlobalDatabases",
                        stack,
                    )?);
                }
                "SupportsLogExportsToCloudwatchLogs" => {
                    obj.supports_log_exports_to_cloudwatch_logs =
                        Some(BooleanDeserializer::deserialize(
                            "SupportsLogExportsToCloudwatchLogs",
                            stack,
                        )?);
                }
                "SupportsParallelQuery" => {
                    obj.supports_parallel_query = Some(BooleanDeserializer::deserialize(
                        "SupportsParallelQuery",
                        stack,
                    )?);
                }
                "SupportsReadReplica" => {
                    obj.supports_read_replica = Some(BooleanDeserializer::deserialize(
                        "SupportsReadReplica",
                        stack,
                    )?);
                }
                "ValidUpgradeTarget" => {
                    obj.valid_upgrade_target.get_or_insert(vec![]).extend(
                        ValidUpgradeTargetListDeserializer::deserialize(
                            "ValidUpgradeTarget",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBEngineVersionListDeserializer;
impl DBEngineVersionListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBEngineVersion>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBEngineVersion" {
                obj.push(DBEngineVersionDeserializer::deserialize(
                    "DBEngineVersion",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBEngineVersions</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBEngineVersionMessage {
    /// <p> A list of <code>DBEngineVersion</code> elements. </p>
    pub db_engine_versions: Option<Vec<DBEngineVersion>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBEngineVersionMessageDeserializer;
impl DBEngineVersionMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBEngineVersionMessage, XmlParseError> {
        deserialize_elements::<_, DBEngineVersionMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBEngineVersions" => {
                    obj.db_engine_versions.get_or_insert(vec![]).extend(
                        DBEngineVersionListDeserializer::deserialize("DBEngineVersions", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the details of an Amazon RDS DB instance. </p> <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstance {
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub activity_stream_engine_native_audit_fields_included: Option<bool>,
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub activity_stream_kinesis_stream_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub activity_stream_kms_key_id: Option<String>,
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub activity_stream_mode: Option<String>,
    /// <p>The status of the database activity stream.</p>
    pub activity_stream_status: Option<String>,
    /// <p>Specifies the allocated storage size specified in gibibytes.</p>
    pub allocated_storage: Option<i64>,
    /// <p> The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance. </p>
    pub associated_roles: Option<Vec<DBInstanceRole>>,
    /// <p>A value that indicates that minor version patches are applied automatically.</p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>Specifies the name of the Availability Zone the DB instance is located in.</p>
    pub availability_zone: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub aws_backup_recovery_point_arn: Option<String>,
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    pub backup_retention_period: Option<i64>,
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    pub ca_certificate_identifier: Option<String>,
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub character_set_name: Option<String>,
    /// <p>Specifies whether tags are copied from the DB instance to snapshots of the DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>Specifies whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p> <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub customer_owned_ip_enabled: Option<bool>,
    /// <p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub db_instance_arn: Option<String>,
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    pub db_instance_automated_backups_replications:
        Option<Vec<DBInstanceAutomatedBackupsReplication>>,
    /// <p>Contains the name of the compute and memory capacity class of the DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub db_instance_identifier: Option<String>,
    /// <p>Specifies the current state of this database.</p> <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub db_instance_status: Option<String>,
    /// <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL, MariaDB, SQL Server, PostgreSQL</b> </p> <p>Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.</p> <p>Type: String</p> <p> <b>Oracle</b> </p> <p>Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.</p>
    pub db_name: Option<String>,
    /// <p>Provides the list of DB parameter groups applied to this DB instance.</p>
    pub db_parameter_groups: Option<Vec<DBParameterGroupStatus>>,
    /// <p> A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements. </p>
    pub db_security_groups: Option<Vec<DBSecurityGroupMembership>>,
    /// <p>Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub db_subnet_group: Option<DBSubnetGroup>,
    /// <p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub db_instance_port: Option<i64>,
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS customer master key (CMK) for the DB instance is accessed.</p>
    pub dbi_resource_id: Option<String>,
    /// <p>Indicates if the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    pub domain_memberships: Option<Vec<DomainMembership>>,
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p> <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>Specifies the connection endpoint.</p>
    pub endpoint: Option<Endpoint>,
    /// <p>The name of the database engine to be used for this DB instance.</p>
    pub engine: Option<String>,
    /// <p>Indicates the database engine version.</p>
    pub engine_version: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub enhanced_monitoring_resource_arn: Option<String>,
    /// <p><p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p> <p>IAM database authentication can be enabled for the following database engines</p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.</p> </li> </ul></p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>Provides the date and time the DB instance was created.</p>
    pub instance_create_time: Option<String>,
    /// <p>Specifies the Provisioned IOPS (I/O operations per second) value.</p>
    pub iops: Option<i64>,
    /// <p> If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB instance. </p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub latest_restorable_time: Option<String>,
    /// <p>License model information for this DB instance.</p>
    pub license_model: Option<String>,
    /// <p>Specifies the listener connection endpoint for SQL Server Always On.</p>
    pub listener_endpoint: Option<Endpoint>,
    /// <p>Contains the master username for the DB instance.</p>
    pub master_username: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub monitoring_interval: Option<i64>,
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub monitoring_role_arn: Option<String>,
    /// <p>Specifies if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: Option<bool>,
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2. </p>
    pub nchar_character_set_name: Option<String>,
    /// <p>Provides the list of option group memberships for this DB instance.</p>
    pub option_group_memberships: Option<Vec<OptionGroupMembership>>,
    /// <p>A value that specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    pub pending_modified_values: Option<PendingModifiedValues>,
    /// <p>True if Performance Insights is enabled for the DB instance, and otherwise false.</p>
    pub performance_insights_enabled: Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub performance_insights_kms_key_id: Option<String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: Option<i64>,
    /// <p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    pub preferred_backup_window: Option<String>,
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub promotion_tier: Option<i64>,
    /// <p>Specifies the accessibility options for the DB instance.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: Option<bool>,
    /// <p><p>Contains one or more identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output does not contain information about cross region Aurora read replicas.</p> <note> <p>Currently, each RDS DB instance can have only one Aurora read replica.</p> </note></p>
    pub read_replica_db_cluster_identifiers: Option<Vec<String>>,
    /// <p>Contains one or more identifiers of the read replicas associated with this DB instance.</p>
    pub read_replica_db_instance_identifiers: Option<Vec<String>>,
    /// <p>Contains the identifier of the source DB instance if this DB instance is a read replica.</p>
    pub read_replica_source_db_instance_identifier: Option<String>,
    /// <p><p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note> <p>This attribute is only supported in RDS for Oracle.</p> </note></p>
    pub replica_mode: Option<String>,
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub secondary_availability_zone: Option<String>,
    /// <p>The status of a read replica. If the instance isn't a read replica, this is blank.</p>
    pub status_infos: Option<Vec<DBInstanceStatusInfo>>,
    /// <p>Specifies whether the DB instance is encrypted.</p>
    pub storage_encrypted: Option<bool>,
    /// <p>Specifies the storage type associated with DB instance.</p>
    pub storage_type: Option<String>,
    pub tag_list: Option<Vec<Tag>>,
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified. </p>
    pub timezone: Option<String>,
    /// <p>Provides a list of VPC security group elements that the DB instance belongs to.</p>
    pub vpc_security_groups: Option<Vec<VpcSecurityGroupMembership>>,
}

#[allow(dead_code)]
struct DBInstanceDeserializer;
impl DBInstanceDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstance, XmlParseError> {
        deserialize_elements::<_, DBInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ActivityStreamEngineNativeAuditFieldsIncluded" => {
                    obj.activity_stream_engine_native_audit_fields_included =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "ActivityStreamEngineNativeAuditFieldsIncluded",
                            stack,
                        )?);
                }
                "ActivityStreamKinesisStreamName" => {
                    obj.activity_stream_kinesis_stream_name = Some(
                        StringDeserializer::deserialize("ActivityStreamKinesisStreamName", stack)?,
                    );
                }
                "ActivityStreamKmsKeyId" => {
                    obj.activity_stream_kms_key_id = Some(StringDeserializer::deserialize(
                        "ActivityStreamKmsKeyId",
                        stack,
                    )?);
                }
                "ActivityStreamMode" => {
                    obj.activity_stream_mode = Some(ActivityStreamModeDeserializer::deserialize(
                        "ActivityStreamMode",
                        stack,
                    )?);
                }
                "ActivityStreamStatus" => {
                    obj.activity_stream_status =
                        Some(ActivityStreamStatusDeserializer::deserialize(
                            "ActivityStreamStatus",
                            stack,
                        )?);
                }
                "AllocatedStorage" => {
                    obj.allocated_storage =
                        Some(IntegerDeserializer::deserialize("AllocatedStorage", stack)?);
                }
                "AssociatedRoles" => {
                    obj.associated_roles.get_or_insert(vec![]).extend(
                        DBInstanceRolesDeserializer::deserialize("AssociatedRoles", stack)?,
                    );
                }
                "AutoMinorVersionUpgrade" => {
                    obj.auto_minor_version_upgrade = Some(BooleanDeserializer::deserialize(
                        "AutoMinorVersionUpgrade",
                        stack,
                    )?);
                }
                "AvailabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("AvailabilityZone", stack)?);
                }
                "AwsBackupRecoveryPointArn" => {
                    obj.aws_backup_recovery_point_arn = Some(StringDeserializer::deserialize(
                        "AwsBackupRecoveryPointArn",
                        stack,
                    )?);
                }
                "BackupRetentionPeriod" => {
                    obj.backup_retention_period = Some(IntegerDeserializer::deserialize(
                        "BackupRetentionPeriod",
                        stack,
                    )?);
                }
                "CACertificateIdentifier" => {
                    obj.ca_certificate_identifier = Some(StringDeserializer::deserialize(
                        "CACertificateIdentifier",
                        stack,
                    )?);
                }
                "CharacterSetName" => {
                    obj.character_set_name =
                        Some(StringDeserializer::deserialize("CharacterSetName", stack)?);
                }
                "CopyTagsToSnapshot" => {
                    obj.copy_tags_to_snapshot = Some(BooleanDeserializer::deserialize(
                        "CopyTagsToSnapshot",
                        stack,
                    )?);
                }
                "CustomerOwnedIpEnabled" => {
                    obj.customer_owned_ip_enabled = Some(BooleanOptionalDeserializer::deserialize(
                        "CustomerOwnedIpEnabled",
                        stack,
                    )?);
                }
                "DBClusterIdentifier" => {
                    obj.db_cluster_identifier = Some(StringDeserializer::deserialize(
                        "DBClusterIdentifier",
                        stack,
                    )?);
                }
                "DBInstanceArn" => {
                    obj.db_instance_arn =
                        Some(StringDeserializer::deserialize("DBInstanceArn", stack)?);
                }
                "DBInstanceAutomatedBackupsReplications" => {
                    obj.db_instance_automated_backups_replications
                        .get_or_insert(vec![])
                        .extend(
                            DBInstanceAutomatedBackupsReplicationListDeserializer::deserialize(
                                "DBInstanceAutomatedBackupsReplications",
                                stack,
                            )?,
                        );
                }
                "DBInstanceClass" => {
                    obj.db_instance_class =
                        Some(StringDeserializer::deserialize("DBInstanceClass", stack)?);
                }
                "DBInstanceIdentifier" => {
                    obj.db_instance_identifier = Some(StringDeserializer::deserialize(
                        "DBInstanceIdentifier",
                        stack,
                    )?);
                }
                "DBInstanceStatus" => {
                    obj.db_instance_status =
                        Some(StringDeserializer::deserialize("DBInstanceStatus", stack)?);
                }
                "DBName" => {
                    obj.db_name = Some(StringDeserializer::deserialize("DBName", stack)?);
                }
                "DBParameterGroups" => {
                    obj.db_parameter_groups.get_or_insert(vec![]).extend(
                        DBParameterGroupStatusListDeserializer::deserialize(
                            "DBParameterGroups",
                            stack,
                        )?,
                    );
                }
                "DBSecurityGroups" => {
                    obj.db_security_groups.get_or_insert(vec![]).extend(
                        DBSecurityGroupMembershipListDeserializer::deserialize(
                            "DBSecurityGroups",
                            stack,
                        )?,
                    );
                }
                "DBSubnetGroup" => {
                    obj.db_subnet_group = Some(DBSubnetGroupDeserializer::deserialize(
                        "DBSubnetGroup",
                        stack,
                    )?);
                }
                "DbInstancePort" => {
                    obj.db_instance_port =
                        Some(IntegerDeserializer::deserialize("DbInstancePort", stack)?);
                }
                "DbiResourceId" => {
                    obj.dbi_resource_id =
                        Some(StringDeserializer::deserialize("DbiResourceId", stack)?);
                }
                "DeletionProtection" => {
                    obj.deletion_protection = Some(BooleanDeserializer::deserialize(
                        "DeletionProtection",
                        stack,
                    )?);
                }
                "DomainMemberships" => {
                    obj.domain_memberships.get_or_insert(vec![]).extend(
                        DomainMembershipListDeserializer::deserialize("DomainMemberships", stack)?,
                    );
                }
                "EnabledCloudwatchLogsExports" => {
                    obj.enabled_cloudwatch_logs_exports
                        .get_or_insert(vec![])
                        .extend(LogTypeListDeserializer::deserialize(
                            "EnabledCloudwatchLogsExports",
                            stack,
                        )?);
                }
                "Endpoint" => {
                    obj.endpoint = Some(EndpointDeserializer::deserialize("Endpoint", stack)?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "EnhancedMonitoringResourceArn" => {
                    obj.enhanced_monitoring_resource_arn = Some(StringDeserializer::deserialize(
                        "EnhancedMonitoringResourceArn",
                        stack,
                    )?);
                }
                "IAMDatabaseAuthenticationEnabled" => {
                    obj.iam_database_authentication_enabled =
                        Some(BooleanDeserializer::deserialize(
                            "IAMDatabaseAuthenticationEnabled",
                            stack,
                        )?);
                }
                "InstanceCreateTime" => {
                    obj.instance_create_time = Some(TStampDeserializer::deserialize(
                        "InstanceCreateTime",
                        stack,
                    )?);
                }
                "Iops" => {
                    obj.iops = Some(IntegerOptionalDeserializer::deserialize("Iops", stack)?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "LatestRestorableTime" => {
                    obj.latest_restorable_time = Some(TStampDeserializer::deserialize(
                        "LatestRestorableTime",
                        stack,
                    )?);
                }
                "LicenseModel" => {
                    obj.license_model =
                        Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                }
                "ListenerEndpoint" => {
                    obj.listener_endpoint = Some(EndpointDeserializer::deserialize(
                        "ListenerEndpoint",
                        stack,
                    )?);
                }
                "MasterUsername" => {
                    obj.master_username =
                        Some(StringDeserializer::deserialize("MasterUsername", stack)?);
                }
                "MaxAllocatedStorage" => {
                    obj.max_allocated_storage = Some(IntegerOptionalDeserializer::deserialize(
                        "MaxAllocatedStorage",
                        stack,
                    )?);
                }
                "MonitoringInterval" => {
                    obj.monitoring_interval = Some(IntegerOptionalDeserializer::deserialize(
                        "MonitoringInterval",
                        stack,
                    )?);
                }
                "MonitoringRoleArn" => {
                    obj.monitoring_role_arn =
                        Some(StringDeserializer::deserialize("MonitoringRoleArn", stack)?);
                }
                "MultiAZ" => {
                    obj.multi_az = Some(BooleanDeserializer::deserialize("MultiAZ", stack)?);
                }
                "NcharCharacterSetName" => {
                    obj.nchar_character_set_name = Some(StringDeserializer::deserialize(
                        "NcharCharacterSetName",
                        stack,
                    )?);
                }
                "OptionGroupMemberships" => {
                    obj.option_group_memberships.get_or_insert(vec![]).extend(
                        OptionGroupMembershipListDeserializer::deserialize(
                            "OptionGroupMemberships",
                            stack,
                        )?,
                    );
                }
                "PendingModifiedValues" => {
                    obj.pending_modified_values =
                        Some(PendingModifiedValuesDeserializer::deserialize(
                            "PendingModifiedValues",
                            stack,
                        )?);
                }
                "PerformanceInsightsEnabled" => {
                    obj.performance_insights_enabled =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "PerformanceInsightsEnabled",
                            stack,
                        )?);
                }
                "PerformanceInsightsKMSKeyId" => {
                    obj.performance_insights_kms_key_id = Some(StringDeserializer::deserialize(
                        "PerformanceInsightsKMSKeyId",
                        stack,
                    )?);
                }
                "PerformanceInsightsRetentionPeriod" => {
                    obj.performance_insights_retention_period =
                        Some(IntegerOptionalDeserializer::deserialize(
                            "PerformanceInsightsRetentionPeriod",
                            stack,
                        )?);
                }
                "PreferredBackupWindow" => {
                    obj.preferred_backup_window = Some(StringDeserializer::deserialize(
                        "PreferredBackupWindow",
                        stack,
                    )?);
                }
                "PreferredMaintenanceWindow" => {
                    obj.preferred_maintenance_window = Some(StringDeserializer::deserialize(
                        "PreferredMaintenanceWindow",
                        stack,
                    )?);
                }
                "ProcessorFeatures" => {
                    obj.processor_features.get_or_insert(vec![]).extend(
                        ProcessorFeatureListDeserializer::deserialize("ProcessorFeatures", stack)?,
                    );
                }
                "PromotionTier" => {
                    obj.promotion_tier = Some(IntegerOptionalDeserializer::deserialize(
                        "PromotionTier",
                        stack,
                    )?);
                }
                "PubliclyAccessible" => {
                    obj.publicly_accessible = Some(BooleanDeserializer::deserialize(
                        "PubliclyAccessible",
                        stack,
                    )?);
                }
                "ReadReplicaDBClusterIdentifiers" => {
                    obj.read_replica_db_cluster_identifiers
                        .get_or_insert(vec![])
                        .extend(ReadReplicaDBClusterIdentifierListDeserializer::deserialize(
                            "ReadReplicaDBClusterIdentifiers",
                            stack,
                        )?);
                }
                "ReadReplicaDBInstanceIdentifiers" => {
                    obj.read_replica_db_instance_identifiers
                        .get_or_insert(vec![])
                        .extend(
                            ReadReplicaDBInstanceIdentifierListDeserializer::deserialize(
                                "ReadReplicaDBInstanceIdentifiers",
                                stack,
                            )?,
                        );
                }
                "ReadReplicaSourceDBInstanceIdentifier" => {
                    obj.read_replica_source_db_instance_identifier =
                        Some(StringDeserializer::deserialize(
                            "ReadReplicaSourceDBInstanceIdentifier",
                            stack,
                        )?);
                }
                "ReplicaMode" => {
                    obj.replica_mode =
                        Some(ReplicaModeDeserializer::deserialize("ReplicaMode", stack)?);
                }
                "SecondaryAvailabilityZone" => {
                    obj.secondary_availability_zone = Some(StringDeserializer::deserialize(
                        "SecondaryAvailabilityZone",
                        stack,
                    )?);
                }
                "StatusInfos" => {
                    obj.status_infos.get_or_insert(vec![]).extend(
                        DBInstanceStatusInfoListDeserializer::deserialize("StatusInfos", stack)?,
                    );
                }
                "StorageEncrypted" => {
                    obj.storage_encrypted =
                        Some(BooleanDeserializer::deserialize("StorageEncrypted", stack)?);
                }
                "StorageType" => {
                    obj.storage_type = Some(StringDeserializer::deserialize("StorageType", stack)?);
                }
                "TagList" => {
                    obj.tag_list
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("TagList", stack)?);
                }
                "TdeCredentialArn" => {
                    obj.tde_credential_arn =
                        Some(StringDeserializer::deserialize("TdeCredentialArn", stack)?);
                }
                "Timezone" => {
                    obj.timezone = Some(StringDeserializer::deserialize("Timezone", stack)?);
                }
                "VpcSecurityGroups" => {
                    obj.vpc_security_groups.get_or_insert(vec![]).extend(
                        VpcSecurityGroupMembershipListDeserializer::deserialize(
                            "VpcSecurityGroups",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceAutomatedBackup {
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub allocated_storage: Option<i64>,
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub availability_zone: Option<String>,
    /// <p>The retention period for the automated backups.</p>
    pub backup_retention_period: Option<i64>,
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub db_instance_arn: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub db_instance_automated_backups_arn: Option<String>,
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    pub db_instance_automated_backups_replications:
        Option<Vec<DBInstanceAutomatedBackupsReplication>>,
    /// <p>The customer id of the instance that is/was associated with the automated backup. </p>
    pub db_instance_identifier: Option<String>,
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub dbi_resource_id: Option<String>,
    /// <p>Specifies whether the automated backup is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The name of the database engine for this automated backup.</p>
    pub engine: Option<String>,
    /// <p>The version of the database engine for the automated backup.</p>
    pub engine_version: Option<String>,
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>Provides the date and time that the DB instance was created. </p>
    pub instance_create_time: Option<String>,
    /// <p>The IOPS (I/O operations per second) value for the automated backup. </p>
    pub iops: Option<i64>,
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>License model information for the automated backup.</p>
    pub license_model: Option<String>,
    /// <p>The license model of an automated backup.</p>
    pub master_username: Option<String>,
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number that the automated backup used for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
    pub port: Option<i64>,
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub region: Option<String>,
    /// <p>Earliest and latest time an instance can be restored to.</p>
    pub restore_window: Option<RestoreWindow>,
    /// <p><p>Provides a list of status information for an automated backup:</p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available.</p> </li> </ul></p>
    pub status: Option<String>,
    /// <p>Specifies the storage type associated with the automated backup.</p>
    pub storage_type: Option<String>,
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub timezone: Option<String>,
    /// <p>Provides the VPC ID associated with the DB instance</p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceAutomatedBackupDeserializer;
impl DBInstanceAutomatedBackupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceAutomatedBackup, XmlParseError> {
        deserialize_elements::<_, DBInstanceAutomatedBackup, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AllocatedStorage" => {
                        obj.allocated_storage =
                            Some(IntegerDeserializer::deserialize("AllocatedStorage", stack)?);
                    }
                    "AvailabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("AvailabilityZone", stack)?);
                    }
                    "BackupRetentionPeriod" => {
                        obj.backup_retention_period =
                            Some(IntegerOptionalDeserializer::deserialize(
                                "BackupRetentionPeriod",
                                stack,
                            )?);
                    }
                    "DBInstanceArn" => {
                        obj.db_instance_arn =
                            Some(StringDeserializer::deserialize("DBInstanceArn", stack)?);
                    }
                    "DBInstanceAutomatedBackupsArn" => {
                        obj.db_instance_automated_backups_arn =
                            Some(StringDeserializer::deserialize(
                                "DBInstanceAutomatedBackupsArn",
                                stack,
                            )?);
                    }
                    "DBInstanceAutomatedBackupsReplications" => {
                        obj.db_instance_automated_backups_replications
                            .get_or_insert(vec![])
                            .extend(
                                DBInstanceAutomatedBackupsReplicationListDeserializer::deserialize(
                                    "DBInstanceAutomatedBackupsReplications",
                                    stack,
                                )?,
                            );
                    }
                    "DBInstanceIdentifier" => {
                        obj.db_instance_identifier = Some(StringDeserializer::deserialize(
                            "DBInstanceIdentifier",
                            stack,
                        )?);
                    }
                    "DbiResourceId" => {
                        obj.dbi_resource_id =
                            Some(StringDeserializer::deserialize("DbiResourceId", stack)?);
                    }
                    "Encrypted" => {
                        obj.encrypted = Some(BooleanDeserializer::deserialize("Encrypted", stack)?);
                    }
                    "Engine" => {
                        obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                    }
                    "EngineVersion" => {
                        obj.engine_version =
                            Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                    }
                    "IAMDatabaseAuthenticationEnabled" => {
                        obj.iam_database_authentication_enabled =
                            Some(BooleanDeserializer::deserialize(
                                "IAMDatabaseAuthenticationEnabled",
                                stack,
                            )?);
                    }
                    "InstanceCreateTime" => {
                        obj.instance_create_time = Some(TStampDeserializer::deserialize(
                            "InstanceCreateTime",
                            stack,
                        )?);
                    }
                    "Iops" => {
                        obj.iops = Some(IntegerOptionalDeserializer::deserialize("Iops", stack)?);
                    }
                    "KmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                    }
                    "LicenseModel" => {
                        obj.license_model =
                            Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                    }
                    "MasterUsername" => {
                        obj.master_username =
                            Some(StringDeserializer::deserialize("MasterUsername", stack)?);
                    }
                    "OptionGroupName" => {
                        obj.option_group_name =
                            Some(StringDeserializer::deserialize("OptionGroupName", stack)?);
                    }
                    "Port" => {
                        obj.port = Some(IntegerDeserializer::deserialize("Port", stack)?);
                    }
                    "Region" => {
                        obj.region = Some(StringDeserializer::deserialize("Region", stack)?);
                    }
                    "RestoreWindow" => {
                        obj.restore_window = Some(RestoreWindowDeserializer::deserialize(
                            "RestoreWindow",
                            stack,
                        )?);
                    }
                    "Status" => {
                        obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                    }
                    "StorageType" => {
                        obj.storage_type =
                            Some(StringDeserializer::deserialize("StorageType", stack)?);
                    }
                    "TdeCredentialArn" => {
                        obj.tde_credential_arn =
                            Some(StringDeserializer::deserialize("TdeCredentialArn", stack)?);
                    }
                    "Timezone" => {
                        obj.timezone = Some(StringDeserializer::deserialize("Timezone", stack)?);
                    }
                    "VpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBInstanceAutomatedBackupListDeserializer;
impl DBInstanceAutomatedBackupListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBInstanceAutomatedBackup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBInstanceAutomatedBackup" {
                obj.push(DBInstanceAutomatedBackupDeserializer::deserialize(
                    "DBInstanceAutomatedBackup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBInstanceAutomatedBackups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceAutomatedBackupMessage {
    /// <p> A list of <code>DBInstanceAutomatedBackup</code> instances. </p>
    pub db_instance_automated_backups: Option<Vec<DBInstanceAutomatedBackup>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceAutomatedBackupMessageDeserializer;
impl DBInstanceAutomatedBackupMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceAutomatedBackupMessage, XmlParseError> {
        deserialize_elements::<_, DBInstanceAutomatedBackupMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstanceAutomatedBackups" => {
                        obj.db_instance_automated_backups
                            .get_or_insert(vec![])
                            .extend(DBInstanceAutomatedBackupListDeserializer::deserialize(
                                "DBInstanceAutomatedBackups",
                                stack,
                            )?);
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Automated backups of a DB instance replicated to another Amazon Web Services Region. They consist of system backups, transaction logs, and database instance properties.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceAutomatedBackupsReplication {
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups.</p>
    pub db_instance_automated_backups_arn: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceAutomatedBackupsReplicationDeserializer;
impl DBInstanceAutomatedBackupsReplicationDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceAutomatedBackupsReplication, XmlParseError> {
        deserialize_elements::<_, DBInstanceAutomatedBackupsReplication, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstanceAutomatedBackupsArn" => {
                        obj.db_instance_automated_backups_arn =
                            Some(StringDeserializer::deserialize(
                                "DBInstanceAutomatedBackupsArn",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBInstanceAutomatedBackupsReplicationListDeserializer;
impl DBInstanceAutomatedBackupsReplicationListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBInstanceAutomatedBackupsReplication>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBInstanceAutomatedBackupsReplication" {
                obj.push(
                    DBInstanceAutomatedBackupsReplicationDeserializer::deserialize(
                        "DBInstanceAutomatedBackupsReplication",
                        stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBInstanceListDeserializer;
impl DBInstanceListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBInstance" {
                obj.push(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBInstances</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceMessage {
    /// <p> A list of <code>DBInstance</code> instances. </p>
    pub db_instances: Option<Vec<DBInstance>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceMessageDeserializer;
impl DBInstanceMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceMessage, XmlParseError> {
        deserialize_elements::<_, DBInstanceMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstances" => {
                    obj.db_instances.get_or_insert(vec![]).extend(
                        DBInstanceListDeserializer::deserialize("DBInstances", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB instance.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceRole {
    /// <p>The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role. For the list of supported feature names, see <code>DBEngineVersion</code>. </p>
    pub feature_name: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.</p>
    pub role_arn: Option<String>,
    /// <p><p>Describes the state of association between the IAM role and the DB instance. The Status property returns one of the following values:</p> <ul> <li> <p> <code>ACTIVE</code> - the IAM role ARN is associated with the DB instance and can be used to access other Amazon Web Services services on your behalf.</p> </li> <li> <p> <code>PENDING</code> - the IAM role ARN is being associated with the DB instance.</p> </li> <li> <p> <code>INVALID</code> - the IAM role ARN is associated with the DB instance, but the DB instance is unable to assume the IAM role in order to access other Amazon Web Services services on your behalf.</p> </li> </ul></p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceRoleDeserializer;
impl DBInstanceRoleDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceRole, XmlParseError> {
        deserialize_elements::<_, DBInstanceRole, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "FeatureName" => {
                    obj.feature_name = Some(StringDeserializer::deserialize("FeatureName", stack)?);
                }
                "RoleArn" => {
                    obj.role_arn = Some(StringDeserializer::deserialize("RoleArn", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBInstanceRolesDeserializer;
impl DBInstanceRolesDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBInstanceRole>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBInstanceRole" {
                obj.push(DBInstanceRoleDeserializer::deserialize(
                    "DBInstanceRole",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Provides a list of status information for a DB instance.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBInstanceStatusInfo {
    /// <p>Details of the error if there is an error for the instance. If the instance isn't in an error state, this value is blank.</p>
    pub message: Option<String>,
    /// <p>Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.</p>
    pub normal: Option<bool>,
    /// <p>Status of the DB instance. For a StatusType of read replica, the values can be replicating, replication stop point set, replication stop point reached, error, stopped, or terminated.</p>
    pub status: Option<String>,
    /// <p>This value is currently "read replication."</p>
    pub status_type: Option<String>,
}

#[allow(dead_code)]
struct DBInstanceStatusInfoDeserializer;
impl DBInstanceStatusInfoDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBInstanceStatusInfo, XmlParseError> {
        deserialize_elements::<_, DBInstanceStatusInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Message" => {
                    obj.message = Some(StringDeserializer::deserialize("Message", stack)?);
                }
                "Normal" => {
                    obj.normal = Some(BooleanDeserializer::deserialize("Normal", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "StatusType" => {
                    obj.status_type = Some(StringDeserializer::deserialize("StatusType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBInstanceStatusInfoListDeserializer;
impl DBInstanceStatusInfoListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBInstanceStatusInfo>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBInstanceStatusInfo" {
                obj.push(DBInstanceStatusInfoDeserializer::deserialize(
                    "DBInstanceStatusInfo",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the details of an Amazon RDS DB parameter group. </p> <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBParameterGroup {
    /// <p>The Amazon Resource Name (ARN) for the DB parameter group.</p>
    pub db_parameter_group_arn: Option<String>,
    /// <p>The name of the DB parameter group family that this DB parameter group is compatible with.</p>
    pub db_parameter_group_family: Option<String>,
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: Option<String>,
    /// <p>Provides the customer-specified description for this DB parameter group.</p>
    pub description: Option<String>,
}

#[allow(dead_code)]
struct DBParameterGroupDeserializer;
impl DBParameterGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBParameterGroup, XmlParseError> {
        deserialize_elements::<_, DBParameterGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBParameterGroupArn" => {
                    obj.db_parameter_group_arn = Some(StringDeserializer::deserialize(
                        "DBParameterGroupArn",
                        stack,
                    )?);
                }
                "DBParameterGroupFamily" => {
                    obj.db_parameter_group_family = Some(StringDeserializer::deserialize(
                        "DBParameterGroupFamily",
                        stack,
                    )?);
                }
                "DBParameterGroupName" => {
                    obj.db_parameter_group_name = Some(StringDeserializer::deserialize(
                        "DBParameterGroupName",
                        stack,
                    )?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBParameters</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBParameterGroupDetails {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> A list of <code>Parameter</code> values. </p>
    pub parameters: Option<Vec<Parameter>>,
}

#[allow(dead_code)]
struct DBParameterGroupDetailsDeserializer;
impl DBParameterGroupDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBParameterGroupDetails, XmlParseError> {
        deserialize_elements::<_, DBParameterGroupDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "Parameters" => {
                        obj.parameters.get_or_insert(vec![]).extend(
                            ParametersListDeserializer::deserialize("Parameters", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBParameterGroupListDeserializer;
impl DBParameterGroupListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBParameterGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBParameterGroup" {
                obj.push(DBParameterGroupDeserializer::deserialize(
                    "DBParameterGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>ModifyDBParameterGroup</code> or <code>ResetDBParameterGroup</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBParameterGroupNameMessage {
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: Option<String>,
}

#[allow(dead_code)]
struct DBParameterGroupNameMessageDeserializer;
impl DBParameterGroupNameMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBParameterGroupNameMessage, XmlParseError> {
        deserialize_elements::<_, DBParameterGroupNameMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBParameterGroupName" => {
                        obj.db_parameter_group_name = Some(StringDeserializer::deserialize(
                            "DBParameterGroupName",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p>The status of the DB parameter group.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <code>CreateDBInstance</code> </p> </li> <li> <p> <code>CreateDBInstanceReadReplica</code> </p> </li> <li> <p> <code>DeleteDBInstance</code> </p> </li> <li> <p> <code>ModifyDBInstance</code> </p> </li> <li> <p> <code>RebootDBInstance</code> </p> </li> <li> <p> <code>RestoreDBInstanceFromDBSnapshot</code> </p> </li> </ul></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBParameterGroupStatus {
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: Option<String>,
    /// <p>The status of parameter updates.</p>
    pub parameter_apply_status: Option<String>,
}

#[allow(dead_code)]
struct DBParameterGroupStatusDeserializer;
impl DBParameterGroupStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBParameterGroupStatus, XmlParseError> {
        deserialize_elements::<_, DBParameterGroupStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBParameterGroupName" => {
                    obj.db_parameter_group_name = Some(StringDeserializer::deserialize(
                        "DBParameterGroupName",
                        stack,
                    )?);
                }
                "ParameterApplyStatus" => {
                    obj.parameter_apply_status = Some(StringDeserializer::deserialize(
                        "ParameterApplyStatus",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBParameterGroupStatusListDeserializer;
impl DBParameterGroupStatusListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBParameterGroupStatus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBParameterGroup" {
                obj.push(DBParameterGroupStatusDeserializer::deserialize(
                    "DBParameterGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBParameterGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBParameterGroupsMessage {
    /// <p> A list of <code>DBParameterGroup</code> instances. </p>
    pub db_parameter_groups: Option<Vec<DBParameterGroup>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBParameterGroupsMessageDeserializer;
impl DBParameterGroupsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBParameterGroupsMessage, XmlParseError> {
        deserialize_elements::<_, DBParameterGroupsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBParameterGroups" => {
                        obj.db_parameter_groups.get_or_insert(vec![]).extend(
                            DBParameterGroupListDeserializer::deserialize(
                                "DBParameterGroups",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The data structure representing a proxy managed by the RDS Proxy.</p> <p>This data type is used as a response element in the <code>DescribeDBProxies</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBProxy {
    /// <p>One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance or Aurora DB cluster.</p>
    pub auth: Option<Vec<UserAuthConfigInfo>>,
    /// <p>The date and time when the proxy was first created.</p>
    pub created_date: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the proxy.</p>
    pub db_proxy_arn: Option<String>,
    /// <p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    pub db_proxy_name: Option<String>,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub debug_logging: Option<bool>,
    /// <p>The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.</p>
    pub endpoint: Option<String>,
    /// <p>The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
    pub engine_family: Option<String>,
    /// <p>The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection. The proxy keeps the underlying database connection open and puts it back into the connection pool for reuse by later connection requests.</p> <p>Default: 1800 (30 minutes)</p> <p>Constraints: 1 to 28,800</p>
    pub idle_client_timeout: Option<i64>,
    /// <p>Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.</p>
    pub require_tls: Option<bool>,
    /// <p>The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.</p>
    pub role_arn: Option<String>,
    /// <p>The current status of this proxy. A status of <code>available</code> means the proxy is ready to handle requests. Other values indicate that you must wait for the proxy to be ready, or take some action to resolve an issue.</p>
    pub status: Option<String>,
    /// <p>The date and time when the proxy was last updated.</p>
    pub updated_date: Option<String>,
    /// <p>Provides the VPC ID of the DB proxy.</p>
    pub vpc_id: Option<String>,
    /// <p>Provides a list of VPC security groups that the proxy belongs to.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
    /// <p>The EC2 subnet IDs for the proxy.</p>
    pub vpc_subnet_ids: Option<Vec<String>>,
}

#[allow(dead_code)]
struct DBProxyDeserializer;
impl DBProxyDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBProxy, XmlParseError> {
        deserialize_elements::<_, DBProxy, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Auth" => {
                    obj.auth.get_or_insert(vec![]).extend(
                        UserAuthConfigInfoListDeserializer::deserialize("Auth", stack)?,
                    );
                }
                "CreatedDate" => {
                    obj.created_date = Some(TStampDeserializer::deserialize("CreatedDate", stack)?);
                }
                "DBProxyArn" => {
                    obj.db_proxy_arn = Some(StringDeserializer::deserialize("DBProxyArn", stack)?);
                }
                "DBProxyName" => {
                    obj.db_proxy_name =
                        Some(StringDeserializer::deserialize("DBProxyName", stack)?);
                }
                "DebugLogging" => {
                    obj.debug_logging =
                        Some(BooleanDeserializer::deserialize("DebugLogging", stack)?);
                }
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "EngineFamily" => {
                    obj.engine_family =
                        Some(StringDeserializer::deserialize("EngineFamily", stack)?);
                }
                "IdleClientTimeout" => {
                    obj.idle_client_timeout = Some(IntegerDeserializer::deserialize(
                        "IdleClientTimeout",
                        stack,
                    )?);
                }
                "RequireTLS" => {
                    obj.require_tls = Some(BooleanDeserializer::deserialize("RequireTLS", stack)?);
                }
                "RoleArn" => {
                    obj.role_arn = Some(StringDeserializer::deserialize("RoleArn", stack)?);
                }
                "Status" => {
                    obj.status = Some(DBProxyStatusDeserializer::deserialize("Status", stack)?);
                }
                "UpdatedDate" => {
                    obj.updated_date = Some(TStampDeserializer::deserialize("UpdatedDate", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                "VpcSecurityGroupIds" => {
                    obj.vpc_security_group_ids.get_or_insert(vec![]).extend(
                        StringListDeserializer::deserialize("VpcSecurityGroupIds", stack)?,
                    );
                }
                "VpcSubnetIds" => {
                    obj.vpc_subnet_ids
                        .get_or_insert(vec![])
                        .extend(StringListDeserializer::deserialize("VpcSubnetIds", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The data structure representing an endpoint associated with a DB proxy. RDS automatically creates one endpoint for each DB proxy. For Aurora DB clusters, you can associate additional endpoints with the same DB proxy. These endpoints can be read/write or read-only. They can also reside in different VPCs than the associated DB proxy.</p> <p>This data type is used as a response element in the <code>DescribeDBProxyEndpoints</code> operation.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBProxyEndpoint {
    /// <p>The date and time when the DB proxy endpoint was first created.</p>
    pub created_date: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the DB proxy endpoint.</p>
    pub db_proxy_endpoint_arn: Option<String>,
    /// <p>The name for the DB proxy endpoint. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub db_proxy_endpoint_name: Option<String>,
    /// <p>The identifier for the DB proxy that is associated with this DB proxy endpoint.</p>
    pub db_proxy_name: Option<String>,
    /// <p>The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.</p>
    pub endpoint: Option<String>,
    /// <p>A value that indicates whether this endpoint is the default endpoint for the associated DB proxy. Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the DB proxy can be either read/write or read-only.</p>
    pub is_default: Option<bool>,
    /// <p>The current status of this DB proxy endpoint. A status of <code>available</code> means the endpoint is ready to handle requests. Other values indicate that you must wait for the endpoint to be ready, or take some action to resolve an issue.</p>
    pub status: Option<String>,
    /// <p>A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.</p>
    pub target_role: Option<String>,
    /// <p>Provides the VPC ID of the DB proxy endpoint.</p>
    pub vpc_id: Option<String>,
    /// <p>Provides a list of VPC security groups that the DB proxy endpoint belongs to.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
    /// <p>The EC2 subnet IDs for the DB proxy endpoint.</p>
    pub vpc_subnet_ids: Option<Vec<String>>,
}

#[allow(dead_code)]
struct DBProxyEndpointDeserializer;
impl DBProxyEndpointDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBProxyEndpoint, XmlParseError> {
        deserialize_elements::<_, DBProxyEndpoint, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CreatedDate" => {
                    obj.created_date = Some(TStampDeserializer::deserialize("CreatedDate", stack)?);
                }
                "DBProxyEndpointArn" => {
                    obj.db_proxy_endpoint_arn = Some(StringDeserializer::deserialize(
                        "DBProxyEndpointArn",
                        stack,
                    )?);
                }
                "DBProxyEndpointName" => {
                    obj.db_proxy_endpoint_name = Some(StringDeserializer::deserialize(
                        "DBProxyEndpointName",
                        stack,
                    )?);
                }
                "DBProxyName" => {
                    obj.db_proxy_name =
                        Some(StringDeserializer::deserialize("DBProxyName", stack)?);
                }
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "IsDefault" => {
                    obj.is_default = Some(BooleanDeserializer::deserialize("IsDefault", stack)?);
                }
                "Status" => {
                    obj.status = Some(DBProxyEndpointStatusDeserializer::deserialize(
                        "Status", stack,
                    )?);
                }
                "TargetRole" => {
                    obj.target_role = Some(DBProxyEndpointTargetRoleDeserializer::deserialize(
                        "TargetRole",
                        stack,
                    )?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                "VpcSecurityGroupIds" => {
                    obj.vpc_security_group_ids.get_or_insert(vec![]).extend(
                        StringListDeserializer::deserialize("VpcSecurityGroupIds", stack)?,
                    );
                }
                "VpcSubnetIds" => {
                    obj.vpc_subnet_ids
                        .get_or_insert(vec![])
                        .extend(StringListDeserializer::deserialize("VpcSubnetIds", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBProxyEndpointListDeserializer;
impl DBProxyEndpointListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBProxyEndpoint>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(DBProxyEndpointDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBProxyEndpointStatusDeserializer;
impl DBProxyEndpointStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct DBProxyEndpointTargetRoleDeserializer;
impl DBProxyEndpointTargetRoleDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct DBProxyListDeserializer;
impl DBProxyListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBProxy>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(DBProxyDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBProxyStatusDeserializer;
impl DBProxyStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p>Contains the details for an RDS Proxy target. It represents an RDS DB instance or Aurora DB cluster that the proxy can connect to. One or more targets are associated with an RDS Proxy target group.</p> <p>This data type is used as a response element in the <code>DescribeDBProxyTargets</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBProxyTarget {
    /// <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
    pub endpoint: Option<String>,
    /// <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
    pub port: Option<i64>,
    /// <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.</p>
    pub rds_resource_id: Option<String>,
    /// <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
    pub role: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
    pub target_arn: Option<String>,
    /// <p>Information about the connection health of the RDS Proxy target.</p>
    pub target_health: Option<TargetHealth>,
    /// <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
    pub tracked_cluster_id: Option<String>,
    /// <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
    pub type_: Option<String>,
}

#[allow(dead_code)]
struct DBProxyTargetDeserializer;
impl DBProxyTargetDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBProxyTarget, XmlParseError> {
        deserialize_elements::<_, DBProxyTarget, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerDeserializer::deserialize("Port", stack)?);
                }
                "RdsResourceId" => {
                    obj.rds_resource_id =
                        Some(StringDeserializer::deserialize("RdsResourceId", stack)?);
                }
                "Role" => {
                    obj.role = Some(TargetRoleDeserializer::deserialize("Role", stack)?);
                }
                "TargetArn" => {
                    obj.target_arn = Some(StringDeserializer::deserialize("TargetArn", stack)?);
                }
                "TargetHealth" => {
                    obj.target_health = Some(TargetHealthDeserializer::deserialize(
                        "TargetHealth",
                        stack,
                    )?);
                }
                "TrackedClusterId" => {
                    obj.tracked_cluster_id =
                        Some(StringDeserializer::deserialize("TrackedClusterId", stack)?);
                }
                "Type" => {
                    obj.type_ = Some(TargetTypeDeserializer::deserialize("Type", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Represents a set of RDS DB instances, Aurora DB clusters, or both that a proxy can connect to. Currently, each target group is associated with exactly one RDS DB instance or Aurora DB cluster.</p> <p>This data type is used as a response element in the <code>DescribeDBProxyTargetGroups</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBProxyTargetGroup {
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub connection_pool_config: Option<ConnectionPoolConfigurationInfo>,
    /// <p>The date and time when the target group was first created.</p>
    pub created_date: Option<String>,
    /// <p>The identifier for the RDS proxy associated with this target group.</p>
    pub db_proxy_name: Option<String>,
    /// <p>Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always <code>true</code>.</p>
    pub is_default: Option<bool>,
    /// <p>The current status of this target group. A status of <code>available</code> means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.</p>
    pub status: Option<String>,
    /// <p>The Amazon Resource Name (ARN) representing the target group.</p>
    pub target_group_arn: Option<String>,
    /// <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    pub target_group_name: Option<String>,
    /// <p>The date and time when the target group was last updated.</p>
    pub updated_date: Option<String>,
}

#[allow(dead_code)]
struct DBProxyTargetGroupDeserializer;
impl DBProxyTargetGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBProxyTargetGroup, XmlParseError> {
        deserialize_elements::<_, DBProxyTargetGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ConnectionPoolConfig" => {
                    obj.connection_pool_config =
                        Some(ConnectionPoolConfigurationInfoDeserializer::deserialize(
                            "ConnectionPoolConfig",
                            stack,
                        )?);
                }
                "CreatedDate" => {
                    obj.created_date = Some(TStampDeserializer::deserialize("CreatedDate", stack)?);
                }
                "DBProxyName" => {
                    obj.db_proxy_name =
                        Some(StringDeserializer::deserialize("DBProxyName", stack)?);
                }
                "IsDefault" => {
                    obj.is_default = Some(BooleanDeserializer::deserialize("IsDefault", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "TargetGroupArn" => {
                    obj.target_group_arn =
                        Some(StringDeserializer::deserialize("TargetGroupArn", stack)?);
                }
                "TargetGroupName" => {
                    obj.target_group_name =
                        Some(StringDeserializer::deserialize("TargetGroupName", stack)?);
                }
                "UpdatedDate" => {
                    obj.updated_date = Some(TStampDeserializer::deserialize("UpdatedDate", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the details for an Amazon RDS DB security group. </p> <p>This data type is used as a response element in the <code>DescribeDBSecurityGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSecurityGroup {
    /// <p>The Amazon Resource Name (ARN) for the DB security group.</p>
    pub db_security_group_arn: Option<String>,
    /// <p>Provides the description of the DB security group.</p>
    pub db_security_group_description: Option<String>,
    /// <p>Specifies the name of the DB security group.</p>
    pub db_security_group_name: Option<String>,
    /// <p> Contains a list of <code>EC2SecurityGroup</code> elements. </p>
    pub ec2_security_groups: Option<Vec<EC2SecurityGroup>>,
    /// <p> Contains a list of <code>IPRange</code> elements. </p>
    pub ip_ranges: Option<Vec<IPRange>>,
    /// <p>Provides the Amazon Web Services ID of the owner of a specific DB security group.</p>
    pub owner_id: Option<String>,
    /// <p>Provides the VpcId of the DB security group.</p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct DBSecurityGroupDeserializer;
impl DBSecurityGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSecurityGroup, XmlParseError> {
        deserialize_elements::<_, DBSecurityGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSecurityGroupArn" => {
                    obj.db_security_group_arn = Some(StringDeserializer::deserialize(
                        "DBSecurityGroupArn",
                        stack,
                    )?);
                }
                "DBSecurityGroupDescription" => {
                    obj.db_security_group_description = Some(StringDeserializer::deserialize(
                        "DBSecurityGroupDescription",
                        stack,
                    )?);
                }
                "DBSecurityGroupName" => {
                    obj.db_security_group_name = Some(StringDeserializer::deserialize(
                        "DBSecurityGroupName",
                        stack,
                    )?);
                }
                "EC2SecurityGroups" => {
                    obj.ec2_security_groups.get_or_insert(vec![]).extend(
                        EC2SecurityGroupListDeserializer::deserialize("EC2SecurityGroups", stack)?,
                    );
                }
                "IPRanges" => {
                    obj.ip_ranges
                        .get_or_insert(vec![])
                        .extend(IPRangeListDeserializer::deserialize("IPRanges", stack)?);
                }
                "OwnerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("OwnerId", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <code>ModifyDBInstance</code> </p> </li> <li> <p> <code>RebootDBInstance</code> </p> </li> <li> <p> <code>RestoreDBInstanceFromDBSnapshot</code> </p> </li> <li> <p> <code>RestoreDBInstanceToPointInTime</code> </p> </li> </ul></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSecurityGroupMembership {
    /// <p>The name of the DB security group.</p>
    pub db_security_group_name: Option<String>,
    /// <p>The status of the DB security group.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DBSecurityGroupMembershipDeserializer;
impl DBSecurityGroupMembershipDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSecurityGroupMembership, XmlParseError> {
        deserialize_elements::<_, DBSecurityGroupMembership, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSecurityGroupName" => {
                        obj.db_security_group_name = Some(StringDeserializer::deserialize(
                            "DBSecurityGroupName",
                            stack,
                        )?);
                    }
                    "Status" => {
                        obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBSecurityGroupMembershipListDeserializer;
impl DBSecurityGroupMembershipListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBSecurityGroupMembership>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBSecurityGroup" {
                obj.push(DBSecurityGroupMembershipDeserializer::deserialize(
                    "DBSecurityGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBSecurityGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSecurityGroupMessage {
    /// <p> A list of <code>DBSecurityGroup</code> instances. </p>
    pub db_security_groups: Option<Vec<DBSecurityGroup>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBSecurityGroupMessageDeserializer;
impl DBSecurityGroupMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSecurityGroupMessage, XmlParseError> {
        deserialize_elements::<_, DBSecurityGroupMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSecurityGroups" => {
                    obj.db_security_groups.get_or_insert(vec![]).extend(
                        DBSecurityGroupsDeserializer::deserialize("DBSecurityGroups", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `DBSecurityGroupNameList` contents to a `SignedRequest`.
struct DBSecurityGroupNameListSerializer;
impl DBSecurityGroupNameListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[allow(dead_code)]
struct DBSecurityGroupsDeserializer;
impl DBSecurityGroupsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBSecurityGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBSecurityGroup" {
                obj.push(DBSecurityGroupDeserializer::deserialize(
                    "DBSecurityGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the details of an Amazon RDS DB snapshot. </p> <p>This data type is used as a response element in the <code>DescribeDBSnapshots</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSnapshot {
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub allocated_storage: Option<i64>,
    /// <p>Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.</p>
    pub availability_zone: Option<String>,
    /// <p>Specifies the DB instance identifier of the DB instance this DB snapshot was created from.</p>
    pub db_instance_identifier: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the DB snapshot.</p>
    pub db_snapshot_arn: Option<String>,
    /// <p>Specifies the identifier for the DB snapshot.</p>
    pub db_snapshot_identifier: Option<String>,
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub dbi_resource_id: Option<String>,
    /// <p>Specifies whether the DB snapshot is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>Specifies the name of the database engine.</p>
    pub engine: Option<String>,
    /// <p>Specifies the version of the database engine.</p>
    pub engine_version: Option<String>,
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.</p>
    pub instance_create_time: Option<String>,
    /// <p>Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>
    pub iops: Option<i64>,
    /// <p> If <code>Encrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB snapshot. </p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>License model information for the restored DB instance.</p>
    pub license_model: Option<String>,
    /// <p>Provides the master username for the DB snapshot.</p>
    pub master_username: Option<String>,
    /// <p>Provides the option group name for the DB snapshot.</p>
    pub option_group_name: Option<String>,
    /// <p>The percentage of the estimated data that has been transferred.</p>
    pub percent_progress: Option<i64>,
    /// <p>Specifies the port that the database engine was listening on at the time of the snapshot.</p>
    pub port: Option<i64>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>Specifies when the snapshot was taken in Coordinated Universal Time (UTC).</p>
    pub snapshot_create_time: Option<String>,
    /// <p>Provides the type of the DB snapshot.</p>
    pub snapshot_type: Option<String>,
    /// <p>The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has value in case of cross-customer or cross-region copy.</p>
    pub source_db_snapshot_identifier: Option<String>,
    /// <p>The Amazon Web Services Region that the DB snapshot was created in or copied from.</p>
    pub source_region: Option<String>,
    /// <p>Specifies the status of this DB snapshot.</p>
    pub status: Option<String>,
    /// <p>Specifies the storage type associated with DB snapshot.</p>
    pub storage_type: Option<String>,
    pub tag_list: Option<Vec<Tag>>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The time zone of the DB snapshot. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified. </p>
    pub timezone: Option<String>,
    /// <p>Provides the VPC ID associated with the DB snapshot.</p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct DBSnapshotDeserializer;
impl DBSnapshotDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSnapshot, XmlParseError> {
        deserialize_elements::<_, DBSnapshot, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllocatedStorage" => {
                    obj.allocated_storage =
                        Some(IntegerDeserializer::deserialize("AllocatedStorage", stack)?);
                }
                "AvailabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("AvailabilityZone", stack)?);
                }
                "DBInstanceIdentifier" => {
                    obj.db_instance_identifier = Some(StringDeserializer::deserialize(
                        "DBInstanceIdentifier",
                        stack,
                    )?);
                }
                "DBSnapshotArn" => {
                    obj.db_snapshot_arn =
                        Some(StringDeserializer::deserialize("DBSnapshotArn", stack)?);
                }
                "DBSnapshotIdentifier" => {
                    obj.db_snapshot_identifier = Some(StringDeserializer::deserialize(
                        "DBSnapshotIdentifier",
                        stack,
                    )?);
                }
                "DbiResourceId" => {
                    obj.dbi_resource_id =
                        Some(StringDeserializer::deserialize("DbiResourceId", stack)?);
                }
                "Encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("Encrypted", stack)?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "IAMDatabaseAuthenticationEnabled" => {
                    obj.iam_database_authentication_enabled =
                        Some(BooleanDeserializer::deserialize(
                            "IAMDatabaseAuthenticationEnabled",
                            stack,
                        )?);
                }
                "InstanceCreateTime" => {
                    obj.instance_create_time = Some(TStampDeserializer::deserialize(
                        "InstanceCreateTime",
                        stack,
                    )?);
                }
                "Iops" => {
                    obj.iops = Some(IntegerOptionalDeserializer::deserialize("Iops", stack)?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "LicenseModel" => {
                    obj.license_model =
                        Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                }
                "MasterUsername" => {
                    obj.master_username =
                        Some(StringDeserializer::deserialize("MasterUsername", stack)?);
                }
                "OptionGroupName" => {
                    obj.option_group_name =
                        Some(StringDeserializer::deserialize("OptionGroupName", stack)?);
                }
                "PercentProgress" => {
                    obj.percent_progress =
                        Some(IntegerDeserializer::deserialize("PercentProgress", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerDeserializer::deserialize("Port", stack)?);
                }
                "ProcessorFeatures" => {
                    obj.processor_features.get_or_insert(vec![]).extend(
                        ProcessorFeatureListDeserializer::deserialize("ProcessorFeatures", stack)?,
                    );
                }
                "SnapshotCreateTime" => {
                    obj.snapshot_create_time = Some(TStampDeserializer::deserialize(
                        "SnapshotCreateTime",
                        stack,
                    )?);
                }
                "SnapshotType" => {
                    obj.snapshot_type =
                        Some(StringDeserializer::deserialize("SnapshotType", stack)?);
                }
                "SourceDBSnapshotIdentifier" => {
                    obj.source_db_snapshot_identifier = Some(StringDeserializer::deserialize(
                        "SourceDBSnapshotIdentifier",
                        stack,
                    )?);
                }
                "SourceRegion" => {
                    obj.source_region =
                        Some(StringDeserializer::deserialize("SourceRegion", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "StorageType" => {
                    obj.storage_type = Some(StringDeserializer::deserialize("StorageType", stack)?);
                }
                "TagList" => {
                    obj.tag_list
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("TagList", stack)?);
                }
                "TdeCredentialArn" => {
                    obj.tde_credential_arn =
                        Some(StringDeserializer::deserialize("TdeCredentialArn", stack)?);
                }
                "Timezone" => {
                    obj.timezone = Some(StringDeserializer::deserialize("Timezone", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the name and values of a manual DB snapshot attribute</p> <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code> API.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSnapshotAttribute {
    /// <p>The name of the manual DB snapshot attribute.</p> <p>The attribute named <code>restore</code> refers to the list of Amazon Web Services accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code> API action.</p>
    pub attribute_name: Option<String>,
    /// <p>The value or values for the manual DB snapshot attribute.</p> <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual DB snapshot. If a value of <code>all</code> is in the list, then the manual DB snapshot is public and available for any Amazon Web Services account to copy or restore.</p>
    pub attribute_values: Option<Vec<String>>,
}

#[allow(dead_code)]
struct DBSnapshotAttributeDeserializer;
impl DBSnapshotAttributeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSnapshotAttribute, XmlParseError> {
        deserialize_elements::<_, DBSnapshotAttribute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AttributeName" => {
                    obj.attribute_name =
                        Some(StringDeserializer::deserialize("AttributeName", stack)?);
                }
                "AttributeValues" => {
                    obj.attribute_values.get_or_insert(vec![]).extend(
                        AttributeValueListDeserializer::deserialize("AttributeValues", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBSnapshotAttributeListDeserializer;
impl DBSnapshotAttributeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBSnapshotAttribute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBSnapshotAttribute" {
                obj.push(DBSnapshotAttributeDeserializer::deserialize(
                    "DBSnapshotAttribute",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code> API action.</p> <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code> API action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSnapshotAttributesResult {
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    pub db_snapshot_attributes: Option<Vec<DBSnapshotAttribute>>,
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub db_snapshot_identifier: Option<String>,
}

#[allow(dead_code)]
struct DBSnapshotAttributesResultDeserializer;
impl DBSnapshotAttributesResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSnapshotAttributesResult, XmlParseError> {
        deserialize_elements::<_, DBSnapshotAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSnapshotAttributes" => {
                        obj.db_snapshot_attributes.get_or_insert(vec![]).extend(
                            DBSnapshotAttributeListDeserializer::deserialize(
                                "DBSnapshotAttributes",
                                stack,
                            )?,
                        );
                    }
                    "DBSnapshotIdentifier" => {
                        obj.db_snapshot_identifier = Some(StringDeserializer::deserialize(
                            "DBSnapshotIdentifier",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DBSnapshotListDeserializer;
impl DBSnapshotListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBSnapshot>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBSnapshot" {
                obj.push(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBSnapshots</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSnapshotMessage {
    /// <p> A list of <code>DBSnapshot</code> instances. </p>
    pub db_snapshots: Option<Vec<DBSnapshot>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBSnapshotMessageDeserializer;
impl DBSnapshotMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSnapshotMessage, XmlParseError> {
        deserialize_elements::<_, DBSnapshotMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSnapshots" => {
                    obj.db_snapshots.get_or_insert(vec![]).extend(
                        DBSnapshotListDeserializer::deserialize("DBSnapshots", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the details of an Amazon RDS DB subnet group. </p> <p>This data type is used as a response element in the <code>DescribeDBSubnetGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSubnetGroup {
    /// <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
    pub db_subnet_group_arn: Option<String>,
    /// <p>Provides the description of the DB subnet group.</p>
    pub db_subnet_group_description: Option<String>,
    /// <p>The name of the DB subnet group.</p>
    pub db_subnet_group_name: Option<String>,
    /// <p>Provides the status of the DB subnet group.</p>
    pub subnet_group_status: Option<String>,
    /// <p> Contains a list of <code>Subnet</code> elements. </p>
    pub subnets: Option<Vec<Subnet>>,
    /// <p>Provides the VpcId of the DB subnet group.</p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct DBSubnetGroupDeserializer;
impl DBSubnetGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSubnetGroup, XmlParseError> {
        deserialize_elements::<_, DBSubnetGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSubnetGroupArn" => {
                    obj.db_subnet_group_arn =
                        Some(StringDeserializer::deserialize("DBSubnetGroupArn", stack)?);
                }
                "DBSubnetGroupDescription" => {
                    obj.db_subnet_group_description = Some(StringDeserializer::deserialize(
                        "DBSubnetGroupDescription",
                        stack,
                    )?);
                }
                "DBSubnetGroupName" => {
                    obj.db_subnet_group_name =
                        Some(StringDeserializer::deserialize("DBSubnetGroupName", stack)?);
                }
                "SubnetGroupStatus" => {
                    obj.subnet_group_status =
                        Some(StringDeserializer::deserialize("SubnetGroupStatus", stack)?);
                }
                "Subnets" => {
                    obj.subnets
                        .get_or_insert(vec![])
                        .extend(SubnetListDeserializer::deserialize("Subnets", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeDBSubnetGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DBSubnetGroupMessage {
    /// <p> A list of <code>DBSubnetGroup</code> instances. </p>
    pub db_subnet_groups: Option<Vec<DBSubnetGroup>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DBSubnetGroupMessageDeserializer;
impl DBSubnetGroupMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DBSubnetGroupMessage, XmlParseError> {
        deserialize_elements::<_, DBSubnetGroupMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSubnetGroups" => {
                    obj.db_subnet_groups.get_or_insert(vec![]).extend(
                        DBSubnetGroupsDeserializer::deserialize("DBSubnetGroups", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DBSubnetGroupsDeserializer;
impl DBSubnetGroupsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBSubnetGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DBSubnetGroup" {
                obj.push(DBSubnetGroupDeserializer::deserialize(
                    "DBSubnetGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteCustomAvailabilityZoneMessage {
    /// <p>The custom AZ identifier.</p>
    pub custom_availability_zone_id: String,
}

/// Serialize `DeleteCustomAvailabilityZoneMessage` contents to a `SignedRequest`.
struct DeleteCustomAvailabilityZoneMessageSerializer;
impl DeleteCustomAvailabilityZoneMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteCustomAvailabilityZoneMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CustomAvailabilityZoneId"),
            &obj.custom_availability_zone_id,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteCustomAvailabilityZoneResult {
    pub custom_availability_zone: Option<CustomAvailabilityZone>,
}

#[allow(dead_code)]
struct DeleteCustomAvailabilityZoneResultDeserializer;
impl DeleteCustomAvailabilityZoneResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteCustomAvailabilityZoneResult, XmlParseError> {
        deserialize_elements::<_, DeleteCustomAvailabilityZoneResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "CustomAvailabilityZone" => {
                        obj.custom_availability_zone =
                            Some(CustomAvailabilityZoneDeserializer::deserialize(
                                "CustomAvailabilityZone",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBClusterEndpointMessage {
    /// <p>The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: String,
}

/// Serialize `DeleteDBClusterEndpointMessage` contents to a `SignedRequest`.
struct DeleteDBClusterEndpointMessageSerializer;
impl DeleteDBClusterEndpointMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterEndpointMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterEndpointIdentifier"),
            &obj.db_cluster_endpoint_identifier,
        );
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBClusterMessage {
    /// <p><p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul></p>
    pub db_cluster_identifier: String,
    /// <p><p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul></p>
    pub final_db_snapshot_identifier: Option<String>,
    /// <p><p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn&#39;t specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn&#39;t specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note></p>
    pub skip_final_snapshot: Option<bool>,
}

/// Serialize `DeleteDBClusterMessage` contents to a `SignedRequest`.
struct DeleteDBClusterMessageSerializer;
impl DeleteDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.final_db_snapshot_identifier {
            params.put(
                &format!("{}{}", prefix, "FinalDBSnapshotIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.skip_final_snapshot {
            params.put(&format!("{}{}", prefix, "SkipFinalSnapshot"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBClusterParameterGroupMessage {
    /// <p><p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can&#39;t delete a default DB cluster parameter group.</p> </li> <li> <p>Can&#39;t be associated with any DB clusters.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: String,
}

/// Serialize `DeleteDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct DeleteDBClusterParameterGroupMessageSerializer;
impl DeleteDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterParameterGroupName"),
            &obj.db_cluster_parameter_group_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct DeleteDBClusterResultDeserializer;
impl DeleteDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBClusterResult, XmlParseError> {
        deserialize_elements::<_, DeleteDBClusterResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBCluster" => {
                    obj.db_cluster = Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBClusterSnapshotMessage {
    /// <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
    pub db_cluster_snapshot_identifier: String,
}

/// Serialize `DeleteDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct DeleteDBClusterSnapshotMessageSerializer;
impl DeleteDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
            &obj.db_cluster_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

#[allow(dead_code)]
struct DeleteDBClusterSnapshotResultDeserializer;
impl DeleteDBClusterSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBClusterSnapshotResult, XmlParseError> {
        deserialize_elements::<_, DeleteDBClusterSnapshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshot" => {
                        obj.db_cluster_snapshot = Some(DBClusterSnapshotDeserializer::deserialize(
                            "DBClusterSnapshot",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Parameter input for the <code>DeleteDBInstanceAutomatedBackup</code> operation.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBInstanceAutomatedBackupMessage {
    /// <p>The Amazon Resource Name (ARN) of the automated backups to delete, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub db_instance_automated_backups_arn: Option<String>,
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub dbi_resource_id: Option<String>,
}

/// Serialize `DeleteDBInstanceAutomatedBackupMessage` contents to a `SignedRequest`.
struct DeleteDBInstanceAutomatedBackupMessageSerializer;
impl DeleteDBInstanceAutomatedBackupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBInstanceAutomatedBackupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_automated_backups_arn {
            params.put(
                &format!("{}{}", prefix, "DBInstanceAutomatedBackupsArn"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dbi_resource_id {
            params.put(&format!("{}{}", prefix, "DbiResourceId"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBInstanceAutomatedBackupResult {
    pub db_instance_automated_backup: Option<DBInstanceAutomatedBackup>,
}

#[allow(dead_code)]
struct DeleteDBInstanceAutomatedBackupResultDeserializer;
impl DeleteDBInstanceAutomatedBackupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBInstanceAutomatedBackupResult, XmlParseError> {
        deserialize_elements::<_, DeleteDBInstanceAutomatedBackupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstanceAutomatedBackup" => {
                        obj.db_instance_automated_backup =
                            Some(DBInstanceAutomatedBackupDeserializer::deserialize(
                                "DBInstanceAutomatedBackup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBInstanceMessage {
    /// <p><p>The DB instance identifier for the DB instance to be deleted. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p>A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.</p>
    pub delete_automated_backups: Option<bool>,
    /// <p><p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can&#39;t be specified when deleting a read replica.</p> </li> </ul></p>
    pub final_db_snapshot_identifier: Option<String>,
    /// <p><p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn&#39;t specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn&#39;t specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of &#39;failed&#39;, &#39;incompatible-restore&#39;, or &#39;incompatible-network&#39;, it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a read replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn&#39;t specified.</p> </note></p>
    pub skip_final_snapshot: Option<bool>,
}

/// Serialize `DeleteDBInstanceMessage` contents to a `SignedRequest`.
struct DeleteDBInstanceMessageSerializer;
impl DeleteDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.delete_automated_backups {
            params.put(
                &format!("{}{}", prefix, "DeleteAutomatedBackups"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.final_db_snapshot_identifier {
            params.put(
                &format!("{}{}", prefix, "FinalDBSnapshotIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.skip_final_snapshot {
            params.put(&format!("{}{}", prefix, "SkipFinalSnapshot"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct DeleteDBInstanceResultDeserializer;
impl DeleteDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, DeleteDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBParameterGroupMessage {
    /// <p><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can&#39;t delete a default DB parameter group</p> </li> <li> <p>Can&#39;t be associated with any DB instances</p> </li> </ul></p>
    pub db_parameter_group_name: String,
}

/// Serialize `DeleteDBParameterGroupMessage` contents to a `SignedRequest`.
struct DeleteDBParameterGroupMessageSerializer;
impl DeleteDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupName"),
            &obj.db_parameter_group_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBProxyEndpointRequest {
    /// <p>The name of the DB proxy endpoint to delete.</p>
    pub db_proxy_endpoint_name: String,
}

/// Serialize `DeleteDBProxyEndpointRequest` contents to a `SignedRequest`.
struct DeleteDBProxyEndpointRequestSerializer;
impl DeleteDBProxyEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBProxyEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBProxyEndpointName"),
            &obj.db_proxy_endpoint_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBProxyEndpointResponse {
    /// <p>The data structure representing the details of the DB proxy endpoint that you delete.</p>
    pub db_proxy_endpoint: Option<DBProxyEndpoint>,
}

#[allow(dead_code)]
struct DeleteDBProxyEndpointResponseDeserializer;
impl DeleteDBProxyEndpointResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBProxyEndpointResponse, XmlParseError> {
        deserialize_elements::<_, DeleteDBProxyEndpointResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyEndpoint" => {
                        obj.db_proxy_endpoint = Some(DBProxyEndpointDeserializer::deserialize(
                            "DBProxyEndpoint",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBProxyRequest {
    /// <p>The name of the DB proxy to delete.</p>
    pub db_proxy_name: String,
}

/// Serialize `DeleteDBProxyRequest` contents to a `SignedRequest`.
struct DeleteDBProxyRequestSerializer;
impl DeleteDBProxyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBProxyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBProxyResponse {
    /// <p>The data structure representing the details of the DB proxy that you delete.</p>
    pub db_proxy: Option<DBProxy>,
}

#[allow(dead_code)]
struct DeleteDBProxyResponseDeserializer;
impl DeleteDBProxyResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBProxyResponse, XmlParseError> {
        deserialize_elements::<_, DeleteDBProxyResponse, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBProxy" => {
                    obj.db_proxy = Some(DBProxyDeserializer::deserialize("DBProxy", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBSecurityGroupMessage {
    /// <p><p>The name of the DB security group to delete.</p> <note> <p>You can&#39;t delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be &quot;Default&quot;</p> </li> </ul></p>
    pub db_security_group_name: String,
}

/// Serialize `DeleteDBSecurityGroupMessage` contents to a `SignedRequest`.
struct DeleteDBSecurityGroupMessageSerializer;
impl DeleteDBSecurityGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSecurityGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSecurityGroupName"),
            &obj.db_security_group_name,
        );
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBSnapshotMessage {
    /// <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
    pub db_snapshot_identifier: String,
}

/// Serialize `DeleteDBSnapshotMessage` contents to a `SignedRequest`.
struct DeleteDBSnapshotMessageSerializer;
impl DeleteDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

#[allow(dead_code)]
struct DeleteDBSnapshotResultDeserializer;
impl DeleteDBSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteDBSnapshotResult, XmlParseError> {
        deserialize_elements::<_, DeleteDBSnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSnapshot" => {
                    obj.db_snapshot =
                        Some(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteDBSubnetGroupMessage {
    /// <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: String,
}

/// Serialize `DeleteDBSubnetGroupMessage` contents to a `SignedRequest`.
struct DeleteDBSubnetGroupMessageSerializer;
impl DeleteDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSubnetGroupName"),
            &obj.db_subnet_group_name,
        );
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteEventSubscriptionMessage {
    /// <p>The name of the RDS event notification subscription you want to delete.</p>
    pub subscription_name: String,
}

/// Serialize `DeleteEventSubscriptionMessage` contents to a `SignedRequest`.
struct DeleteEventSubscriptionMessageSerializer;
impl DeleteEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SubscriptionName"),
            &obj.subscription_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

#[allow(dead_code)]
struct DeleteEventSubscriptionResultDeserializer;
impl DeleteEventSubscriptionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteEventSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, DeleteEventSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscription" => {
                        obj.event_subscription = Some(EventSubscriptionDeserializer::deserialize(
                            "EventSubscription",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteGlobalClusterMessage {
    /// <p> The cluster identifier of the global database cluster being deleted. </p>
    pub global_cluster_identifier: String,
}

/// Serialize `DeleteGlobalClusterMessage` contents to a `SignedRequest`.
struct DeleteGlobalClusterMessageSerializer;
impl DeleteGlobalClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteGlobalClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "GlobalClusterIdentifier"),
            &obj.global_cluster_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeleteGlobalClusterResult {
    pub global_cluster: Option<GlobalCluster>,
}

#[allow(dead_code)]
struct DeleteGlobalClusterResultDeserializer;
impl DeleteGlobalClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteGlobalClusterResult, XmlParseError> {
        deserialize_elements::<_, DeleteGlobalClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "GlobalCluster" => {
                        obj.global_cluster = Some(GlobalClusterDeserializer::deserialize(
                            "GlobalCluster",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteInstallationMediaMessage {
    /// <p>The installation medium ID.</p>
    pub installation_media_id: String,
}

/// Serialize `DeleteInstallationMediaMessage` contents to a `SignedRequest`.
struct DeleteInstallationMediaMessageSerializer;
impl DeleteInstallationMediaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteInstallationMediaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "InstallationMediaId"),
            &obj.installation_media_id,
        );
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeleteOptionGroupMessage {
    /// <p><p>The name of the option group to be deleted.</p> <note> <p>You can&#39;t delete default option groups.</p> </note></p>
    pub option_group_name: String,
}

/// Serialize `DeleteOptionGroupMessage` contents to a `SignedRequest`.
struct DeleteOptionGroupMessageSerializer;
impl DeleteOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "OptionGroupName"),
            &obj.option_group_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DeregisterDBProxyTargetsRequest {
    /// <p>One or more DB cluster identifiers.</p>
    pub db_cluster_identifiers: Option<Vec<String>>,
    /// <p>One or more DB instance identifiers.</p>
    pub db_instance_identifiers: Option<Vec<String>>,
    /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
    pub db_proxy_name: String,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
    pub target_group_name: Option<String>,
}

/// Serialize `DeregisterDBProxyTargetsRequest` contents to a `SignedRequest`.
struct DeregisterDBProxyTargetsRequestSerializer;
impl DeregisterDBProxyTargetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeregisterDBProxyTargetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifiers {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBClusterIdentifiers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.db_instance_identifiers {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBInstanceIdentifiers"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.target_group_name {
            params.put(&format!("{}{}", prefix, "TargetGroupName"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DeregisterDBProxyTargetsResponse {}

#[allow(dead_code)]
struct DeregisterDBProxyTargetsResponseDeserializer;
impl DeregisterDBProxyTargetsResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeregisterDBProxyTargetsResponse, XmlParseError> {
        xml_util::start_element(tag_name, stack)?;

        let obj = DeregisterDBProxyTargetsResponse::default();

        xml_util::end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeAccountAttributesMessage {}

/// Serialize `DescribeAccountAttributesMessage` contents to a `SignedRequest`.
struct DescribeAccountAttributesMessageSerializer;
impl DescribeAccountAttributesMessageSerializer {
    fn serialize(_params: &mut Params, name: &str, _obj: &DescribeAccountAttributesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeCertificatesMessage {
    /// <p><p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul></p>
    pub certificate_identifier: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeCertificatesMessage` contents to a `SignedRequest`.
struct DescribeCertificatesMessageSerializer;
impl DescribeCertificatesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeCertificatesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.certificate_identifier {
            params.put(
                &format!("{}{}", prefix, "CertificateIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeCustomAvailabilityZonesMessage {
    /// <p>The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.</p>
    pub custom_availability_zone_id: Option<String>,
    /// <p>A filter that specifies one or more custom AZs to describe.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeCustomAvailabilityZonesMessage` contents to a `SignedRequest`.
struct DescribeCustomAvailabilityZonesMessageSerializer;
impl DescribeCustomAvailabilityZonesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeCustomAvailabilityZonesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.custom_availability_zone_id {
            params.put(
                &format!("{}{}", prefix, "CustomAvailabilityZoneId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterBacktracksMessage {
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
    pub backtrack_identifier: Option<String>,
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: String,
    /// <p><p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBClusterBacktracksMessage` contents to a `SignedRequest`.
struct DescribeDBClusterBacktracksMessageSerializer;
impl DescribeDBClusterBacktracksMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterBacktracksMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.backtrack_identifier {
            params.put(
                &format!("{}{}", prefix, "BacktrackIdentifier"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterEndpointsMessage {
    /// <p>The identifier of the endpoint to describe. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: Option<String>,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_identifier: Option<String>,
    /// <p>A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. </p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBClusterEndpointsMessage` contents to a `SignedRequest`.
struct DescribeDBClusterEndpointsMessageSerializer;
impl DescribeDBClusterEndpointsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterEndpointsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_endpoint_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterEndpointIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterParameterGroupsMessage {
    /// <p><p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBClusterParameterGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBClusterParameterGroupsMessageSerializer;
impl DescribeDBClusterParameterGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterParameterGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterParametersMessage {
    /// <p><p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: String,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p> A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. </p>
    pub source: Option<String>,
}

/// Serialize `DescribeDBClusterParametersMessage` contents to a `SignedRequest`.
struct DescribeDBClusterParametersMessageSerializer;
impl DescribeDBClusterParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterParameterGroupName"),
            &obj.db_cluster_parameter_group_name,
        );
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterSnapshotAttributesMessage {
    /// <p>The identifier for the DB cluster snapshot to describe the attributes for.</p>
    pub db_cluster_snapshot_identifier: String,
}

/// Serialize `DescribeDBClusterSnapshotAttributesMessage` contents to a `SignedRequest`.
struct DescribeDBClusterSnapshotAttributesMessageSerializer;
impl DescribeDBClusterSnapshotAttributesMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeDBClusterSnapshotAttributesMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
            &obj.db_cluster_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBClusterSnapshotAttributesResult {
    pub db_cluster_snapshot_attributes_result: Option<DBClusterSnapshotAttributesResult>,
}

#[allow(dead_code)]
struct DescribeDBClusterSnapshotAttributesResultDeserializer;
impl DescribeDBClusterSnapshotAttributesResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBClusterSnapshotAttributesResult, XmlParseError> {
        deserialize_elements::<_, DescribeDBClusterSnapshotAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshotAttributesResult" => {
                        obj.db_cluster_snapshot_attributes_result =
                            Some(DBClusterSnapshotAttributesResultDeserializer::deserialize(
                                "DBClusterSnapshotAttributesResult",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClusterSnapshotsMessage {
    /// <p><p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can&#39;t be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn&#39;t case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul></p>
    pub db_cluster_identifier: Option<String>,
    /// <p><p>A specific DB cluster snapshot identifier to describe. This parameter can&#39;t be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul></p>
    pub db_cluster_snapshot_identifier: Option<String>,
    /// <p><p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
    pub include_public: Option<bool>,
    /// <p>A value that indicates whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub include_shared: Option<bool>,
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
    pub snapshot_type: Option<String>,
}

/// Serialize `DescribeDBClusterSnapshotsMessage` contents to a `SignedRequest`.
struct DescribeDBClusterSnapshotsMessageSerializer;
impl DescribeDBClusterSnapshotsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterSnapshotsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_cluster_snapshot_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_public {
            params.put(&format!("{}{}", prefix, "IncludePublic"), &field_value);
        }
        if let Some(ref field_value) = obj.include_shared {
            params.put(&format!("{}{}", prefix, "IncludeShared"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_type {
            params.put(&format!("{}{}", prefix, "SnapshotType"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBClustersMessage {
    /// <p><p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul></p>
    pub db_cluster_identifier: Option<String>,
    /// <p><p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>Optional Boolean parameter that specifies whether the output includes information about clusters shared from other Amazon Web Services accounts.</p>
    pub include_shared: Option<bool>,
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBClustersMessage` contents to a `SignedRequest`.
struct DescribeDBClustersMessageSerializer;
impl DescribeDBClustersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClustersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "DBClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_shared {
            params.put(&format!("{}{}", prefix, "IncludeShared"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBEngineVersionsMessage {
    /// <p><p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul></p>
    pub db_parameter_group_family: Option<String>,
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    pub default_only: Option<bool>,
    /// <p><p>The database engine to return.</p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: Option<String>,
    /// <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
    pub engine_version: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    pub include_all: Option<bool>,
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub list_supported_character_sets: Option<bool>,
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub list_supported_timezones: Option<bool>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBEngineVersionsMessage` contents to a `SignedRequest`.
struct DescribeDBEngineVersionsMessageSerializer;
impl DescribeDBEngineVersionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBEngineVersionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_parameter_group_family {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupFamily"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.default_only {
            params.put(&format!("{}{}", prefix, "DefaultOnly"), &field_value);
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_all {
            params.put(&format!("{}{}", prefix, "IncludeAll"), &field_value);
        }
        if let Some(ref field_value) = obj.list_supported_character_sets {
            params.put(
                &format!("{}{}", prefix, "ListSupportedCharacterSets"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.list_supported_timezones {
            params.put(
                &format!("{}{}", prefix, "ListSupportedTimezones"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p>Parameter input for DescribeDBInstanceAutomatedBackups. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBInstanceAutomatedBackupsMessage {
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub db_instance_automated_backups_arn: Option<String>,
    /// <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. </p>
    pub db_instance_identifier: Option<String>,
    /// <p>The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. </p>
    pub dbi_resource_id: Option<String>,
    /// <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances and after backup replication is stopped</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance automated backups identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBInstanceAutomatedBackupsMessage` contents to a `SignedRequest`.
struct DescribeDBInstanceAutomatedBackupsMessageSerializer;
impl DescribeDBInstanceAutomatedBackupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBInstanceAutomatedBackupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_automated_backups_arn {
            params.put(
                &format!("{}{}", prefix, "DBInstanceAutomatedBackupsArn"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "DBInstanceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dbi_resource_id {
            params.put(&format!("{}{}", prefix, "DbiResourceId"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBInstancesMessage {
    /// <p><p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: Option<String>,
    /// <p><p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBInstancesMessage` contents to a `SignedRequest`.
struct DescribeDBInstancesMessageSerializer;
impl DescribeDBInstancesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBInstancesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "DBInstanceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p>This data type is used as a response element to <code>DescribeDBLogFiles</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBLogFilesDetails {
    /// <p>A POSIX timestamp when the last log entry was written.</p>
    pub last_written: Option<i64>,
    /// <p>The name of the log file for the specified DB instance.</p>
    pub log_file_name: Option<String>,
    /// <p>The size, in bytes, of the log file for the specified DB instance.</p>
    pub size: Option<i64>,
}

#[allow(dead_code)]
struct DescribeDBLogFilesDetailsDeserializer;
impl DescribeDBLogFilesDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBLogFilesDetails, XmlParseError> {
        deserialize_elements::<_, DescribeDBLogFilesDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "LastWritten" => {
                        obj.last_written =
                            Some(LongDeserializer::deserialize("LastWritten", stack)?);
                    }
                    "LogFileName" => {
                        obj.log_file_name =
                            Some(StringDeserializer::deserialize("LogFileName", stack)?);
                    }
                    "Size" => {
                        obj.size = Some(LongDeserializer::deserialize("Size", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct DescribeDBLogFilesListDeserializer;
impl DescribeDBLogFilesListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DescribeDBLogFilesDetails>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DescribeDBLogFilesDetails" {
                obj.push(DescribeDBLogFilesDetailsDeserializer::deserialize(
                    "DescribeDBLogFilesDetails",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBLogFilesMessage {
    /// <p><p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    pub file_last_written: Option<i64>,
    /// <p>Filters the available log files for files larger than the specified size.</p>
    pub file_size: Option<i64>,
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    pub filename_contains: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBLogFilesMessage` contents to a `SignedRequest`.
struct DescribeDBLogFilesMessageSerializer;
impl DescribeDBLogFilesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBLogFilesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.file_last_written {
            params.put(&format!("{}{}", prefix, "FileLastWritten"), &field_value);
        }
        if let Some(ref field_value) = obj.file_size {
            params.put(&format!("{}{}", prefix, "FileSize"), &field_value);
        }
        if let Some(ref field_value) = obj.filename_contains {
            params.put(&format!("{}{}", prefix, "FilenameContains"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p> The response from a call to <code>DescribeDBLogFiles</code>. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBLogFilesResponse {
    /// <p>The DB log files returned.</p>
    pub describe_db_log_files: Option<Vec<DescribeDBLogFilesDetails>>,
    /// <p>A pagination token that can be used in a later DescribeDBLogFiles request.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DescribeDBLogFilesResponseDeserializer;
impl DescribeDBLogFilesResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBLogFilesResponse, XmlParseError> {
        deserialize_elements::<_, DescribeDBLogFilesResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DescribeDBLogFiles" => {
                        obj.describe_db_log_files.get_or_insert(vec![]).extend(
                            DescribeDBLogFilesListDeserializer::deserialize(
                                "DescribeDBLogFiles",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBParameterGroupsMessage {
    /// <p><p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></p>
    pub db_parameter_group_name: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBParameterGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBParameterGroupsMessageSerializer;
impl DescribeDBParameterGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBParameterGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBParametersMessage {
    /// <p><p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul></p>
    pub db_parameter_group_name: String,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
    pub source: Option<String>,
}

/// Serialize `DescribeDBParametersMessage` contents to a `SignedRequest`.
struct DescribeDBParametersMessageSerializer;
impl DescribeDBParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupName"),
            &obj.db_parameter_group_name,
        );
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBProxiesRequest {
    /// <p>The name of the DB proxy. If you omit this parameter, the output includes information about all DB proxies owned by your Amazon Web Services account ID.</p>
    pub db_proxy_name: Option<String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBProxiesRequest` contents to a `SignedRequest`.
struct DescribeDBProxiesRequestSerializer;
impl DescribeDBProxiesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBProxiesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_proxy_name {
            params.put(&format!("{}{}", prefix, "DBProxyName"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBProxiesResponse {
    /// <p>A return value representing an arbitrary number of <code>DBProxy</code> data structures.</p>
    pub db_proxies: Option<Vec<DBProxy>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DescribeDBProxiesResponseDeserializer;
impl DescribeDBProxiesResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBProxiesResponse, XmlParseError> {
        deserialize_elements::<_, DescribeDBProxiesResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxies" => {
                        obj.db_proxies
                            .get_or_insert(vec![])
                            .extend(DBProxyListDeserializer::deserialize("DBProxies", stack)?);
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBProxyEndpointsRequest {
    /// <p>The name of a DB proxy endpoint to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with the specified proxy.</p>
    pub db_proxy_endpoint_name: Option<String>,
    /// <p>The name of the DB proxy whose endpoints you want to describe. If you omit this parameter, the output includes information about all DB proxy endpoints associated with all your DB proxies.</p>
    pub db_proxy_name: Option<String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBProxyEndpointsRequest` contents to a `SignedRequest`.
struct DescribeDBProxyEndpointsRequestSerializer;
impl DescribeDBProxyEndpointsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBProxyEndpointsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_proxy_endpoint_name {
            params.put(
                &format!("{}{}", prefix, "DBProxyEndpointName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_proxy_name {
            params.put(&format!("{}{}", prefix, "DBProxyName"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBProxyEndpointsResponse {
    /// <p>The list of <code>ProxyEndpoint</code> objects returned by the API operation.</p>
    pub db_proxy_endpoints: Option<Vec<DBProxyEndpoint>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DescribeDBProxyEndpointsResponseDeserializer;
impl DescribeDBProxyEndpointsResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBProxyEndpointsResponse, XmlParseError> {
        deserialize_elements::<_, DescribeDBProxyEndpointsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyEndpoints" => {
                        obj.db_proxy_endpoints.get_or_insert(vec![]).extend(
                            DBProxyEndpointListDeserializer::deserialize(
                                "DBProxyEndpoints",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBProxyTargetGroupsRequest {
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    pub db_proxy_name: String,
    /// <p>This parameter is not currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub target_group_name: Option<String>,
}

/// Serialize `DescribeDBProxyTargetGroupsRequest` contents to a `SignedRequest`.
struct DescribeDBProxyTargetGroupsRequestSerializer;
impl DescribeDBProxyTargetGroupsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBProxyTargetGroupsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.target_group_name {
            params.put(&format!("{}{}", prefix, "TargetGroupName"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBProxyTargetGroupsResponse {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>An arbitrary number of <code>DBProxyTargetGroup</code> objects, containing details of the corresponding target groups.</p>
    pub target_groups: Option<Vec<DBProxyTargetGroup>>,
}

#[allow(dead_code)]
struct DescribeDBProxyTargetGroupsResponseDeserializer;
impl DescribeDBProxyTargetGroupsResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBProxyTargetGroupsResponse, XmlParseError> {
        deserialize_elements::<_, DescribeDBProxyTargetGroupsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "TargetGroups" => {
                        obj.target_groups.get_or_insert(vec![]).extend(
                            TargetGroupListDeserializer::deserialize("TargetGroups", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBProxyTargetsRequest {
    /// <p>The identifier of the <code>DBProxyTarget</code> to describe.</p>
    pub db_proxy_name: String,
    /// <p>This parameter is not currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub target_group_name: Option<String>,
}

/// Serialize `DescribeDBProxyTargetsRequest` contents to a `SignedRequest`.
struct DescribeDBProxyTargetsRequestSerializer;
impl DescribeDBProxyTargetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBProxyTargetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.target_group_name {
            params.put(&format!("{}{}", prefix, "TargetGroupName"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBProxyTargetsResponse {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>An arbitrary number of <code>DBProxyTarget</code> objects, containing details of the corresponding targets.</p>
    pub targets: Option<Vec<DBProxyTarget>>,
}

#[allow(dead_code)]
struct DescribeDBProxyTargetsResponseDeserializer;
impl DescribeDBProxyTargetsResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBProxyTargetsResponse, XmlParseError> {
        deserialize_elements::<_, DescribeDBProxyTargetsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "Targets" => {
                        obj.targets
                            .get_or_insert(vec![])
                            .extend(TargetListDeserializer::deserialize("Targets", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBSecurityGroupsMessage {
    /// <p>The name of the DB security group to return details for.</p>
    pub db_security_group_name: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBSecurityGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBSecurityGroupsMessageSerializer;
impl DescribeDBSecurityGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSecurityGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_security_group_name {
            params.put(
                &format!("{}{}", prefix, "DBSecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBSnapshotAttributesMessage {
    /// <p>The identifier for the DB snapshot to describe the attributes for.</p>
    pub db_snapshot_identifier: String,
}

/// Serialize `DescribeDBSnapshotAttributesMessage` contents to a `SignedRequest`.
struct DescribeDBSnapshotAttributesMessageSerializer;
impl DescribeDBSnapshotAttributesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSnapshotAttributesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeDBSnapshotAttributesResult {
    pub db_snapshot_attributes_result: Option<DBSnapshotAttributesResult>,
}

#[allow(dead_code)]
struct DescribeDBSnapshotAttributesResultDeserializer;
impl DescribeDBSnapshotAttributesResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDBSnapshotAttributesResult, XmlParseError> {
        deserialize_elements::<_, DescribeDBSnapshotAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSnapshotAttributesResult" => {
                        obj.db_snapshot_attributes_result =
                            Some(DBSnapshotAttributesResultDeserializer::deserialize(
                                "DBSnapshotAttributesResult",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBSnapshotsMessage {
    /// <p><p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can&#39;t be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn&#39;t case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: Option<String>,
    /// <p><p> A specific DB snapshot identifier to describe. This parameter can&#39;t be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul></p>
    pub db_snapshot_identifier: Option<String>,
    /// <p>A specific DB resource ID to describe.</p>
    pub dbi_resource_id: Option<String>,
    /// <p><p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
    pub include_public: Option<bool>,
    /// <p>A value that indicates whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an Amazon Web Services account permission to restore a manual DB snapshot from another Amazon Web Services account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
    pub include_shared: Option<bool>,
    /// <p> An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my Amazon Web Services account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my Amazon Web Services account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the Amazon Web Services Backup service.</p> <p>For information about Amazon Web Services Backup, see the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>Amazon Web Services Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
    pub snapshot_type: Option<String>,
}

/// Serialize `DescribeDBSnapshotsMessage` contents to a `SignedRequest`.
struct DescribeDBSnapshotsMessageSerializer;
impl DescribeDBSnapshotsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSnapshotsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "DBInstanceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_snapshot_identifier {
            params.put(
                &format!("{}{}", prefix, "DBSnapshotIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dbi_resource_id {
            params.put(&format!("{}{}", prefix, "DbiResourceId"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_public {
            params.put(&format!("{}{}", prefix, "IncludePublic"), &field_value);
        }
        if let Some(ref field_value) = obj.include_shared {
            params.put(&format!("{}{}", prefix, "IncludeShared"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_type {
            params.put(&format!("{}{}", prefix, "SnapshotType"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeDBSubnetGroupsMessage {
    /// <p>The name of the DB subnet group to return details for.</p>
    pub db_subnet_group_name: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeDBSubnetGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBSubnetGroupsMessageSerializer;
impl DescribeDBSubnetGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSubnetGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeEngineDefaultClusterParametersMessage {
    /// <p>The name of the DB cluster parameter group family to return engine parameter information for.</p>
    pub db_parameter_group_family: String,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeEngineDefaultClusterParametersMessage` contents to a `SignedRequest`.
struct DescribeEngineDefaultClusterParametersMessageSerializer;
impl DescribeEngineDefaultClusterParametersMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeEngineDefaultClusterParametersMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupFamily"),
            &obj.db_parameter_group_family,
        );
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeEngineDefaultClusterParametersResult {
    pub engine_defaults: Option<EngineDefaults>,
}

#[allow(dead_code)]
struct DescribeEngineDefaultClusterParametersResultDeserializer;
impl DescribeEngineDefaultClusterParametersResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeEngineDefaultClusterParametersResult, XmlParseError> {
        deserialize_elements::<_, DescribeEngineDefaultClusterParametersResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EngineDefaults" => {
                        obj.engine_defaults = Some(EngineDefaultsDeserializer::deserialize(
                            "EngineDefaults",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeEngineDefaultParametersMessage {
    /// <p>The name of the DB parameter group family.</p>
    pub db_parameter_group_family: String,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeEngineDefaultParametersMessage` contents to a `SignedRequest`.
struct DescribeEngineDefaultParametersMessageSerializer;
impl DescribeEngineDefaultParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEngineDefaultParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupFamily"),
            &obj.db_parameter_group_family,
        );
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeEngineDefaultParametersResult {
    pub engine_defaults: Option<EngineDefaults>,
}

#[allow(dead_code)]
struct DescribeEngineDefaultParametersResultDeserializer;
impl DescribeEngineDefaultParametersResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeEngineDefaultParametersResult, XmlParseError> {
        deserialize_elements::<_, DescribeEngineDefaultParametersResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EngineDefaults" => {
                        obj.engine_defaults = Some(EngineDefaultsDeserializer::deserialize(
                            "EngineDefaults",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeEventCategoriesMessage {
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The type of source that is generating the events.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
    pub source_type: Option<String>,
}

/// Serialize `DescribeEventCategoriesMessage` contents to a `SignedRequest`.
struct DescribeEventCategoriesMessageSerializer;
impl DescribeEventCategoriesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventCategoriesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeEventSubscriptionsMessage {
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The name of the RDS event notification subscription you want to describe.</p>
    pub subscription_name: Option<String>,
}

/// Serialize `DescribeEventSubscriptionsMessage` contents to a `SignedRequest`.
struct DescribeEventSubscriptionsMessageSerializer;
impl DescribeEventSubscriptionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventSubscriptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.subscription_name {
            params.put(&format!("{}{}", prefix, "SubscriptionName"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeEventsMessage {
    /// <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
    pub duration: Option<i64>,
    /// <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
    pub end_time: Option<String>,
    /// <p>A list of event categories that trigger notifications for a event notification subscription.</p>
    pub event_categories: Option<Vec<String>>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p><p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must also be provided.</p> </li> <li> <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p> </li> <li> <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></p>
    pub source_identifier: Option<String>,
    /// <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
    pub source_type: Option<String>,
    /// <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
    pub start_time: Option<String>,
}

/// Serialize `DescribeEventsMessage` contents to a `SignedRequest`.
struct DescribeEventsMessageSerializer;
impl DescribeEventsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"), &field_value);
        }
        if let Some(ref field_value) = obj.end_time {
            params.put(&format!("{}{}", prefix, "EndTime"), &field_value);
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EventCategory"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.source_identifier {
            params.put(&format!("{}{}", prefix, "SourceIdentifier"), &field_value);
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"), &field_value);
        }
        if let Some(ref field_value) = obj.start_time {
            params.put(&format!("{}{}", prefix, "StartTime"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeExportTasksMessage {
    /// <p>The identifier of the snapshot export task to be described.</p>
    pub export_task_identifier: Option<String>,
    /// <p><p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output. Filter names and values are case-sensitive.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task. Must be lowercase, for example, <code>complete</code>.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub source_arn: Option<String>,
}

/// Serialize `DescribeExportTasksMessage` contents to a `SignedRequest`.
struct DescribeExportTasksMessageSerializer;
impl DescribeExportTasksMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeExportTasksMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.export_task_identifier {
            params.put(
                &format!("{}{}", prefix, "ExportTaskIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.source_arn {
            params.put(&format!("{}{}", prefix, "SourceArn"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeGlobalClustersMessage {
    /// <p><p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p><p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul></p>
    pub global_cluster_identifier: Option<String>,
    /// <p> An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeGlobalClustersMessage` contents to a `SignedRequest`.
struct DescribeGlobalClustersMessageSerializer;
impl DescribeGlobalClustersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeGlobalClustersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "GlobalClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeInstallationMediaMessage {
    /// <p><p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The installation medium ID.</p>
    pub installation_media_id: Option<String>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    /// <p>An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeInstallationMediaMessage` contents to a `SignedRequest`.
struct DescribeInstallationMediaMessageSerializer;
impl DescribeInstallationMediaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeInstallationMediaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.installation_media_id {
            params.put(
                &format!("{}{}", prefix, "InstallationMediaId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeOptionGroupOptionsMessage {
    /// <p><p>A required parameter. Options available for the given engine name are described.</p> <p>Valid Values: </p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine_name: String,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    pub major_engine_version: Option<String>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
}

/// Serialize `DescribeOptionGroupOptionsMessage` contents to a `SignedRequest`.
struct DescribeOptionGroupOptionsMessageSerializer;
impl DescribeOptionGroupOptionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeOptionGroupOptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "EngineName"), &obj.engine_name);
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.major_engine_version {
            params.put(&format!("{}{}", prefix, "MajorEngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeOptionGroupsMessage {
    /// <p><p>Filters the list of option groups to only include groups associated with a specific database engine.</p> <p>Valid Values: </p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine_name: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.</p>
    pub major_engine_version: Option<String>,
    /// <p> An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.</p>
    pub option_group_name: Option<String>,
}

/// Serialize `DescribeOptionGroupsMessage` contents to a `SignedRequest`.
struct DescribeOptionGroupsMessageSerializer;
impl DescribeOptionGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeOptionGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.engine_name {
            params.put(&format!("{}{}", prefix, "EngineName"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.major_engine_version {
            params.put(&format!("{}{}", prefix, "MajorEngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeOrderableDBInstanceOptionsMessage {
    /// <p>The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available offerings for the Local Zones in the group.</p> <p>Omit this parameter to show the available offerings in the specified Amazon Web Services Region.</p>
    pub availability_zone_group: Option<String>,
    /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
    pub db_instance_class: Option<String>,
    /// <p><p>The name of the engine to retrieve DB instance options for.</p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: String,
    /// <p>The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</p>
    pub engine_version: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.</p>
    pub license_model: Option<String>,
    /// <p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>A value that indicates whether to show only VPC or non-VPC offerings.</p>
    pub vpc: Option<bool>,
}

/// Serialize `DescribeOrderableDBInstanceOptionsMessage` contents to a `SignedRequest`.
struct DescribeOrderableDBInstanceOptionsMessageSerializer;
impl DescribeOrderableDBInstanceOptionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeOrderableDBInstanceOptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone_group {
            params.put(
                &format!("{}{}", prefix, "AvailabilityZoneGroup"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc {
            params.put(&format!("{}{}", prefix, "Vpc"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribePendingMaintenanceActionsMessage {
    /// <p><p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>The ARN of a resource to return pending maintenance actions for.</p>
    pub resource_identifier: Option<String>,
}

/// Serialize `DescribePendingMaintenanceActionsMessage` contents to a `SignedRequest`.
struct DescribePendingMaintenanceActionsMessageSerializer;
impl DescribePendingMaintenanceActionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePendingMaintenanceActionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.resource_identifier {
            params.put(&format!("{}{}", prefix, "ResourceIdentifier"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeReservedDBInstancesMessage {
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    pub db_instance_class: Option<String>,
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    pub duration: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p><p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p> </note></p>
    pub lease_id: Option<String>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub multi_az: Option<bool>,
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    pub offering_type: Option<String>,
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    pub product_description: Option<String>,
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    pub reserved_db_instance_id: Option<String>,
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    pub reserved_db_instances_offering_id: Option<String>,
}

/// Serialize `DescribeReservedDBInstancesMessage` contents to a `SignedRequest`.
struct DescribeReservedDBInstancesMessageSerializer;
impl DescribeReservedDBInstancesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeReservedDBInstancesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.lease_id {
            params.put(&format!("{}{}", prefix, "LeaseId"), &field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"), &field_value);
        }
        if let Some(ref field_value) = obj.product_description {
            params.put(&format!("{}{}", prefix, "ProductDescription"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_db_instance_id {
            params.put(
                &format!("{}{}", prefix, "ReservedDBInstanceId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.reserved_db_instances_offering_id {
            params.put(
                &format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
                &field_value,
            );
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeReservedDBInstancesOfferingsMessage {
    /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
    pub db_instance_class: Option<String>,
    /// <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    pub duration: Option<String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub multi_az: Option<bool>,
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    pub offering_type: Option<String>,
    /// <p><p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note></p>
    pub product_description: Option<String>,
    /// <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
    pub reserved_db_instances_offering_id: Option<String>,
}

/// Serialize `DescribeReservedDBInstancesOfferingsMessage` contents to a `SignedRequest`.
struct DescribeReservedDBInstancesOfferingsMessageSerializer;
impl DescribeReservedDBInstancesOfferingsMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeReservedDBInstancesOfferingsMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"), &field_value);
        }
        if let Some(ref field_value) = obj.product_description {
            params.put(&format!("{}{}", prefix, "ProductDescription"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_db_instances_offering_id {
            params.put(
                &format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
                &field_value,
            );
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeSourceRegionsMessage {
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: Option<i64>,
    /// <p><p>The source Amazon Web Services Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid Amazon Web Services Region name.</p> </li> </ul></p>
    pub region_name: Option<String>,
}

/// Serialize `DescribeSourceRegionsMessage` contents to a `SignedRequest`.
struct DescribeSourceRegionsMessageSerializer;
impl DescribeSourceRegionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSourceRegionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"), &field_value);
        }
        if let Some(ref field_value) = obj.region_name {
            params.put(&format!("{}{}", prefix, "RegionName"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DescribeValidDBInstanceModificationsMessage {
    /// <p>The customer identifier or the ARN of your DB instance. </p>
    pub db_instance_identifier: String,
}

/// Serialize `DescribeValidDBInstanceModificationsMessage` contents to a `SignedRequest`.
struct DescribeValidDBInstanceModificationsMessageSerializer;
impl DescribeValidDBInstanceModificationsMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeValidDBInstanceModificationsMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DescribeValidDBInstanceModificationsResult {
    pub valid_db_instance_modifications_message: Option<ValidDBInstanceModificationsMessage>,
}

#[allow(dead_code)]
struct DescribeValidDBInstanceModificationsResultDeserializer;
impl DescribeValidDBInstanceModificationsResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeValidDBInstanceModificationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeValidDBInstanceModificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ValidDBInstanceModificationsMessage" => {
                        obj.valid_db_instance_modifications_message = Some(
                            ValidDBInstanceModificationsMessageDeserializer::deserialize(
                                "ValidDBInstanceModificationsMessage",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>An Active Directory Domain membership record associated with the DB instance or cluster.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DomainMembership {
    /// <p>The identifier of the Active Directory Domain.</p>
    pub domain: Option<String>,
    /// <p>The fully qualified domain name of the Active Directory Domain.</p>
    pub fqdn: Option<String>,
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub iam_role_name: Option<String>,
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include joined, pending-join, failed, and so on.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct DomainMembershipDeserializer;
impl DomainMembershipDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DomainMembership, XmlParseError> {
        deserialize_elements::<_, DomainMembership, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Domain" => {
                    obj.domain = Some(StringDeserializer::deserialize("Domain", stack)?);
                }
                "FQDN" => {
                    obj.fqdn = Some(StringDeserializer::deserialize("FQDN", stack)?);
                }
                "IAMRoleName" => {
                    obj.iam_role_name =
                        Some(StringDeserializer::deserialize("IAMRoleName", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DomainMembershipListDeserializer;
impl DomainMembershipListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DomainMembership>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DomainMembership" {
                obj.push(DomainMembershipDeserializer::deserialize(
                    "DomainMembership",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DoubleDeserializer;
impl DoubleDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<f64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(f64::from_str(&s).unwrap()))
    }
}
#[allow(dead_code)]
struct DoubleOptionalDeserializer;
impl DoubleOptionalDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<f64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(f64::from_str(&s).unwrap()))
    }
}
/// <p>A range of double values.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DoubleRange {
    /// <p>The minimum value in the range.</p>
    pub from: Option<f64>,
    /// <p>The maximum value in the range.</p>
    pub to: Option<f64>,
}

#[allow(dead_code)]
struct DoubleRangeDeserializer;
impl DoubleRangeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DoubleRange, XmlParseError> {
        deserialize_elements::<_, DoubleRange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "From" => {
                    obj.from = Some(DoubleDeserializer::deserialize("From", stack)?);
                }
                "To" => {
                    obj.to = Some(DoubleDeserializer::deserialize("To", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct DoubleRangeListDeserializer;
impl DoubleRangeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DoubleRange>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "DoubleRange" {
                obj.push(DoubleRangeDeserializer::deserialize("DoubleRange", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>This data type is used as a response element to <code>DownloadDBLogFilePortion</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct DownloadDBLogFilePortionDetails {
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    pub additional_data_pending: Option<bool>,
    /// <p>Entries from the specified log file.</p>
    pub log_file_data: Option<String>,
    /// <p>A pagination token that can be used in a later DownloadDBLogFilePortion request.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct DownloadDBLogFilePortionDetailsDeserializer;
impl DownloadDBLogFilePortionDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DownloadDBLogFilePortionDetails, XmlParseError> {
        deserialize_elements::<_, DownloadDBLogFilePortionDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AdditionalDataPending" => {
                        obj.additional_data_pending = Some(BooleanDeserializer::deserialize(
                            "AdditionalDataPending",
                            stack,
                        )?);
                    }
                    "LogFileData" => {
                        obj.log_file_data =
                            Some(StringDeserializer::deserialize("LogFileData", stack)?);
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct DownloadDBLogFilePortionMessage {
    /// <p><p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p>The name of the log file to be downloaded.</p>
    pub log_file_name: String,
    /// <p>The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.</p>
    pub marker: Option<String>,
    /// <p><p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn&#39;t specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as &quot;0&quot;, then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of &quot;0&quot; for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul></p>
    pub number_of_lines: Option<i64>,
}

/// Serialize `DownloadDBLogFilePortionMessage` contents to a `SignedRequest`.
struct DownloadDBLogFilePortionMessageSerializer;
impl DownloadDBLogFilePortionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DownloadDBLogFilePortionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        params.put(&format!("{}{}", prefix, "LogFileName"), &obj.log_file_name);
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"), &field_value);
        }
        if let Some(ref field_value) = obj.number_of_lines {
            params.put(&format!("{}{}", prefix, "NumberOfLines"), &field_value);
        }
    }
}

/// <p><p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <code>AuthorizeDBSecurityGroupIngress</code> </p> </li> <li> <p> <code>DescribeDBSecurityGroups</code> </p> </li> <li> <p> <code>RevokeDBSecurityGroupIngress</code> </p> </li> </ul></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EC2SecurityGroup {
    /// <p>Specifies the id of the EC2 security group.</p>
    pub ec2_security_group_id: Option<String>,
    /// <p>Specifies the name of the EC2 security group.</p>
    pub ec2_security_group_name: Option<String>,
    /// <p> Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field. </p>
    pub ec2_security_group_owner_id: Option<String>,
    /// <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct EC2SecurityGroupDeserializer;
impl EC2SecurityGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EC2SecurityGroup, XmlParseError> {
        deserialize_elements::<_, EC2SecurityGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "EC2SecurityGroupId" => {
                    obj.ec2_security_group_id = Some(StringDeserializer::deserialize(
                        "EC2SecurityGroupId",
                        stack,
                    )?);
                }
                "EC2SecurityGroupName" => {
                    obj.ec2_security_group_name = Some(StringDeserializer::deserialize(
                        "EC2SecurityGroupName",
                        stack,
                    )?);
                }
                "EC2SecurityGroupOwnerId" => {
                    obj.ec2_security_group_owner_id = Some(StringDeserializer::deserialize(
                        "EC2SecurityGroupOwnerId",
                        stack,
                    )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EC2SecurityGroupListDeserializer;
impl EC2SecurityGroupListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<EC2SecurityGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "EC2SecurityGroup" {
                obj.push(EC2SecurityGroupDeserializer::deserialize(
                    "EC2SecurityGroup",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:</p> <ul> <li> <p> <code>CreateDBInstance</code> </p> </li> <li> <p> <code>DescribeDBInstances</code> </p> </li> <li> <p> <code>DeleteDBInstance</code> </p> </li> </ul> <p>For the data structure that represents Amazon Aurora DB cluster endpoints, see <code>DBClusterEndpoint</code>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Endpoint {
    /// <p>Specifies the DNS address of the DB instance.</p>
    pub address: Option<String>,
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    pub hosted_zone_id: Option<String>,
    /// <p>Specifies the port that the database engine is listening on.</p>
    pub port: Option<i64>,
}

#[allow(dead_code)]
struct EndpointDeserializer;
impl EndpointDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Endpoint, XmlParseError> {
        deserialize_elements::<_, Endpoint, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Address" => {
                    obj.address = Some(StringDeserializer::deserialize("Address", stack)?);
                }
                "HostedZoneId" => {
                    obj.hosted_zone_id =
                        Some(StringDeserializer::deserialize("HostedZoneId", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerDeserializer::deserialize("Port", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EngineDefaults {
    /// <p>Specifies the name of the DB parameter group family that the engine default parameters apply to.</p>
    pub db_parameter_group_family: Option<String>,
    /// <p> An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
    /// <p>Contains a list of engine default parameters.</p>
    pub parameters: Option<Vec<Parameter>>,
}

#[allow(dead_code)]
struct EngineDefaultsDeserializer;
impl EngineDefaultsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EngineDefaults, XmlParseError> {
        deserialize_elements::<_, EngineDefaults, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBParameterGroupFamily" => {
                    obj.db_parameter_group_family = Some(StringDeserializer::deserialize(
                        "DBParameterGroupFamily",
                        stack,
                    )?);
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                "Parameters" => {
                    obj.parameters.get_or_insert(vec![]).extend(
                        ParametersListDeserializer::deserialize("Parameters", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EngineModeListDeserializer;
impl EngineModeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `EngineModeList` contents to a `SignedRequest`.
struct EngineModeListSerializer;
impl EngineModeListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p> This data type is used as a response element in the <code>DescribeEvents</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Event {
    /// <p>Specifies the date and time of the event.</p>
    pub date: Option<String>,
    /// <p>Specifies the category for the event.</p>
    pub event_categories: Option<Vec<String>>,
    /// <p>Provides the text of this event.</p>
    pub message: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the event.</p>
    pub source_arn: Option<String>,
    /// <p>Provides the identifier for the source of the event.</p>
    pub source_identifier: Option<String>,
    /// <p>Specifies the source type for this event.</p>
    pub source_type: Option<String>,
}

#[allow(dead_code)]
struct EventDeserializer;
impl EventDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Event, XmlParseError> {
        deserialize_elements::<_, Event, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Date" => {
                    obj.date = Some(TStampDeserializer::deserialize("Date", stack)?);
                }
                "EventCategories" => {
                    obj.event_categories.get_or_insert(vec![]).extend(
                        EventCategoriesListDeserializer::deserialize("EventCategories", stack)?,
                    );
                }
                "Message" => {
                    obj.message = Some(StringDeserializer::deserialize("Message", stack)?);
                }
                "SourceArn" => {
                    obj.source_arn = Some(StringDeserializer::deserialize("SourceArn", stack)?);
                }
                "SourceIdentifier" => {
                    obj.source_identifier =
                        Some(StringDeserializer::deserialize("SourceIdentifier", stack)?);
                }
                "SourceType" => {
                    obj.source_type =
                        Some(SourceTypeDeserializer::deserialize("SourceType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EventCategoriesListDeserializer;
impl EventCategoriesListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "EventCategory" {
                obj.push(StringDeserializer::deserialize("EventCategory", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `EventCategoriesList` contents to a `SignedRequest`.
struct EventCategoriesListSerializer;
impl EventCategoriesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains the results of a successful invocation of the <code>DescribeEventCategories</code> operation.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EventCategoriesMap {
    /// <p>The event categories for the specified source type</p>
    pub event_categories: Option<Vec<String>>,
    /// <p>The source type that the returned categories belong to</p>
    pub source_type: Option<String>,
}

#[allow(dead_code)]
struct EventCategoriesMapDeserializer;
impl EventCategoriesMapDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventCategoriesMap, XmlParseError> {
        deserialize_elements::<_, EventCategoriesMap, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "EventCategories" => {
                    obj.event_categories.get_or_insert(vec![]).extend(
                        EventCategoriesListDeserializer::deserialize("EventCategories", stack)?,
                    );
                }
                "SourceType" => {
                    obj.source_type = Some(StringDeserializer::deserialize("SourceType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EventCategoriesMapListDeserializer;
impl EventCategoriesMapListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<EventCategoriesMap>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "EventCategoriesMap" {
                obj.push(EventCategoriesMapDeserializer::deserialize(
                    "EventCategoriesMap",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Data returned from the <code>DescribeEventCategories</code> operation.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EventCategoriesMessage {
    /// <p>A list of EventCategoriesMap data types.</p>
    pub event_categories_map_list: Option<Vec<EventCategoriesMap>>,
}

#[allow(dead_code)]
struct EventCategoriesMessageDeserializer;
impl EventCategoriesMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventCategoriesMessage, XmlParseError> {
        deserialize_elements::<_, EventCategoriesMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "EventCategoriesMapList" => {
                    obj.event_categories_map_list.get_or_insert(vec![]).extend(
                        EventCategoriesMapListDeserializer::deserialize(
                            "EventCategoriesMapList",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EventListDeserializer;
impl EventListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Event>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Event" {
                obj.push(EventDeserializer::deserialize("Event", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EventSubscription {
    /// <p>The RDS event notification subscription Id.</p>
    pub cust_subscription_id: Option<String>,
    /// <p>The Amazon Web Services customer account associated with the RDS event notification subscription.</p>
    pub customer_aws_id: Option<String>,
    /// <p>A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.</p>
    pub enabled: Option<bool>,
    /// <p>A list of event categories for the RDS event notification subscription.</p>
    pub event_categories_list: Option<Vec<String>>,
    /// <p>The Amazon Resource Name (ARN) for the event subscription.</p>
    pub event_subscription_arn: Option<String>,
    /// <p>The topic ARN of the RDS event notification subscription.</p>
    pub sns_topic_arn: Option<String>,
    /// <p>A list of source IDs for the RDS event notification subscription.</p>
    pub source_ids_list: Option<Vec<String>>,
    /// <p>The source type for the RDS event notification subscription.</p>
    pub source_type: Option<String>,
    /// <p>The status of the RDS event notification subscription.</p> <p>Constraints:</p> <p>Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist</p> <p>The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p>
    pub status: Option<String>,
    /// <p>The time the RDS event notification subscription was created.</p>
    pub subscription_creation_time: Option<String>,
}

#[allow(dead_code)]
struct EventSubscriptionDeserializer;
impl EventSubscriptionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventSubscription, XmlParseError> {
        deserialize_elements::<_, EventSubscription, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CustSubscriptionId" => {
                    obj.cust_subscription_id = Some(StringDeserializer::deserialize(
                        "CustSubscriptionId",
                        stack,
                    )?);
                }
                "CustomerAwsId" => {
                    obj.customer_aws_id =
                        Some(StringDeserializer::deserialize("CustomerAwsId", stack)?);
                }
                "Enabled" => {
                    obj.enabled = Some(BooleanDeserializer::deserialize("Enabled", stack)?);
                }
                "EventCategoriesList" => {
                    obj.event_categories_list.get_or_insert(vec![]).extend(
                        EventCategoriesListDeserializer::deserialize("EventCategoriesList", stack)?,
                    );
                }
                "EventSubscriptionArn" => {
                    obj.event_subscription_arn = Some(StringDeserializer::deserialize(
                        "EventSubscriptionArn",
                        stack,
                    )?);
                }
                "SnsTopicArn" => {
                    obj.sns_topic_arn =
                        Some(StringDeserializer::deserialize("SnsTopicArn", stack)?);
                }
                "SourceIdsList" => {
                    obj.source_ids_list.get_or_insert(vec![]).extend(
                        SourceIdsListDeserializer::deserialize("SourceIdsList", stack)?,
                    );
                }
                "SourceType" => {
                    obj.source_type = Some(StringDeserializer::deserialize("SourceType", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "SubscriptionCreationTime" => {
                    obj.subscription_creation_time = Some(StringDeserializer::deserialize(
                        "SubscriptionCreationTime",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct EventSubscriptionsListDeserializer;
impl EventSubscriptionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<EventSubscription>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "EventSubscription" {
                obj.push(EventSubscriptionDeserializer::deserialize(
                    "EventSubscription",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Data returned by the <b>DescribeEventSubscriptions</b> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EventSubscriptionsMessage {
    /// <p>A list of EventSubscriptions data types.</p>
    pub event_subscriptions_list: Option<Vec<EventSubscription>>,
    /// <p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct EventSubscriptionsMessageDeserializer;
impl EventSubscriptionsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventSubscriptionsMessage, XmlParseError> {
        deserialize_elements::<_, EventSubscriptionsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscriptionsList" => {
                        obj.event_subscriptions_list.get_or_insert(vec![]).extend(
                            EventSubscriptionsListDeserializer::deserialize(
                                "EventSubscriptionsList",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeEvents</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct EventsMessage {
    /// <p> A list of <code>Event</code> instances. </p>
    pub events: Option<Vec<Event>>,
    /// <p> An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct EventsMessageDeserializer;
impl EventsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventsMessage, XmlParseError> {
        deserialize_elements::<_, EventsMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Events" => {
                    obj.events
                        .get_or_insert(vec![])
                        .extend(EventListDeserializer::deserialize("Events", stack)?);
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the details of a snapshot export to Amazon S3. </p> <p>This data type is used as a response element in the <code>DescribeExportTasks</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ExportTask {
    /// <p><p>The data exported from the snapshot. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li> <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li> <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li> <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li> </ul></p>
    pub export_only: Option<Vec<String>>,
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to. </p>
    pub export_task_identifier: Option<String>,
    /// <p>The reason the export failed, if it failed.</p>
    pub failure_cause: Option<String>,
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot. </p>
    pub iam_role_arn: Option<String>,
    /// <p>The key identifier of the Amazon Web Services KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to Amazon S3. The Amazon Web Services KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this Amazon Web Services KMS CMK. </p>
    pub kms_key_id: Option<String>,
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub percent_progress: Option<i64>,
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub s3_bucket: Option<String>,
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub s3_prefix: Option<String>,
    /// <p>The time that the snapshot was created.</p>
    pub snapshot_time: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub source_arn: Option<String>,
    /// <p>The progress status of the export task.</p>
    pub status: Option<String>,
    /// <p>The time that the snapshot export task completed.</p>
    pub task_end_time: Option<String>,
    /// <p>The time that the snapshot export task started.</p>
    pub task_start_time: Option<String>,
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub total_extracted_data_in_gb: Option<i64>,
    /// <p>A warning about the snapshot export task.</p>
    pub warning_message: Option<String>,
}

#[allow(dead_code)]
struct ExportTaskDeserializer;
impl ExportTaskDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportTask, XmlParseError> {
        deserialize_elements::<_, ExportTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ExportOnly" => {
                    obj.export_only
                        .get_or_insert(vec![])
                        .extend(StringListDeserializer::deserialize("ExportOnly", stack)?);
                }
                "ExportTaskIdentifier" => {
                    obj.export_task_identifier = Some(StringDeserializer::deserialize(
                        "ExportTaskIdentifier",
                        stack,
                    )?);
                }
                "FailureCause" => {
                    obj.failure_cause =
                        Some(StringDeserializer::deserialize("FailureCause", stack)?);
                }
                "IamRoleArn" => {
                    obj.iam_role_arn = Some(StringDeserializer::deserialize("IamRoleArn", stack)?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "PercentProgress" => {
                    obj.percent_progress =
                        Some(IntegerDeserializer::deserialize("PercentProgress", stack)?);
                }
                "S3Bucket" => {
                    obj.s3_bucket = Some(StringDeserializer::deserialize("S3Bucket", stack)?);
                }
                "S3Prefix" => {
                    obj.s3_prefix = Some(StringDeserializer::deserialize("S3Prefix", stack)?);
                }
                "SnapshotTime" => {
                    obj.snapshot_time =
                        Some(TStampDeserializer::deserialize("SnapshotTime", stack)?);
                }
                "SourceArn" => {
                    obj.source_arn = Some(StringDeserializer::deserialize("SourceArn", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "TaskEndTime" => {
                    obj.task_end_time =
                        Some(TStampDeserializer::deserialize("TaskEndTime", stack)?);
                }
                "TaskStartTime" => {
                    obj.task_start_time =
                        Some(TStampDeserializer::deserialize("TaskStartTime", stack)?);
                }
                "TotalExtractedDataInGB" => {
                    obj.total_extracted_data_in_gb = Some(IntegerDeserializer::deserialize(
                        "TotalExtractedDataInGB",
                        stack,
                    )?);
                }
                "WarningMessage" => {
                    obj.warning_message =
                        Some(StringDeserializer::deserialize("WarningMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ExportTasksListDeserializer;
impl ExportTasksListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ExportTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ExportTask" {
                obj.push(ExportTaskDeserializer::deserialize("ExportTask", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ExportTasksMessage {
    /// <p>Information about an export of a snapshot to Amazon S3.</p>
    pub export_tasks: Option<Vec<ExportTask>>,
    /// <p>A pagination token that can be used in a later <code>DescribeExportTasks</code> request. A marker is used for pagination to identify the location to begin output for the next response of <code>DescribeExportTasks</code>.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct ExportTasksMessageDeserializer;
impl ExportTasksMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportTasksMessage, XmlParseError> {
        deserialize_elements::<_, ExportTasksMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ExportTasks" => {
                    obj.export_tasks.get_or_insert(vec![]).extend(
                        ExportTasksListDeserializer::deserialize("ExportTasks", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct FailoverDBClusterMessage {
    /// <p><p>A DB cluster identifier to force a failover for. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul></p>
    pub db_cluster_identifier: String,
    /// <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
    pub target_db_instance_identifier: Option<String>,
}

/// Serialize `FailoverDBClusterMessage` contents to a `SignedRequest`.
struct FailoverDBClusterMessageSerializer;
impl FailoverDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FailoverDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.target_db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "TargetDBInstanceIdentifier"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct FailoverDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct FailoverDBClusterResultDeserializer;
impl FailoverDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FailoverDBClusterResult, XmlParseError> {
        deserialize_elements::<_, FailoverDBClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBCluster" => {
                        obj.db_cluster =
                            Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct FailoverGlobalClusterMessage {
    /// <p><p>Identifier of the Aurora global database (<a>GlobalCluster</a>) that should be failed over. The identifier is the unique key assigned by the user when the Aurora global database was created. In other words, it&#39;s the name of the Aurora global database that you want to fail over. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <a>GlobalCluster</a> (Aurora global database).</p> </li> </ul></p>
    pub global_cluster_identifier: String,
    /// <p>Identifier of the secondary Aurora DB cluster that you want to promote to primary for the Aurora global database (<a>GlobalCluster</a>.) Use the Amazon Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon Web Services Region. </p>
    pub target_db_cluster_identifier: String,
}

/// Serialize `FailoverGlobalClusterMessage` contents to a `SignedRequest`.
struct FailoverGlobalClusterMessageSerializer;
impl FailoverGlobalClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FailoverGlobalClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "GlobalClusterIdentifier"),
            &obj.global_cluster_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "TargetDbClusterIdentifier"),
            &obj.target_db_cluster_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct FailoverGlobalClusterResult {
    pub global_cluster: Option<GlobalCluster>,
}

#[allow(dead_code)]
struct FailoverGlobalClusterResultDeserializer;
impl FailoverGlobalClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FailoverGlobalClusterResult, XmlParseError> {
        deserialize_elements::<_, FailoverGlobalClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "GlobalCluster" => {
                        obj.global_cluster = Some(GlobalClusterDeserializer::deserialize(
                            "GlobalCluster",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the state of scheduled or in-process failover operations on an Aurora global database (<a>GlobalCluster</a>). This Data type is empty unless a failover operation is scheduled or is currently underway on the Aurora global database. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct FailoverState {
    /// <p>The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being demoted, and which is associated with this state. </p>
    pub from_db_cluster_arn: Option<String>,
    /// <p><p>The current status of the Aurora global database (<a>GlobalCluster</a>). Possible values are as follows: </p> <ul> <li> <p>pending &#x96; A request to fail over the Aurora global database (<a>GlobalCluster</a>) has been received by the service. The <code>GlobalCluster</code>&#39;s primary DB cluster and the specified secondary DB cluster are being verified before the failover process can start.</p> </li> <li> <p>failing-over &#x96; This status covers the range of Aurora internal operations that take place during the failover process, such as demoting the primary Aurora DB cluster, promoting the secondary Aurora DB, and synchronizing replicas. </p> </li> <li> <p>cancelling &#x96; The request to fail over the Aurora global database (<a>GlobalCluster</a>) was cancelled and the primary Aurora DB cluster and the selected secondary Aurora DB cluster are returning to their previous states. </p> </li> </ul></p>
    pub status: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being promoted, and which is associated with this state.</p>
    pub to_db_cluster_arn: Option<String>,
}

#[allow(dead_code)]
struct FailoverStateDeserializer;
impl FailoverStateDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FailoverState, XmlParseError> {
        deserialize_elements::<_, FailoverState, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "FromDbClusterArn" => {
                    obj.from_db_cluster_arn =
                        Some(StringDeserializer::deserialize("FromDbClusterArn", stack)?);
                }
                "Status" => {
                    obj.status = Some(FailoverStatusDeserializer::deserialize("Status", stack)?);
                }
                "ToDbClusterArn" => {
                    obj.to_db_cluster_arn =
                        Some(StringDeserializer::deserialize("ToDbClusterArn", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct FailoverStatusDeserializer;
impl FailoverStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct FeatureNameListDeserializer;
impl FeatureNameListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p>A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as IDs. The filters supported by a describe operation are documented with the describe operation.</p> <note> <p>Currently, wildcards are not supported in filters.</p> </note> <p>The following actions can be filtered:</p> <ul> <li> <p> <code>DescribeDBClusterBacktracks</code> </p> </li> <li> <p> <code>DescribeDBClusterEndpoints</code> </p> </li> <li> <p> <code>DescribeDBClusters</code> </p> </li> <li> <p> <code>DescribeDBInstances</code> </p> </li> <li> <p> <code>DescribePendingMaintenanceActions</code> </p> </li> </ul></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct Filter {
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub name: String,
    /// <p>One or more filter values. Filter values are case-sensitive.</p>
    pub values: Vec<String>,
}

/// Serialize `Filter` contents to a `SignedRequest`.
struct FilterSerializer;
impl FilterSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Filter) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Name"), &obj.name);
        FilterValueListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Value"),
            &obj.values,
        );
    }
}

/// Serialize `FilterList` contents to a `SignedRequest`.
struct FilterListSerializer;
impl FilterListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Filter>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            FilterSerializer::serialize(params, &key, obj);
        }
    }
}

/// Serialize `FilterValueList` contents to a `SignedRequest`.
struct FilterValueListSerializer;
impl FilterValueListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>A data type representing an Aurora global database.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct GlobalCluster {
    /// <p> The default database name within the new global database cluster. </p>
    pub database_name: Option<String>,
    /// <p> The deletion protection setting for the new global database cluster. </p>
    pub deletion_protection: Option<bool>,
    /// <p> The Aurora database engine used by the global database cluster. </p>
    pub engine: Option<String>,
    /// <p>Indicates the database engine version.</p>
    pub engine_version: Option<String>,
    /// <p>A data object containing all properties for the current state of an in-process or pending failover process for this Aurora global database. This object is empty unless the <a>FailoverGlobalCluster</a> API operation has been called on this Aurora global database (<a>GlobalCluster</a>). </p>
    pub failover_state: Option<FailoverState>,
    /// <p>The Amazon Resource Name (ARN) for the global database cluster.</p>
    pub global_cluster_arn: Option<String>,
    /// <p> Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database cluster. </p>
    pub global_cluster_identifier: Option<String>,
    /// <p> The list of cluster IDs for secondary clusters within the global database cluster. Currently limited to 1 item. </p>
    pub global_cluster_members: Option<Vec<GlobalClusterMember>>,
    /// <p> The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS customer master key (CMK) for the DB cluster is accessed. </p>
    pub global_cluster_resource_id: Option<String>,
    /// <p>Specifies the current state of this global database cluster.</p>
    pub status: Option<String>,
    /// <p> The storage encryption setting for the global database cluster. </p>
    pub storage_encrypted: Option<bool>,
}

#[allow(dead_code)]
struct GlobalClusterDeserializer;
impl GlobalClusterDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GlobalCluster, XmlParseError> {
        deserialize_elements::<_, GlobalCluster, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DatabaseName" => {
                    obj.database_name =
                        Some(StringDeserializer::deserialize("DatabaseName", stack)?);
                }
                "DeletionProtection" => {
                    obj.deletion_protection = Some(BooleanOptionalDeserializer::deserialize(
                        "DeletionProtection",
                        stack,
                    )?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "FailoverState" => {
                    obj.failover_state = Some(FailoverStateDeserializer::deserialize(
                        "FailoverState",
                        stack,
                    )?);
                }
                "GlobalClusterArn" => {
                    obj.global_cluster_arn =
                        Some(StringDeserializer::deserialize("GlobalClusterArn", stack)?);
                }
                "GlobalClusterIdentifier" => {
                    obj.global_cluster_identifier = Some(StringDeserializer::deserialize(
                        "GlobalClusterIdentifier",
                        stack,
                    )?);
                }
                "GlobalClusterMembers" => {
                    obj.global_cluster_members.get_or_insert(vec![]).extend(
                        GlobalClusterMemberListDeserializer::deserialize(
                            "GlobalClusterMembers",
                            stack,
                        )?,
                    );
                }
                "GlobalClusterResourceId" => {
                    obj.global_cluster_resource_id = Some(StringDeserializer::deserialize(
                        "GlobalClusterResourceId",
                        stack,
                    )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "StorageEncrypted" => {
                    obj.storage_encrypted = Some(BooleanOptionalDeserializer::deserialize(
                        "StorageEncrypted",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct GlobalClusterListDeserializer;
impl GlobalClusterListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<GlobalCluster>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "GlobalClusterMember" {
                obj.push(GlobalClusterDeserializer::deserialize(
                    "GlobalClusterMember",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> A data structure with information about any primary and secondary clusters associated with an Aurora global database. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct GlobalClusterMember {
    /// <p> The Amazon Resource Name (ARN) for each Aurora cluster. </p>
    pub db_cluster_arn: Option<String>,
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    pub global_write_forwarding_status: Option<String>,
    /// <p> Specifies whether the Aurora cluster is the primary cluster (that is, has read-write capability) for the Aurora global database with which it is associated. </p>
    pub is_writer: Option<bool>,
    /// <p> The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the Aurora global database. </p>
    pub readers: Option<Vec<String>>,
}

#[allow(dead_code)]
struct GlobalClusterMemberDeserializer;
impl GlobalClusterMemberDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GlobalClusterMember, XmlParseError> {
        deserialize_elements::<_, GlobalClusterMember, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBClusterArn" => {
                    obj.db_cluster_arn =
                        Some(StringDeserializer::deserialize("DBClusterArn", stack)?);
                }
                "GlobalWriteForwardingStatus" => {
                    obj.global_write_forwarding_status =
                        Some(WriteForwardingStatusDeserializer::deserialize(
                            "GlobalWriteForwardingStatus",
                            stack,
                        )?);
                }
                "IsWriter" => {
                    obj.is_writer = Some(BooleanDeserializer::deserialize("IsWriter", stack)?);
                }
                "Readers" => {
                    obj.readers
                        .get_or_insert(vec![])
                        .extend(ReadersArnListDeserializer::deserialize("Readers", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct GlobalClusterMemberListDeserializer;
impl GlobalClusterMemberListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<GlobalClusterMember>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "GlobalClusterMember" {
                obj.push(GlobalClusterMemberDeserializer::deserialize(
                    "GlobalClusterMember",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct GlobalClustersMessage {
    /// <p> The list of global clusters returned by this request. </p>
    pub global_clusters: Option<Vec<GlobalCluster>>,
    /// <p> An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct GlobalClustersMessageDeserializer;
impl GlobalClustersMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GlobalClustersMessage, XmlParseError> {
        deserialize_elements::<_, GlobalClustersMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "GlobalClusters" => {
                    obj.global_clusters.get_or_insert(vec![]).extend(
                        GlobalClusterListDeserializer::deserialize("GlobalClusters", stack)?,
                    );
                }
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct IAMAuthModeDeserializer;
impl IAMAuthModeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p> This data type is used as a response element in the <code>DescribeDBSecurityGroups</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct IPRange {
    /// <p>Specifies the IP range.</p>
    pub cidrip: Option<String>,
    /// <p>Specifies the status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct IPRangeDeserializer;
impl IPRangeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IPRange, XmlParseError> {
        deserialize_elements::<_, IPRange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CIDRIP" => {
                    obj.cidrip = Some(StringDeserializer::deserialize("CIDRIP", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct IPRangeListDeserializer;
impl IPRangeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<IPRange>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "IPRange" {
                obj.push(IPRangeDeserializer::deserialize("IPRange", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ImportInstallationMediaMessage {
    /// <p>The identifier of the custom Availability Zone (AZ) to import the installation media to.</p>
    pub custom_availability_zone_id: String,
    /// <p><p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: String,
    /// <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
    pub engine_installation_media_path: String,
    /// <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport"> Microsoft SQL Server Versions on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub engine_version: String,
    /// <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
    pub os_installation_media_path: String,
}

/// Serialize `ImportInstallationMediaMessage` contents to a `SignedRequest`.
struct ImportInstallationMediaMessageSerializer;
impl ImportInstallationMediaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportInstallationMediaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CustomAvailabilityZoneId"),
            &obj.custom_availability_zone_id,
        );
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        params.put(
            &format!("{}{}", prefix, "EngineInstallationMediaPath"),
            &obj.engine_installation_media_path,
        );
        params.put(
            &format!("{}{}", prefix, "EngineVersion"),
            &obj.engine_version,
        );
        params.put(
            &format!("{}{}", prefix, "OSInstallationMediaPath"),
            &obj.os_installation_media_path,
        );
    }
}

/// <p>Contains the installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct InstallationMedia {
    /// <p>The custom Availability Zone (AZ) that contains the installation media.</p>
    pub custom_availability_zone_id: Option<String>,
    /// <p>The DB engine.</p>
    pub engine: Option<String>,
    /// <p>The path to the installation medium for the DB engine.</p>
    pub engine_installation_media_path: Option<String>,
    /// <p>The engine version of the DB engine.</p>
    pub engine_version: Option<String>,
    /// <p>If an installation media failure occurred, the cause of the failure.</p>
    pub failure_cause: Option<InstallationMediaFailureCause>,
    /// <p>The installation medium ID.</p>
    pub installation_media_id: Option<String>,
    /// <p>The path to the installation medium for the operating system associated with the DB engine.</p>
    pub os_installation_media_path: Option<String>,
    /// <p>The status of the installation medium.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct InstallationMediaDeserializer;
impl InstallationMediaDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstallationMedia, XmlParseError> {
        deserialize_elements::<_, InstallationMedia, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CustomAvailabilityZoneId" => {
                    obj.custom_availability_zone_id = Some(StringDeserializer::deserialize(
                        "CustomAvailabilityZoneId",
                        stack,
                    )?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineInstallationMediaPath" => {
                    obj.engine_installation_media_path = Some(StringDeserializer::deserialize(
                        "EngineInstallationMediaPath",
                        stack,
                    )?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "FailureCause" => {
                    obj.failure_cause =
                        Some(InstallationMediaFailureCauseDeserializer::deserialize(
                            "FailureCause",
                            stack,
                        )?);
                }
                "InstallationMediaId" => {
                    obj.installation_media_id = Some(StringDeserializer::deserialize(
                        "InstallationMediaId",
                        stack,
                    )?);
                }
                "OSInstallationMediaPath" => {
                    obj.os_installation_media_path = Some(StringDeserializer::deserialize(
                        "OSInstallationMediaPath",
                        stack,
                    )?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the cause of an installation media failure. Installation media is used for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct InstallationMediaFailureCause {
    /// <p>The reason that an installation media import failed.</p>
    pub message: Option<String>,
}

#[allow(dead_code)]
struct InstallationMediaFailureCauseDeserializer;
impl InstallationMediaFailureCauseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstallationMediaFailureCause, XmlParseError> {
        deserialize_elements::<_, InstallationMediaFailureCause, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Message" => {
                        obj.message = Some(StringDeserializer::deserialize("Message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct InstallationMediaListDeserializer;
impl InstallationMediaListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstallationMedia>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "InstallationMedia" {
                obj.push(InstallationMediaDeserializer::deserialize(
                    "InstallationMedia",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct InstallationMediaMessage {
    /// <p>The list of <a>InstallationMedia</a> objects for the Amazon Web Services account.</p>
    pub installation_media: Option<Vec<InstallationMedia>>,
    /// <p>An optional pagination token provided by a previous <a>DescribeInstallationMedia</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
}

#[allow(dead_code)]
struct InstallationMediaMessageDeserializer;
impl InstallationMediaMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstallationMediaMessage, XmlParseError> {
        deserialize_elements::<_, InstallationMediaMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "InstallationMedia" => {
                        obj.installation_media.get_or_insert(vec![]).extend(
                            InstallationMediaListDeserializer::deserialize(
                                "InstallationMedia",
                                stack,
                            )?,
                        );
                    }
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct IntegerDeserializer;
impl IntegerDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(i64::from_str(&s).unwrap()))
    }
}
#[allow(dead_code)]
struct IntegerOptionalDeserializer;
impl IntegerOptionalDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(i64::from_str(&s).unwrap()))
    }
}

/// Serialize `KeyList` contents to a `SignedRequest`.
struct KeyListSerializer;
impl KeyListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ListTagsForResourceMessage {
    /// <p>This parameter isn't currently supported.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub resource_name: String,
}

/// Serialize `ListTagsForResourceMessage` contents to a `SignedRequest`.
struct ListTagsForResourceMessageSerializer;
impl ListTagsForResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListTagsForResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "ResourceName"), &obj.resource_name);
    }
}

#[allow(dead_code)]
struct LogTypeListDeserializer;
impl LogTypeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LogTypeList` contents to a `SignedRequest`.
struct LogTypeListSerializer;
impl LogTypeListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[allow(dead_code)]
struct LongDeserializer;
impl LongDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(i64::from_str(&s).unwrap()))
    }
}
#[allow(dead_code)]
struct LongOptionalDeserializer;
impl LongOptionalDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, |s| Ok(i64::from_str(&s).unwrap()))
    }
}
/// <p>The minimum DB engine version required for each corresponding allowed value for an option setting.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct MinimumEngineVersionPerAllowedValue {
    /// <p>The allowed value for an option setting.</p>
    pub allowed_value: Option<String>,
    /// <p>The minimum DB engine version required for the allowed value.</p>
    pub minimum_engine_version: Option<String>,
}

#[allow(dead_code)]
struct MinimumEngineVersionPerAllowedValueDeserializer;
impl MinimumEngineVersionPerAllowedValueDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<MinimumEngineVersionPerAllowedValue, XmlParseError> {
        deserialize_elements::<_, MinimumEngineVersionPerAllowedValue, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AllowedValue" => {
                        obj.allowed_value =
                            Some(StringDeserializer::deserialize("AllowedValue", stack)?);
                    }
                    "MinimumEngineVersion" => {
                        obj.minimum_engine_version = Some(StringDeserializer::deserialize(
                            "MinimumEngineVersion",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct MinimumEngineVersionPerAllowedValueListDeserializer;
impl MinimumEngineVersionPerAllowedValueListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<MinimumEngineVersionPerAllowedValue>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "MinimumEngineVersionPerAllowedValue" {
                obj.push(
                    MinimumEngineVersionPerAllowedValueDeserializer::deserialize(
                        "MinimumEngineVersionPerAllowedValue",
                        stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyCertificatesMessage {
    /// <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> CLI command or the <code>DescribeCertificates</code> API operation.</p>
    pub certificate_identifier: Option<String>,
    /// <p>A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.</p>
    pub remove_customer_override: Option<bool>,
}

/// Serialize `ModifyCertificatesMessage` contents to a `SignedRequest`.
struct ModifyCertificatesMessageSerializer;
impl ModifyCertificatesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyCertificatesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.certificate_identifier {
            params.put(
                &format!("{}{}", prefix, "CertificateIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.remove_customer_override {
            params.put(
                &format!("{}{}", prefix, "RemoveCustomerOverride"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyCertificatesResult {
    pub certificate: Option<Certificate>,
}

#[allow(dead_code)]
struct ModifyCertificatesResultDeserializer;
impl ModifyCertificatesResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyCertificatesResult, XmlParseError> {
        deserialize_elements::<_, ModifyCertificatesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Certificate" => {
                        obj.certificate =
                            Some(CertificateDeserializer::deserialize("Certificate", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyCurrentDBClusterCapacityMessage {
    /// <p><p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul></p>
    pub capacity: Option<i64>,
    /// <p><p>The DB cluster identifier for the cluster being modified. This parameter isn&#39;t case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul></p>
    pub db_cluster_identifier: String,
    /// <p><p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul></p>
    pub seconds_before_timeout: Option<i64>,
    /// <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
    pub timeout_action: Option<String>,
}

/// Serialize `ModifyCurrentDBClusterCapacityMessage` contents to a `SignedRequest`.
struct ModifyCurrentDBClusterCapacityMessageSerializer;
impl ModifyCurrentDBClusterCapacityMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyCurrentDBClusterCapacityMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.capacity {
            params.put(&format!("{}{}", prefix, "Capacity"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.seconds_before_timeout {
            params.put(
                &format!("{}{}", prefix, "SecondsBeforeTimeout"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.timeout_action {
            params.put(&format!("{}{}", prefix, "TimeoutAction"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBClusterEndpointMessage {
    /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: String,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub endpoint_type: Option<String>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub excluded_members: Option<Vec<String>>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: Option<Vec<String>>,
}

/// Serialize `ModifyDBClusterEndpointMessage` contents to a `SignedRequest`.
struct ModifyDBClusterEndpointMessageSerializer;
impl ModifyDBClusterEndpointMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterEndpointMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterEndpointIdentifier"),
            &obj.db_cluster_endpoint_identifier,
        );
        if let Some(ref field_value) = obj.endpoint_type {
            params.put(&format!("{}{}", prefix, "EndpointType"), &field_value);
        }
        if let Some(ref field_value) = obj.excluded_members {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExcludedMembers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.static_members {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "StaticMembers"),
                field_value,
            );
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBClusterMessage {
    /// <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
    pub allow_major_version_upgrade: Option<bool>,
    /// <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
    pub apply_immediately: Option<bool>,
    /// <p><p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note> <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p> </note> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul></p>
    pub backtrack_window: Option<i64>,
    /// <p><p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.</p>
    pub cloudwatch_logs_export_configuration: Option<CloudwatchLogsExportConfiguration>,
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
    pub db_cluster_identifier: String,
    /// <p>The name of the DB cluster parameter group to use for the DB cluster.</p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p><p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn&#39;t rebooted automatically. Also, parameter changes aren&#39;t applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul></p>
    pub db_instance_parameter_group_name: Option<String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory directory ID to move the DB cluster to. Specify <code>none</code> to remove the cluster from its current domain. The domain must be created prior to this operation. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.</p> <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then. </p>
    pub enable_global_write_forwarding: Option<bool>,
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_http_endpoint: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
    pub engine_version: Option<String>,
    /// <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: Option<String>,
    /// <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
    pub new_db_cluster_identifier: Option<String>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
    pub port: Option<i64>,
    /// <p><p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in <code>serverless</code> DB engine mode.</p>
    pub scaling_configuration: Option<ScalingConfiguration>,
    /// <p>A list of VPC security groups that the DB cluster will belong to.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `ModifyDBClusterMessage` contents to a `SignedRequest`.
struct ModifyDBClusterMessageSerializer;
impl ModifyDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allow_major_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AllowMajorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"), &field_value);
        }
        if let Some(ref field_value) = obj.backtrack_window {
            params.put(&format!("{}{}", prefix, "BacktrackWindow"), &field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.cloudwatch_logs_export_configuration {
            CloudwatchLogsExportConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CloudwatchLogsExportConfiguration"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_instance_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBInstanceParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_global_write_forwarding {
            params.put(
                &format!("{}{}", prefix, "EnableGlobalWriteForwarding"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_http_endpoint {
            params.put(&format!("{}{}", prefix, "EnableHttpEndpoint"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"), &field_value);
        }
        if let Some(ref field_value) = obj.new_db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "NewDBClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.scaling_configuration {
            ScalingConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ScalingConfiguration"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBClusterParameterGroupMessage {
    /// <p>The name of the DB cluster parameter group to modify.</p>
    pub db_cluster_parameter_group_name: String,
    /// <p><p>A list of parameters in the DB cluster parameter group to modify.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters.</p> <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately to the DB clusters associated with the parameter group. When the application method is <code>pending-reboot</code>, changes to dynamic and static parameters are applied after a reboot without failover to the DB clusters associated with the parameter group.</p> </note></p>
    pub parameters: Vec<Parameter>,
}

/// Serialize `ModifyDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct ModifyDBClusterParameterGroupMessageSerializer;
impl ModifyDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterParameterGroupName"),
            &obj.db_cluster_parameter_group_name,
        );
        ParametersListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Parameter"),
            &obj.parameters,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct ModifyDBClusterResultDeserializer;
impl ModifyDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBClusterResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBClusterResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBCluster" => {
                    obj.db_cluster = Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBClusterSnapshotAttributeMessage {
    /// <p><p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p> <note> <p>To view the list of attributes available to modify, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p> </note></p>
    pub attribute_name: String,
    /// <p>The identifier for the DB cluster snapshot to modify the attributes for.</p>
    pub db_cluster_snapshot_identifier: String,
    /// <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any Amazon Web Services account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts.</p>
    pub values_to_add: Option<Vec<String>>,
    /// <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account identifiers, or <code>all</code> to remove authorization for any Amazon Web Services account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an Amazon Web Services account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
    pub values_to_remove: Option<Vec<String>>,
}

/// Serialize `ModifyDBClusterSnapshotAttributeMessage` contents to a `SignedRequest`.
struct ModifyDBClusterSnapshotAttributeMessageSerializer;
impl ModifyDBClusterSnapshotAttributeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterSnapshotAttributeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AttributeName"),
            &obj.attribute_name,
        );
        params.put(
            &format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
            &obj.db_cluster_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.values_to_add {
            AttributeValueListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AttributeValue"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.values_to_remove {
            AttributeValueListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AttributeValue"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBClusterSnapshotAttributeResult {
    pub db_cluster_snapshot_attributes_result: Option<DBClusterSnapshotAttributesResult>,
}

#[allow(dead_code)]
struct ModifyDBClusterSnapshotAttributeResultDeserializer;
impl ModifyDBClusterSnapshotAttributeResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBClusterSnapshotAttributeResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBClusterSnapshotAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBClusterSnapshotAttributesResult" => {
                        obj.db_cluster_snapshot_attributes_result =
                            Some(DBClusterSnapshotAttributesResultDeserializer::deserialize(
                                "DBClusterSnapshotAttributesResult",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBInstanceMessage {
    /// <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
    pub allocated_storage: Option<i64>,
    /// <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
    pub allow_major_version_upgrade: Option<bool>,
    /// <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
    pub apply_immediately: Option<bool>,
    /// <p> A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. </p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub aws_backup_recovery_point_arn: Option<String>,
    /// <p><p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <note> <p>Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance.</p> </note> <p>These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL read replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL read replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can&#39;t be set to 0 if the DB instance is a source to read replicas</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>Indicates the certificate that needs to be associated with the instance.</p>
    pub ca_certificate_identifier: Option<String>,
    /// <p><p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul></p>
    pub certificate_rotation_restart: Option<bool>,
    /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.</p> <p>A change to the <code>CloudwatchLogsExportConfiguration</code> parameter is always applied to the DB instance immediately. Therefore, the <code>ApplyImmediately</code> parameter has no effect.</p>
    pub cloudwatch_logs_export_configuration: Option<CloudwatchLogsExportConfiguration>,
    /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
    pub db_instance_class: Option<String>,
    /// <p><p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
    pub db_parameter_group_name: Option<String>,
    /// <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>, <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and <code>49152-49156</code>.</p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid values: <code>1150-65535</code> </p>
    pub db_port_number: Option<i64>,
    /// <p><p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul></p>
    pub db_security_groups: Option<Vec<String>>,
    /// <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: Option<String>,
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p> <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.</p> <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
    pub enable_performance_insights: Option<bool>,
    /// <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>If you specify only a major version, Amazon RDS will update the DB instance to the default minor version if the current minor version is lower. For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
    pub engine_version: Option<String>,
    /// <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
    pub iops: Option<i64>,
    /// <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub license_model: Option<String>,
    /// <p><p>The new password for the master user. The password can include any printable ASCII character except &quot;/&quot;, &quot;&quot;&quot;, or &quot;@&quot;.</p> <p> Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note></p>
    pub master_user_password: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p> <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    pub monitoring_interval: Option<i64>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: Option<String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. </p>
    pub multi_az: Option<bool>,
    /// <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
    pub new_db_instance_identifier: Option<String>,
    /// <p> A value that indicates the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub performance_insights_kms_key_id: Option<String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: Option<i64>,
    /// <p><p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
    pub promotion_tier: Option<i64>,
    /// <p>A value that indicates whether the DB instance is publicly accessible. </p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
    pub publicly_accessible: Option<bool>,
    /// <p>A value that sets the open mode of a replica database to either mounted or read-only.</p> <note> <p>Currently, this parameter is only supported for Oracle DB instances.</p> </note> <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active Data Guard to transmit information to the mounted replica. Because it doesn't accept user connections, a mounted replica can't serve a read-only workload. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub replica_mode: Option<String>,
    /// <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a read replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: Option<String>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: Option<bool>,
    /// <p><p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul></p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `ModifyDBInstanceMessage` contents to a `SignedRequest`.
struct ModifyDBInstanceMessageSerializer;
impl ModifyDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocated_storage {
            params.put(&format!("{}{}", prefix, "AllocatedStorage"), &field_value);
        }
        if let Some(ref field_value) = obj.allow_major_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AllowMajorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"), &field_value);
        }
        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.aws_backup_recovery_point_arn {
            params.put(
                &format!("{}{}", prefix, "AwsBackupRecoveryPointArn"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.ca_certificate_identifier {
            params.put(
                &format!("{}{}", prefix, "CACertificateIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.certificate_rotation_restart {
            params.put(
                &format!("{}{}", prefix, "CertificateRotationRestart"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.cloudwatch_logs_export_configuration {
            CloudwatchLogsExportConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CloudwatchLogsExportConfiguration"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_port_number {
            params.put(&format!("{}{}", prefix, "DBPortNumber"), &field_value);
        }
        if let Some(ref field_value) = obj.db_security_groups {
            DBSecurityGroupNameListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBSecurityGroupName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_customer_owned_ip {
            params.put(
                &format!("{}{}", prefix, "EnableCustomerOwnedIp"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_performance_insights {
            params.put(
                &format!("{}{}", prefix, "EnablePerformanceInsights"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"), &field_value);
        }
        if let Some(ref field_value) = obj.max_allocated_storage {
            params.put(
                &format!("{}{}", prefix, "MaxAllocatedStorage"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.new_db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "NewDBInstanceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.performance_insights_kms_key_id {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsKMSKeyId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.performance_insights_retention_period {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.promotion_tier {
            params.put(&format!("{}{}", prefix, "PromotionTier"), &field_value);
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        if let Some(ref field_value) = obj.replica_mode {
            params.put(&format!("{}{}", prefix, "ReplicaMode"), &field_value);
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"), &field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(
                &format!("{}{}", prefix, "TdeCredentialPassword"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.use_default_processor_features {
            params.put(
                &format!("{}{}", prefix, "UseDefaultProcessorFeatures"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct ModifyDBInstanceResultDeserializer;
impl ModifyDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBParameterGroupMessage {
    /// <p><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul></p>
    pub db_parameter_group_name: String,
    /// <p><p>An array of parameter names, values, and the application methods for the parameter update. At least one parameter name, value, and application method method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters.</p> <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately to the DB instances associated with the parameter group. When the application method is <code>pending-reboot</code>, changes to dynamic and static parameters are applied after a reboot without failover to the DB instances associated with the parameter group.</p> </note></p>
    pub parameters: Vec<Parameter>,
}

/// Serialize `ModifyDBParameterGroupMessage` contents to a `SignedRequest`.
struct ModifyDBParameterGroupMessageSerializer;
impl ModifyDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupName"),
            &obj.db_parameter_group_name,
        );
        ParametersListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Parameter"),
            &obj.parameters,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBProxyEndpointRequest {
    /// <p>The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.</p>
    pub db_proxy_endpoint_name: String,
    /// <p>The new identifier for the <code>DBProxyEndpoint</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_db_proxy_endpoint_name: Option<String>,
    /// <p>The VPC security group IDs for the DB proxy endpoint. When the DB proxy endpoint uses a different VPC than the original proxy, you also specify a different set of security group IDs than for the original proxy.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `ModifyDBProxyEndpointRequest` contents to a `SignedRequest`.
struct ModifyDBProxyEndpointRequestSerializer;
impl ModifyDBProxyEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBProxyEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBProxyEndpointName"),
            &obj.db_proxy_endpoint_name,
        );
        if let Some(ref field_value) = obj.new_db_proxy_endpoint_name {
            params.put(
                &format!("{}{}", prefix, "NewDBProxyEndpointName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupIds"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBProxyEndpointResponse {
    /// <p>The <code>DBProxyEndpoint</code> object representing the new settings for the DB proxy endpoint.</p>
    pub db_proxy_endpoint: Option<DBProxyEndpoint>,
}

#[allow(dead_code)]
struct ModifyDBProxyEndpointResponseDeserializer;
impl ModifyDBProxyEndpointResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBProxyEndpointResponse, XmlParseError> {
        deserialize_elements::<_, ModifyDBProxyEndpointResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyEndpoint" => {
                        obj.db_proxy_endpoint = Some(DBProxyEndpointDeserializer::deserialize(
                            "DBProxyEndpoint",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBProxyRequest {
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub auth: Option<Vec<UserAuthConfig>>,
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub db_proxy_name: String,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub debug_logging: Option<bool>,
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub idle_client_timeout: Option<i64>,
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_db_proxy_name: Option<String>,
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub require_tls: Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub role_arn: Option<String>,
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub security_groups: Option<Vec<String>>,
}

/// Serialize `ModifyDBProxyRequest` contents to a `SignedRequest`.
struct ModifyDBProxyRequestSerializer;
impl ModifyDBProxyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBProxyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auth {
            UserAuthConfigListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Auth"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.debug_logging {
            params.put(&format!("{}{}", prefix, "DebugLogging"), &field_value);
        }
        if let Some(ref field_value) = obj.idle_client_timeout {
            params.put(&format!("{}{}", prefix, "IdleClientTimeout"), &field_value);
        }
        if let Some(ref field_value) = obj.new_db_proxy_name {
            params.put(&format!("{}{}", prefix, "NewDBProxyName"), &field_value);
        }
        if let Some(ref field_value) = obj.require_tls {
            params.put(&format!("{}{}", prefix, "RequireTLS"), &field_value);
        }
        if let Some(ref field_value) = obj.role_arn {
            params.put(&format!("{}{}", prefix, "RoleArn"), &field_value);
        }
        if let Some(ref field_value) = obj.security_groups {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroups"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBProxyResponse {
    /// <p>The <code>DBProxy</code> object representing the new settings for the proxy.</p>
    pub db_proxy: Option<DBProxy>,
}

#[allow(dead_code)]
struct ModifyDBProxyResponseDeserializer;
impl ModifyDBProxyResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBProxyResponse, XmlParseError> {
        deserialize_elements::<_, ModifyDBProxyResponse, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBProxy" => {
                    obj.db_proxy = Some(DBProxyDeserializer::deserialize("DBProxy", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBProxyTargetGroupRequest {
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub connection_pool_config: Option<ConnectionPoolConfiguration>,
    /// <p>The name of the new proxy to which to assign the target group.</p>
    pub db_proxy_name: String,
    /// <p>The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_name: Option<String>,
    /// <p>The name of the new target group to assign to the proxy.</p>
    pub target_group_name: String,
}

/// Serialize `ModifyDBProxyTargetGroupRequest` contents to a `SignedRequest`.
struct ModifyDBProxyTargetGroupRequestSerializer;
impl ModifyDBProxyTargetGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBProxyTargetGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.connection_pool_config {
            ConnectionPoolConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ConnectionPoolConfig"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.new_name {
            params.put(&format!("{}{}", prefix, "NewName"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetGroupName"),
            &obj.target_group_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBProxyTargetGroupResponse {
    /// <p>The settings of the modified <code>DBProxyTarget</code>.</p>
    pub db_proxy_target_group: Option<DBProxyTargetGroup>,
}

#[allow(dead_code)]
struct ModifyDBProxyTargetGroupResponseDeserializer;
impl ModifyDBProxyTargetGroupResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBProxyTargetGroupResponse, XmlParseError> {
        deserialize_elements::<_, ModifyDBProxyTargetGroupResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyTargetGroup" => {
                        obj.db_proxy_target_group =
                            Some(DBProxyTargetGroupDeserializer::deserialize(
                                "DBProxyTargetGroup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBSnapshotAttributeMessage {
    /// <p><p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p> <note> <p>To view the list of attributes available to modify, use the <a>DescribeDBSnapshotAttributes</a> API action.</p> </note></p>
    pub attribute_name: String,
    /// <p>The identifier for the DB snapshot to modify the attributes for.</p>
    pub db_snapshot_identifier: String,
    /// <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account IDs, or <code>all</code> to make the manual DB snapshot restorable by any Amazon Web Services account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all Amazon Web Services accounts.</p>
    pub values_to_add: Option<Vec<String>>,
    /// <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account identifiers, or <code>all</code> to remove authorization for any Amazon Web Services account to copy or restore the DB snapshot. If you specify <code>all</code>, an Amazon Web Services account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
    pub values_to_remove: Option<Vec<String>>,
}

/// Serialize `ModifyDBSnapshotAttributeMessage` contents to a `SignedRequest`.
struct ModifyDBSnapshotAttributeMessageSerializer;
impl ModifyDBSnapshotAttributeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSnapshotAttributeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AttributeName"),
            &obj.attribute_name,
        );
        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.values_to_add {
            AttributeValueListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AttributeValue"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.values_to_remove {
            AttributeValueListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AttributeValue"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBSnapshotAttributeResult {
    pub db_snapshot_attributes_result: Option<DBSnapshotAttributesResult>,
}

#[allow(dead_code)]
struct ModifyDBSnapshotAttributeResultDeserializer;
impl ModifyDBSnapshotAttributeResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBSnapshotAttributeResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBSnapshotAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSnapshotAttributesResult" => {
                        obj.db_snapshot_attributes_result =
                            Some(DBSnapshotAttributesResultDeserializer::deserialize(
                                "DBSnapshotAttributesResult",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBSnapshotMessage {
    /// <p>The identifier of the DB snapshot to modify.</p>
    pub db_snapshot_identifier: String,
    /// <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
    pub engine_version: Option<String>,
    /// <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option group considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub option_group_name: Option<String>,
}

/// Serialize `ModifyDBSnapshotMessage` contents to a `SignedRequest`.
struct ModifyDBSnapshotMessageSerializer;
impl ModifyDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

#[allow(dead_code)]
struct ModifyDBSnapshotResultDeserializer;
impl ModifyDBSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBSnapshotResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBSnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSnapshot" => {
                    obj.db_snapshot =
                        Some(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyDBSubnetGroupMessage {
    /// <p>The description for the DB subnet group.</p>
    pub db_subnet_group_description: Option<String>,
    /// <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: String,
    /// <p>The EC2 subnet IDs for the DB subnet group.</p>
    pub subnet_ids: Vec<String>,
}

/// Serialize `ModifyDBSubnetGroupMessage` contents to a `SignedRequest`.
struct ModifyDBSubnetGroupMessageSerializer;
impl ModifyDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_subnet_group_description {
            params.put(
                &format!("{}{}", prefix, "DBSubnetGroupDescription"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "DBSubnetGroupName"),
            &obj.db_subnet_group_name,
        );
        SubnetIdentifierListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SubnetIdentifier"),
            &obj.subnet_ids,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyDBSubnetGroupResult {
    pub db_subnet_group: Option<DBSubnetGroup>,
}

#[allow(dead_code)]
struct ModifyDBSubnetGroupResultDeserializer;
impl ModifyDBSubnetGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyDBSubnetGroupResult, XmlParseError> {
        deserialize_elements::<_, ModifyDBSubnetGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSubnetGroup" => {
                        obj.db_subnet_group = Some(DBSubnetGroupDeserializer::deserialize(
                            "DBSubnetGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyEventSubscriptionMessage {
    /// <p> A value that indicates whether to activate the subscription. </p>
    pub enabled: Option<bool>,
    /// <p> A list of event categories for a source type (<code>SourceType</code>) that you want to subscribe to. You can see a list of the categories for a given source type in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation. </p>
    pub event_categories: Option<Vec<String>>,
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub sns_topic_arn: Option<String>,
    /// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
    pub source_type: Option<String>,
    /// <p>The name of the RDS event notification subscription.</p>
    pub subscription_name: String,
}

/// Serialize `ModifyEventSubscriptionMessage` contents to a `SignedRequest`.
struct ModifyEventSubscriptionMessageSerializer;
impl ModifyEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EventCategory"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.sns_topic_arn {
            params.put(&format!("{}{}", prefix, "SnsTopicArn"), &field_value);
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SubscriptionName"),
            &obj.subscription_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

#[allow(dead_code)]
struct ModifyEventSubscriptionResultDeserializer;
impl ModifyEventSubscriptionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyEventSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, ModifyEventSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscription" => {
                        obj.event_subscription = Some(EventSubscriptionDeserializer::deserialize(
                            "EventSubscription",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyGlobalClusterMessage {
    /// <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p> <p>If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version. Apply any custom parameter groups after completing the upgrade.</p>
    pub allow_major_version_upgrade: Option<bool>,
    /// <p> Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code> </p>
    pub engine_version: Option<String>,
    /// <p><p> The DB cluster identifier for the global cluster being modified. This parameter isn&#39;t case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul></p>
    pub global_cluster_identifier: Option<String>,
    /// <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
    pub new_global_cluster_identifier: Option<String>,
}

/// Serialize `ModifyGlobalClusterMessage` contents to a `SignedRequest`.
struct ModifyGlobalClusterMessageSerializer;
impl ModifyGlobalClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyGlobalClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allow_major_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AllowMajorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "GlobalClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.new_global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "NewGlobalClusterIdentifier"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyGlobalClusterResult {
    pub global_cluster: Option<GlobalCluster>,
}

#[allow(dead_code)]
struct ModifyGlobalClusterResultDeserializer;
impl ModifyGlobalClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyGlobalClusterResult, XmlParseError> {
        deserialize_elements::<_, ModifyGlobalClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "GlobalCluster" => {
                        obj.global_cluster = Some(GlobalClusterDeserializer::deserialize(
                            "GlobalCluster",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ModifyOptionGroupMessage {
    /// <p>A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.</p>
    pub apply_immediately: Option<bool>,
    /// <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: String,
    /// <p>Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.</p>
    pub options_to_include: Option<Vec<OptionConfiguration>>,
    /// <p>Options in this list are removed from the option group.</p>
    pub options_to_remove: Option<Vec<String>>,
}

/// Serialize `ModifyOptionGroupMessage` contents to a `SignedRequest`.
struct ModifyOptionGroupMessageSerializer;
impl ModifyOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "OptionGroupName"),
            &obj.option_group_name,
        );
        if let Some(ref field_value) = obj.options_to_include {
            OptionConfigurationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "OptionConfiguration"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.options_to_remove {
            OptionNamesListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "OptionsToRemove"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ModifyOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

#[allow(dead_code)]
struct ModifyOptionGroupResultDeserializer;
impl ModifyOptionGroupResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyOptionGroupResult, XmlParseError> {
        deserialize_elements::<_, ModifyOptionGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "OptionGroup" => {
                        obj.option_group =
                            Some(OptionGroupDeserializer::deserialize("OptionGroup", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Option details.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RDSOption {
    /// <p>If the option requires access to a port, then this DB security group allows access to the port.</p>
    pub db_security_group_memberships: Option<Vec<DBSecurityGroupMembership>>,
    /// <p>The description of the option.</p>
    pub option_description: Option<String>,
    /// <p>The name of the option.</p>
    pub option_name: Option<String>,
    /// <p>The option settings for this option.</p>
    pub option_settings: Option<Vec<OptionSetting>>,
    /// <p>The version of the option.</p>
    pub option_version: Option<String>,
    /// <p>Indicate if this option is permanent.</p>
    pub permanent: Option<bool>,
    /// <p>Indicate if this option is persistent.</p>
    pub persistent: Option<bool>,
    /// <p>If required, the port configured for this option to use.</p>
    pub port: Option<i64>,
    /// <p>If the option requires access to a port, then this VPC security group allows access to the port.</p>
    pub vpc_security_group_memberships: Option<Vec<VpcSecurityGroupMembership>>,
}

#[allow(dead_code)]
struct RDSOptionDeserializer;
impl RDSOptionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RDSOption, XmlParseError> {
        deserialize_elements::<_, RDSOption, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBSecurityGroupMemberships" => {
                    obj.db_security_group_memberships
                        .get_or_insert(vec![])
                        .extend(DBSecurityGroupMembershipListDeserializer::deserialize(
                            "DBSecurityGroupMemberships",
                            stack,
                        )?);
                }
                "OptionDescription" => {
                    obj.option_description =
                        Some(StringDeserializer::deserialize("OptionDescription", stack)?);
                }
                "OptionName" => {
                    obj.option_name = Some(StringDeserializer::deserialize("OptionName", stack)?);
                }
                "OptionSettings" => {
                    obj.option_settings.get_or_insert(vec![]).extend(
                        OptionSettingConfigurationListDeserializer::deserialize(
                            "OptionSettings",
                            stack,
                        )?,
                    );
                }
                "OptionVersion" => {
                    obj.option_version =
                        Some(StringDeserializer::deserialize("OptionVersion", stack)?);
                }
                "Permanent" => {
                    obj.permanent = Some(BooleanDeserializer::deserialize("Permanent", stack)?);
                }
                "Persistent" => {
                    obj.persistent = Some(BooleanDeserializer::deserialize("Persistent", stack)?);
                }
                "Port" => {
                    obj.port = Some(IntegerOptionalDeserializer::deserialize("Port", stack)?);
                }
                "VpcSecurityGroupMemberships" => {
                    obj.vpc_security_group_memberships
                        .get_or_insert(vec![])
                        .extend(VpcSecurityGroupMembershipListDeserializer::deserialize(
                            "VpcSecurityGroupMemberships",
                            stack,
                        )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>A list of all available options</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct OptionConfiguration {
    /// <p>A list of DBSecurityGroupMembership name strings used for this option.</p>
    pub db_security_group_memberships: Option<Vec<String>>,
    /// <p>The configuration of options to include in a group.</p>
    pub option_name: String,
    /// <p>The option settings to include in an option group.</p>
    pub option_settings: Option<Vec<OptionSetting>>,
    /// <p>The version for the option.</p>
    pub option_version: Option<String>,
    /// <p>The optional port for the option.</p>
    pub port: Option<i64>,
    /// <p>A list of VpcSecurityGroupMembership name strings used for this option.</p>
    pub vpc_security_group_memberships: Option<Vec<String>>,
}

/// Serialize `OptionConfiguration` contents to a `SignedRequest`.
struct OptionConfigurationSerializer;
impl OptionConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &OptionConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_security_group_memberships {
            DBSecurityGroupNameListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBSecurityGroupName"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "OptionName"), &obj.option_name);
        if let Some(ref field_value) = obj.option_settings {
            OptionSettingsListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "OptionSetting"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.option_version {
            params.put(&format!("{}{}", prefix, "OptionVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_memberships {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

/// Serialize `OptionConfigurationList` contents to a `SignedRequest`.
struct OptionConfigurationListSerializer;
impl OptionConfigurationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<OptionConfiguration>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            OptionConfigurationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroup {
    /// <p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances. </p>
    pub allows_vpc_and_non_vpc_instance_memberships: Option<bool>,
    /// <p>Indicates the name of the engine that this option group can be applied to.</p>
    pub engine_name: Option<String>,
    /// <p>Indicates the major engine version associated with this option group.</p>
    pub major_engine_version: Option<String>,
    /// <p>The Amazon Resource Name (ARN) for the option group.</p>
    pub option_group_arn: Option<String>,
    /// <p>Provides a description of the option group.</p>
    pub option_group_description: Option<String>,
    /// <p>Specifies the name of the option group.</p>
    pub option_group_name: Option<String>,
    /// <p>Indicates what options are available in the option group.</p>
    pub options: Option<Vec<RDSOption>>,
    /// <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field. </p>
    pub vpc_id: Option<String>,
}

#[allow(dead_code)]
struct OptionGroupDeserializer;
impl OptionGroupDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroup, XmlParseError> {
        deserialize_elements::<_, OptionGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllowsVpcAndNonVpcInstanceMemberships" => {
                    obj.allows_vpc_and_non_vpc_instance_memberships =
                        Some(BooleanDeserializer::deserialize(
                            "AllowsVpcAndNonVpcInstanceMemberships",
                            stack,
                        )?);
                }
                "EngineName" => {
                    obj.engine_name = Some(StringDeserializer::deserialize("EngineName", stack)?);
                }
                "MajorEngineVersion" => {
                    obj.major_engine_version = Some(StringDeserializer::deserialize(
                        "MajorEngineVersion",
                        stack,
                    )?);
                }
                "OptionGroupArn" => {
                    obj.option_group_arn =
                        Some(StringDeserializer::deserialize("OptionGroupArn", stack)?);
                }
                "OptionGroupDescription" => {
                    obj.option_group_description = Some(StringDeserializer::deserialize(
                        "OptionGroupDescription",
                        stack,
                    )?);
                }
                "OptionGroupName" => {
                    obj.option_group_name =
                        Some(StringDeserializer::deserialize("OptionGroupName", stack)?);
                }
                "Options" => {
                    obj.options
                        .get_or_insert(vec![])
                        .extend(OptionsListDeserializer::deserialize("Options", stack)?);
                }
                "VpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("VpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Provides information on the option groups the DB instance is a member of.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroupMembership {
    /// <p>The name of the option group that the instance belongs to.</p>
    pub option_group_name: Option<String>,
    /// <p>The status of the DB instance's option group membership. Valid values are: <code>in-sync</code>, <code>pending-apply</code>, <code>pending-removal</code>, <code>pending-maintenance-apply</code>, <code>pending-maintenance-removal</code>, <code>applying</code>, <code>removing</code>, and <code>failed</code>. </p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct OptionGroupMembershipDeserializer;
impl OptionGroupMembershipDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroupMembership, XmlParseError> {
        deserialize_elements::<_, OptionGroupMembership, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "OptionGroupName" => {
                    obj.option_group_name =
                        Some(StringDeserializer::deserialize("OptionGroupName", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionGroupMembershipListDeserializer;
impl OptionGroupMembershipListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionGroupMembership>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionGroupMembership" {
                obj.push(OptionGroupMembershipDeserializer::deserialize(
                    "OptionGroupMembership",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Available option.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroupOption {
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub default_port: Option<i64>,
    /// <p>The description of the option.</p>
    pub description: Option<String>,
    /// <p>The name of the engine that this option can be applied to.</p>
    pub engine_name: Option<String>,
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub major_engine_version: Option<String>,
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub minimum_required_minor_engine_version: Option<String>,
    /// <p>The name of the option.</p>
    pub name: Option<String>,
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    pub option_group_option_settings: Option<Vec<OptionGroupOptionSetting>>,
    /// <p>The versions that are available for the option.</p>
    pub option_group_option_versions: Option<Vec<OptionVersion>>,
    /// <p>The options that conflict with this option.</p>
    pub options_conflicts_with: Option<Vec<String>>,
    /// <p>The options that are prerequisites for this option.</p>
    pub options_depended_on: Option<Vec<String>>,
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub permanent: Option<bool>,
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub persistent: Option<bool>,
    /// <p>Specifies whether the option requires a port.</p>
    pub port_required: Option<bool>,
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later. </p>
    pub requires_auto_minor_engine_version_upgrade: Option<bool>,
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available. </p>
    pub supports_option_version_downgrade: Option<bool>,
    /// <p>If true, you can only use this option with a DB instance that is in a VPC. </p>
    pub vpc_only: Option<bool>,
}

#[allow(dead_code)]
struct OptionGroupOptionDeserializer;
impl OptionGroupOptionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroupOption, XmlParseError> {
        deserialize_elements::<_, OptionGroupOption, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DefaultPort" => {
                    obj.default_port = Some(IntegerOptionalDeserializer::deserialize(
                        "DefaultPort",
                        stack,
                    )?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "EngineName" => {
                    obj.engine_name = Some(StringDeserializer::deserialize("EngineName", stack)?);
                }
                "MajorEngineVersion" => {
                    obj.major_engine_version = Some(StringDeserializer::deserialize(
                        "MajorEngineVersion",
                        stack,
                    )?);
                }
                "MinimumRequiredMinorEngineVersion" => {
                    obj.minimum_required_minor_engine_version =
                        Some(StringDeserializer::deserialize(
                            "MinimumRequiredMinorEngineVersion",
                            stack,
                        )?);
                }
                "Name" => {
                    obj.name = Some(StringDeserializer::deserialize("Name", stack)?);
                }
                "OptionGroupOptionSettings" => {
                    obj.option_group_option_settings
                        .get_or_insert(vec![])
                        .extend(OptionGroupOptionSettingsListDeserializer::deserialize(
                            "OptionGroupOptionSettings",
                            stack,
                        )?);
                }
                "OptionGroupOptionVersions" => {
                    obj.option_group_option_versions
                        .get_or_insert(vec![])
                        .extend(OptionGroupOptionVersionsListDeserializer::deserialize(
                            "OptionGroupOptionVersions",
                            stack,
                        )?);
                }
                "OptionsConflictsWith" => {
                    obj.options_conflicts_with.get_or_insert(vec![]).extend(
                        OptionsConflictsWithDeserializer::deserialize(
                            "OptionsConflictsWith",
                            stack,
                        )?,
                    );
                }
                "OptionsDependedOn" => {
                    obj.options_depended_on.get_or_insert(vec![]).extend(
                        OptionsDependedOnDeserializer::deserialize("OptionsDependedOn", stack)?,
                    );
                }
                "Permanent" => {
                    obj.permanent = Some(BooleanDeserializer::deserialize("Permanent", stack)?);
                }
                "Persistent" => {
                    obj.persistent = Some(BooleanDeserializer::deserialize("Persistent", stack)?);
                }
                "PortRequired" => {
                    obj.port_required =
                        Some(BooleanDeserializer::deserialize("PortRequired", stack)?);
                }
                "RequiresAutoMinorEngineVersionUpgrade" => {
                    obj.requires_auto_minor_engine_version_upgrade =
                        Some(BooleanDeserializer::deserialize(
                            "RequiresAutoMinorEngineVersionUpgrade",
                            stack,
                        )?);
                }
                "SupportsOptionVersionDowngrade" => {
                    obj.supports_option_version_downgrade =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "SupportsOptionVersionDowngrade",
                            stack,
                        )?);
                }
                "VpcOnly" => {
                    obj.vpc_only = Some(BooleanDeserializer::deserialize("VpcOnly", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Option group option settings are used to display settings available for each option with their default values and other information. These values are used with the DescribeOptionGroupOptions action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroupOptionSetting {
    /// <p>Indicates the acceptable values for the option group option.</p>
    pub allowed_values: Option<String>,
    /// <p>The DB engine specific parameter type for the option group option.</p>
    pub apply_type: Option<String>,
    /// <p>The default value for the option group option.</p>
    pub default_value: Option<String>,
    /// <p>Boolean value where true indicates that this option group option can be changed from the default value.</p>
    pub is_modifiable: Option<bool>,
    /// <p>Boolean value where true indicates that a value must be specified for this option setting of the option group option.</p>
    pub is_required: Option<bool>,
    /// <p>The minimum DB engine version required for the corresponding allowed value for this option setting.</p>
    pub minimum_engine_version_per_allowed_value: Option<Vec<MinimumEngineVersionPerAllowedValue>>,
    /// <p>The description of the option group option.</p>
    pub setting_description: Option<String>,
    /// <p>The name of the option group option.</p>
    pub setting_name: Option<String>,
}

#[allow(dead_code)]
struct OptionGroupOptionSettingDeserializer;
impl OptionGroupOptionSettingDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroupOptionSetting, XmlParseError> {
        deserialize_elements::<_, OptionGroupOptionSetting, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AllowedValues" => {
                        obj.allowed_values =
                            Some(StringDeserializer::deserialize("AllowedValues", stack)?);
                    }
                    "ApplyType" => {
                        obj.apply_type = Some(StringDeserializer::deserialize("ApplyType", stack)?);
                    }
                    "DefaultValue" => {
                        obj.default_value =
                            Some(StringDeserializer::deserialize("DefaultValue", stack)?);
                    }
                    "IsModifiable" => {
                        obj.is_modifiable =
                            Some(BooleanDeserializer::deserialize("IsModifiable", stack)?);
                    }
                    "IsRequired" => {
                        obj.is_required =
                            Some(BooleanDeserializer::deserialize("IsRequired", stack)?);
                    }
                    "MinimumEngineVersionPerAllowedValue" => {
                        obj.minimum_engine_version_per_allowed_value
                            .get_or_insert(vec![])
                            .extend(
                                MinimumEngineVersionPerAllowedValueListDeserializer::deserialize(
                                    "MinimumEngineVersionPerAllowedValue",
                                    stack,
                                )?,
                            );
                    }
                    "SettingDescription" => {
                        obj.setting_description = Some(StringDeserializer::deserialize(
                            "SettingDescription",
                            stack,
                        )?);
                    }
                    "SettingName" => {
                        obj.setting_name =
                            Some(StringDeserializer::deserialize("SettingName", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct OptionGroupOptionSettingsListDeserializer;
impl OptionGroupOptionSettingsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionGroupOptionSetting>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionGroupOptionSetting" {
                obj.push(OptionGroupOptionSettingDeserializer::deserialize(
                    "OptionGroupOptionSetting",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionGroupOptionVersionsListDeserializer;
impl OptionGroupOptionVersionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionVersion>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionVersion" {
                obj.push(OptionVersionDeserializer::deserialize(
                    "OptionVersion",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionGroupOptionsListDeserializer;
impl OptionGroupOptionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionGroupOption>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionGroupOption" {
                obj.push(OptionGroupOptionDeserializer::deserialize(
                    "OptionGroupOption",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroupOptionsMessage {
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: Option<String>,
    pub option_group_options: Option<Vec<OptionGroupOption>>,
}

#[allow(dead_code)]
struct OptionGroupOptionsMessageDeserializer;
impl OptionGroupOptionsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroupOptionsMessage, XmlParseError> {
        deserialize_elements::<_, OptionGroupOptionsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "OptionGroupOptions" => {
                        obj.option_group_options.get_or_insert(vec![]).extend(
                            OptionGroupOptionsListDeserializer::deserialize(
                                "OptionGroupOptions",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>List of option groups.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionGroups {
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>List of option groups.</p>
    pub option_groups_list: Option<Vec<OptionGroup>>,
}

#[allow(dead_code)]
struct OptionGroupsDeserializer;
impl OptionGroupsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionGroups, XmlParseError> {
        deserialize_elements::<_, OptionGroups, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                "OptionGroupsList" => {
                    obj.option_groups_list.get_or_insert(vec![]).extend(
                        OptionGroupsListDeserializer::deserialize("OptionGroupsList", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionGroupsListDeserializer;
impl OptionGroupsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionGroup" {
                obj.push(OptionGroupDeserializer::deserialize("OptionGroup", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `OptionNamesList` contents to a `SignedRequest`.
struct OptionNamesListSerializer;
impl OptionNamesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct OptionSetting {
    /// <p>The allowed values of the option setting.</p>
    pub allowed_values: Option<String>,
    /// <p>The DB engine specific parameter type.</p>
    pub apply_type: Option<String>,
    /// <p>The data type of the option setting.</p>
    pub data_type: Option<String>,
    /// <p>The default value of the option setting.</p>
    pub default_value: Option<String>,
    /// <p>The description of the option setting.</p>
    pub description: Option<String>,
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub is_collection: Option<bool>,
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub is_modifiable: Option<bool>,
    /// <p>The name of the option that has settings that you can set.</p>
    pub name: Option<String>,
    /// <p>The current value of the option setting.</p>
    pub value: Option<String>,
}

#[allow(dead_code)]
struct OptionSettingDeserializer;
impl OptionSettingDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionSetting, XmlParseError> {
        deserialize_elements::<_, OptionSetting, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllowedValues" => {
                    obj.allowed_values =
                        Some(StringDeserializer::deserialize("AllowedValues", stack)?);
                }
                "ApplyType" => {
                    obj.apply_type = Some(StringDeserializer::deserialize("ApplyType", stack)?);
                }
                "DataType" => {
                    obj.data_type = Some(StringDeserializer::deserialize("DataType", stack)?);
                }
                "DefaultValue" => {
                    obj.default_value =
                        Some(StringDeserializer::deserialize("DefaultValue", stack)?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "IsCollection" => {
                    obj.is_collection =
                        Some(BooleanDeserializer::deserialize("IsCollection", stack)?);
                }
                "IsModifiable" => {
                    obj.is_modifiable =
                        Some(BooleanDeserializer::deserialize("IsModifiable", stack)?);
                }
                "Name" => {
                    obj.name = Some(StringDeserializer::deserialize("Name", stack)?);
                }
                "Value" => {
                    obj.value = Some(StringDeserializer::deserialize("Value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `OptionSetting` contents to a `SignedRequest`.
struct OptionSettingSerializer;
impl OptionSettingSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &OptionSetting) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allowed_values {
            params.put(&format!("{}{}", prefix, "AllowedValues"), &field_value);
        }
        if let Some(ref field_value) = obj.apply_type {
            params.put(&format!("{}{}", prefix, "ApplyType"), &field_value);
        }
        if let Some(ref field_value) = obj.data_type {
            params.put(&format!("{}{}", prefix, "DataType"), &field_value);
        }
        if let Some(ref field_value) = obj.default_value {
            params.put(&format!("{}{}", prefix, "DefaultValue"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.is_collection {
            params.put(&format!("{}{}", prefix, "IsCollection"), &field_value);
        }
        if let Some(ref field_value) = obj.is_modifiable {
            params.put(&format!("{}{}", prefix, "IsModifiable"), &field_value);
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

#[allow(dead_code)]
struct OptionSettingConfigurationListDeserializer;
impl OptionSettingConfigurationListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OptionSetting>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionSetting" {
                obj.push(OptionSettingDeserializer::deserialize(
                    "OptionSetting",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `OptionSettingsList` contents to a `SignedRequest`.
struct OptionSettingsListSerializer;
impl OptionSettingsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<OptionSetting>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            OptionSettingSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>The version for an option. Option group option versions are returned by the <code>DescribeOptionGroupOptions</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OptionVersion {
    /// <p>True if the version is the default version of the option, and otherwise false.</p>
    pub is_default: Option<bool>,
    /// <p>The version of the option.</p>
    pub version: Option<String>,
}

#[allow(dead_code)]
struct OptionVersionDeserializer;
impl OptionVersionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OptionVersion, XmlParseError> {
        deserialize_elements::<_, OptionVersion, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "IsDefault" => {
                    obj.is_default = Some(BooleanDeserializer::deserialize("IsDefault", stack)?);
                }
                "Version" => {
                    obj.version = Some(StringDeserializer::deserialize("Version", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionsConflictsWithDeserializer;
impl OptionsConflictsWithDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionConflictName" {
                obj.push(StringDeserializer::deserialize(
                    "OptionConflictName",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionsDependedOnDeserializer;
impl OptionsDependedOnDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OptionName" {
                obj.push(StringDeserializer::deserialize("OptionName", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct OptionsListDeserializer;
impl OptionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<RDSOption>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Option" {
                obj.push(RDSOptionDeserializer::deserialize("Option", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains a list of available options for a DB instance.</p> <p> This data type is used as a response element in the <code>DescribeOrderableDBInstanceOptions</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OrderableDBInstanceOption {
    /// <p>The Availability Zone group for a DB instance.</p>
    pub availability_zone_group: Option<String>,
    /// <p>A list of Availability Zones for a DB instance.</p>
    pub availability_zones: Option<Vec<AvailabilityZone>>,
    /// <p>A list of the available processor features for the DB instance class of a DB instance.</p>
    pub available_processor_features: Option<Vec<AvailableProcessorFeature>>,
    /// <p>The DB instance class for a DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>The engine type of a DB instance.</p>
    pub engine: Option<String>,
    /// <p>The engine version of a DB instance.</p>
    pub engine_version: Option<String>,
    /// <p>The license model for a DB instance.</p>
    pub license_model: Option<String>,
    /// <p>Maximum total provisioned IOPS for a DB instance.</p>
    pub max_iops_per_db_instance: Option<i64>,
    /// <p>Maximum provisioned IOPS per GiB for a DB instance.</p>
    pub max_iops_per_gib: Option<f64>,
    /// <p>Maximum storage size for a DB instance.</p>
    pub max_storage_size: Option<i64>,
    /// <p>Minimum total provisioned IOPS for a DB instance.</p>
    pub min_iops_per_db_instance: Option<i64>,
    /// <p>Minimum provisioned IOPS per GiB for a DB instance.</p>
    pub min_iops_per_gib: Option<f64>,
    /// <p>Minimum storage size for a DB instance.</p>
    pub min_storage_size: Option<i64>,
    /// <p>Indicates whether a DB instance is Multi-AZ capable.</p>
    pub multi_az_capable: Option<bool>,
    /// <p>Whether a DB instance supports RDS on Outposts.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub outpost_capable: Option<bool>,
    /// <p>Indicates whether a DB instance can have a read replica.</p>
    pub read_replica_capable: Option<bool>,
    /// <p>Indicates the storage type for a DB instance.</p>
    pub storage_type: Option<String>,
    /// <p>The list of supported modes for Database Activity Streams. Aurora PostgreSQL returns the value <code>[sync, async]</code>. Aurora MySQL and RDS for Oracle return <code>[async]</code> only. If Database Activity Streams isn't supported, the return value is an empty list.</p>
    pub supported_activity_stream_modes: Option<Vec<String>>,
    /// <p>A list of the supported DB engine modes.</p>
    pub supported_engine_modes: Option<Vec<String>>,
    /// <p>Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.</p>
    pub supports_enhanced_monitoring: Option<bool>,
    /// <p>A value that indicates whether you can use Aurora global databases with a specific combination of other DB engine attributes.</p>
    pub supports_global_databases: Option<bool>,
    /// <p>Indicates whether a DB instance supports IAM database authentication.</p>
    pub supports_iam_database_authentication: Option<bool>,
    /// <p>Indicates whether a DB instance supports provisioned IOPS.</p>
    pub supports_iops: Option<bool>,
    /// <p>Whether a DB instance supports Kerberos Authentication.</p>
    pub supports_kerberos_authentication: Option<bool>,
    /// <p>True if a DB instance supports Performance Insights, otherwise false.</p>
    pub supports_performance_insights: Option<bool>,
    /// <p>Whether Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.</p>
    pub supports_storage_autoscaling: Option<bool>,
    /// <p>Indicates whether a DB instance supports encrypted storage.</p>
    pub supports_storage_encryption: Option<bool>,
    /// <p>Indicates whether a DB instance is in a VPC.</p>
    pub vpc: Option<bool>,
}

#[allow(dead_code)]
struct OrderableDBInstanceOptionDeserializer;
impl OrderableDBInstanceOptionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OrderableDBInstanceOption, XmlParseError> {
        deserialize_elements::<_, OrderableDBInstanceOption, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AvailabilityZoneGroup" => {
                        obj.availability_zone_group = Some(StringDeserializer::deserialize(
                            "AvailabilityZoneGroup",
                            stack,
                        )?);
                    }
                    "AvailabilityZones" => {
                        obj.availability_zones.get_or_insert(vec![]).extend(
                            AvailabilityZoneListDeserializer::deserialize(
                                "AvailabilityZones",
                                stack,
                            )?,
                        );
                    }
                    "AvailableProcessorFeatures" => {
                        obj.available_processor_features
                            .get_or_insert(vec![])
                            .extend(AvailableProcessorFeatureListDeserializer::deserialize(
                                "AvailableProcessorFeatures",
                                stack,
                            )?);
                    }
                    "DBInstanceClass" => {
                        obj.db_instance_class =
                            Some(StringDeserializer::deserialize("DBInstanceClass", stack)?);
                    }
                    "Engine" => {
                        obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                    }
                    "EngineVersion" => {
                        obj.engine_version =
                            Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                    }
                    "LicenseModel" => {
                        obj.license_model =
                            Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                    }
                    "MaxIopsPerDbInstance" => {
                        obj.max_iops_per_db_instance =
                            Some(IntegerOptionalDeserializer::deserialize(
                                "MaxIopsPerDbInstance",
                                stack,
                            )?);
                    }
                    "MaxIopsPerGib" => {
                        obj.max_iops_per_gib = Some(DoubleOptionalDeserializer::deserialize(
                            "MaxIopsPerGib",
                            stack,
                        )?);
                    }
                    "MaxStorageSize" => {
                        obj.max_storage_size = Some(IntegerOptionalDeserializer::deserialize(
                            "MaxStorageSize",
                            stack,
                        )?);
                    }
                    "MinIopsPerDbInstance" => {
                        obj.min_iops_per_db_instance =
                            Some(IntegerOptionalDeserializer::deserialize(
                                "MinIopsPerDbInstance",
                                stack,
                            )?);
                    }
                    "MinIopsPerGib" => {
                        obj.min_iops_per_gib = Some(DoubleOptionalDeserializer::deserialize(
                            "MinIopsPerGib",
                            stack,
                        )?);
                    }
                    "MinStorageSize" => {
                        obj.min_storage_size = Some(IntegerOptionalDeserializer::deserialize(
                            "MinStorageSize",
                            stack,
                        )?);
                    }
                    "MultiAZCapable" => {
                        obj.multi_az_capable =
                            Some(BooleanDeserializer::deserialize("MultiAZCapable", stack)?);
                    }
                    "OutpostCapable" => {
                        obj.outpost_capable =
                            Some(BooleanDeserializer::deserialize("OutpostCapable", stack)?);
                    }
                    "ReadReplicaCapable" => {
                        obj.read_replica_capable = Some(BooleanDeserializer::deserialize(
                            "ReadReplicaCapable",
                            stack,
                        )?);
                    }
                    "StorageType" => {
                        obj.storage_type =
                            Some(StringDeserializer::deserialize("StorageType", stack)?);
                    }
                    "SupportedActivityStreamModes" => {
                        obj.supported_activity_stream_modes
                            .get_or_insert(vec![])
                            .extend(ActivityStreamModeListDeserializer::deserialize(
                                "SupportedActivityStreamModes",
                                stack,
                            )?);
                    }
                    "SupportedEngineModes" => {
                        obj.supported_engine_modes.get_or_insert(vec![]).extend(
                            EngineModeListDeserializer::deserialize("SupportedEngineModes", stack)?,
                        );
                    }
                    "SupportsEnhancedMonitoring" => {
                        obj.supports_enhanced_monitoring = Some(BooleanDeserializer::deserialize(
                            "SupportsEnhancedMonitoring",
                            stack,
                        )?);
                    }
                    "SupportsGlobalDatabases" => {
                        obj.supports_global_databases = Some(BooleanDeserializer::deserialize(
                            "SupportsGlobalDatabases",
                            stack,
                        )?);
                    }
                    "SupportsIAMDatabaseAuthentication" => {
                        obj.supports_iam_database_authentication =
                            Some(BooleanDeserializer::deserialize(
                                "SupportsIAMDatabaseAuthentication",
                                stack,
                            )?);
                    }
                    "SupportsIops" => {
                        obj.supports_iops =
                            Some(BooleanDeserializer::deserialize("SupportsIops", stack)?);
                    }
                    "SupportsKerberosAuthentication" => {
                        obj.supports_kerberos_authentication =
                            Some(BooleanOptionalDeserializer::deserialize(
                                "SupportsKerberosAuthentication",
                                stack,
                            )?);
                    }
                    "SupportsPerformanceInsights" => {
                        obj.supports_performance_insights = Some(BooleanDeserializer::deserialize(
                            "SupportsPerformanceInsights",
                            stack,
                        )?);
                    }
                    "SupportsStorageAutoscaling" => {
                        obj.supports_storage_autoscaling =
                            Some(BooleanOptionalDeserializer::deserialize(
                                "SupportsStorageAutoscaling",
                                stack,
                            )?);
                    }
                    "SupportsStorageEncryption" => {
                        obj.supports_storage_encryption = Some(BooleanDeserializer::deserialize(
                            "SupportsStorageEncryption",
                            stack,
                        )?);
                    }
                    "Vpc" => {
                        obj.vpc = Some(BooleanDeserializer::deserialize("Vpc", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct OrderableDBInstanceOptionsListDeserializer;
impl OrderableDBInstanceOptionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<OrderableDBInstanceOption>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "OrderableDBInstanceOption" {
                obj.push(OrderableDBInstanceOptionDeserializer::deserialize(
                    "OrderableDBInstanceOption",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeOrderableDBInstanceOptions</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct OrderableDBInstanceOptionsMessage {
    /// <p> An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>
    pub marker: Option<String>,
    /// <p>An <code>OrderableDBInstanceOption</code> structure containing information about orderable options for the DB instance.</p>
    pub orderable_db_instance_options: Option<Vec<OrderableDBInstanceOption>>,
}

#[allow(dead_code)]
struct OrderableDBInstanceOptionsMessageDeserializer;
impl OrderableDBInstanceOptionsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OrderableDBInstanceOptionsMessage, XmlParseError> {
        deserialize_elements::<_, OrderableDBInstanceOptionsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "OrderableDBInstanceOptions" => {
                        obj.orderable_db_instance_options
                            .get_or_insert(vec![])
                            .extend(OrderableDBInstanceOptionsListDeserializer::deserialize(
                                "OrderableDBInstanceOptions",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>A data type that represents an Outpost.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i> </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Outpost {
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub arn: Option<String>,
}

#[allow(dead_code)]
struct OutpostDeserializer;
impl OutpostDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Outpost, XmlParseError> {
        deserialize_elements::<_, Outpost, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Arn" => {
                    obj.arn = Some(StringDeserializer::deserialize("Arn", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> This data type is used as a request parameter in the <code>ModifyDBParameterGroup</code> and <code>ResetDBParameterGroup</code> actions. </p> <p>This data type is used as a response element in the <code>DescribeEngineDefaultParameters</code> and <code>DescribeDBParameters</code> actions.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct Parameter {
    /// <p>Specifies the valid range of values for the parameter.</p>
    pub allowed_values: Option<String>,
    /// <p>Indicates when to apply parameter updates.</p>
    pub apply_method: Option<String>,
    /// <p>Specifies the engine specific parameters type.</p>
    pub apply_type: Option<String>,
    /// <p>Specifies the valid data type for the parameter.</p>
    pub data_type: Option<String>,
    /// <p>Provides a description of the parameter.</p>
    pub description: Option<String>,
    /// <p> Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>
    pub is_modifiable: Option<bool>,
    /// <p>The earliest engine version to which the parameter can apply.</p>
    pub minimum_engine_version: Option<String>,
    /// <p>Specifies the name of the parameter.</p>
    pub parameter_name: Option<String>,
    /// <p>Specifies the value of the parameter.</p>
    pub parameter_value: Option<String>,
    /// <p>Indicates the source of the parameter value.</p>
    pub source: Option<String>,
    /// <p>The valid DB engine modes.</p>
    pub supported_engine_modes: Option<Vec<String>>,
}

#[allow(dead_code)]
struct ParameterDeserializer;
impl ParameterDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Parameter, XmlParseError> {
        deserialize_elements::<_, Parameter, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllowedValues" => {
                    obj.allowed_values =
                        Some(StringDeserializer::deserialize("AllowedValues", stack)?);
                }
                "ApplyMethod" => {
                    obj.apply_method =
                        Some(ApplyMethodDeserializer::deserialize("ApplyMethod", stack)?);
                }
                "ApplyType" => {
                    obj.apply_type = Some(StringDeserializer::deserialize("ApplyType", stack)?);
                }
                "DataType" => {
                    obj.data_type = Some(StringDeserializer::deserialize("DataType", stack)?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "IsModifiable" => {
                    obj.is_modifiable =
                        Some(BooleanDeserializer::deserialize("IsModifiable", stack)?);
                }
                "MinimumEngineVersion" => {
                    obj.minimum_engine_version = Some(StringDeserializer::deserialize(
                        "MinimumEngineVersion",
                        stack,
                    )?);
                }
                "ParameterName" => {
                    obj.parameter_name =
                        Some(StringDeserializer::deserialize("ParameterName", stack)?);
                }
                "ParameterValue" => {
                    obj.parameter_value =
                        Some(StringDeserializer::deserialize("ParameterValue", stack)?);
                }
                "Source" => {
                    obj.source = Some(StringDeserializer::deserialize("Source", stack)?);
                }
                "SupportedEngineModes" => {
                    obj.supported_engine_modes.get_or_insert(vec![]).extend(
                        EngineModeListDeserializer::deserialize("SupportedEngineModes", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Parameter` contents to a `SignedRequest`.
struct ParameterSerializer;
impl ParameterSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Parameter) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allowed_values {
            params.put(&format!("{}{}", prefix, "AllowedValues"), &field_value);
        }
        if let Some(ref field_value) = obj.apply_method {
            params.put(&format!("{}{}", prefix, "ApplyMethod"), &field_value);
        }
        if let Some(ref field_value) = obj.apply_type {
            params.put(&format!("{}{}", prefix, "ApplyType"), &field_value);
        }
        if let Some(ref field_value) = obj.data_type {
            params.put(&format!("{}{}", prefix, "DataType"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.is_modifiable {
            params.put(&format!("{}{}", prefix, "IsModifiable"), &field_value);
        }
        if let Some(ref field_value) = obj.minimum_engine_version {
            params.put(
                &format!("{}{}", prefix, "MinimumEngineVersion"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.parameter_name {
            params.put(&format!("{}{}", prefix, "ParameterName"), &field_value);
        }
        if let Some(ref field_value) = obj.parameter_value {
            params.put(&format!("{}{}", prefix, "ParameterValue"), &field_value);
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"), &field_value);
        }
        if let Some(ref field_value) = obj.supported_engine_modes {
            EngineModeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SupportedEngineModes"),
                field_value,
            );
        }
    }
}

#[allow(dead_code)]
struct ParametersListDeserializer;
impl ParametersListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Parameter>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Parameter" {
                obj.push(ParameterDeserializer::deserialize("Parameter", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ParametersList` contents to a `SignedRequest`.
struct ParametersListSerializer;
impl ParametersListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Parameter>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            ParameterSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PendingCloudwatchLogsExports {
    /// <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
    pub log_types_to_disable: Option<Vec<String>>,
    /// <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
    pub log_types_to_enable: Option<Vec<String>>,
}

#[allow(dead_code)]
struct PendingCloudwatchLogsExportsDeserializer;
impl PendingCloudwatchLogsExportsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PendingCloudwatchLogsExports, XmlParseError> {
        deserialize_elements::<_, PendingCloudwatchLogsExports, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "LogTypesToDisable" => {
                        obj.log_types_to_disable.get_or_insert(vec![]).extend(
                            LogTypeListDeserializer::deserialize("LogTypesToDisable", stack)?,
                        );
                    }
                    "LogTypesToEnable" => {
                        obj.log_types_to_enable.get_or_insert(vec![]).extend(
                            LogTypeListDeserializer::deserialize("LogTypesToEnable", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Provides information about a pending maintenance action for a resource.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PendingMaintenanceAction {
    /// <p>The type of pending maintenance action that is available for the resource. Valid actions are <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, and <code>ca-certificate-rotation</code>.</p>
    pub action: Option<String>,
    /// <p>The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date.</p>
    pub auto_applied_after_date: Option<String>,
    /// <p>The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the <code>ApplyPendingMaintenanceAction</code> API, the <code>AutoAppliedAfterDate</code>, and the <code>ForcedApplyDate</code>. This value is blank if an opt-in request has not been received and nothing has been specified as <code>AutoAppliedAfterDate</code> or <code>ForcedApplyDate</code>.</p>
    pub current_apply_date: Option<String>,
    /// <p>A description providing more detail about the maintenance action.</p>
    pub description: Option<String>,
    /// <p>The date when the maintenance action is automatically applied.</p> <p>On this date, the maintenance action is applied to the resource as soon as possible, regardless of the maintenance window for the resource. There might be a delay of one or more days from this date before the maintenance action is applied.</p>
    pub forced_apply_date: Option<String>,
    /// <p>Indicates the type of opt-in request that has been received for the resource.</p>
    pub opt_in_status: Option<String>,
}

#[allow(dead_code)]
struct PendingMaintenanceActionDeserializer;
impl PendingMaintenanceActionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PendingMaintenanceAction, XmlParseError> {
        deserialize_elements::<_, PendingMaintenanceAction, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Action" => {
                        obj.action = Some(StringDeserializer::deserialize("Action", stack)?);
                    }
                    "AutoAppliedAfterDate" => {
                        obj.auto_applied_after_date = Some(TStampDeserializer::deserialize(
                            "AutoAppliedAfterDate",
                            stack,
                        )?);
                    }
                    "CurrentApplyDate" => {
                        obj.current_apply_date =
                            Some(TStampDeserializer::deserialize("CurrentApplyDate", stack)?);
                    }
                    "Description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("Description", stack)?);
                    }
                    "ForcedApplyDate" => {
                        obj.forced_apply_date =
                            Some(TStampDeserializer::deserialize("ForcedApplyDate", stack)?);
                    }
                    "OptInStatus" => {
                        obj.opt_in_status =
                            Some(StringDeserializer::deserialize("OptInStatus", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct PendingMaintenanceActionDetailsDeserializer;
impl PendingMaintenanceActionDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PendingMaintenanceAction>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "PendingMaintenanceAction" {
                obj.push(PendingMaintenanceActionDeserializer::deserialize(
                    "PendingMaintenanceAction",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct PendingMaintenanceActionsDeserializer;
impl PendingMaintenanceActionsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ResourcePendingMaintenanceActions>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ResourcePendingMaintenanceActions" {
                obj.push(ResourcePendingMaintenanceActionsDeserializer::deserialize(
                    "ResourcePendingMaintenanceActions",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Data returned from the <b>DescribePendingMaintenanceActions</b> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PendingMaintenanceActionsMessage {
    /// <p> An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>A list of the pending maintenance actions for the resource.</p>
    pub pending_maintenance_actions: Option<Vec<ResourcePendingMaintenanceActions>>,
}

#[allow(dead_code)]
struct PendingMaintenanceActionsMessageDeserializer;
impl PendingMaintenanceActionsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PendingMaintenanceActionsMessage, XmlParseError> {
        deserialize_elements::<_, PendingMaintenanceActionsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "PendingMaintenanceActions" => {
                        obj.pending_maintenance_actions
                            .get_or_insert(vec![])
                            .extend(PendingMaintenanceActionsDeserializer::deserialize(
                                "PendingMaintenanceActions",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p> This data type is used as a response element in the <code>ModifyDBInstance</code> operation and contains changes that will be applied during the next maintenance window. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PendingModifiedValues {
    /// <p>The allocated storage size for the DB instance specified in gibibytes .</p>
    pub allocated_storage: Option<i64>,
    /// <p>The number of days for which automated backups are retained.</p>
    pub backup_retention_period: Option<i64>,
    /// <p>The identifier of the CA certificate for the DB instance.</p>
    pub ca_certificate_identifier: Option<String>,
    /// <p>The name of the compute and memory capacity class for the DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>The database identifier for the DB instance.</p>
    pub db_instance_identifier: Option<String>,
    /// <p>The DB subnet group for the DB instance.</p>
    pub db_subnet_group_name: Option<String>,
    /// <p>The database engine version.</p>
    pub engine_version: Option<String>,
    /// <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub iam_database_authentication_enabled: Option<bool>,
    /// <p>The Provisioned IOPS value for the DB instance.</p>
    pub iops: Option<i64>,
    /// <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub license_model: Option<String>,
    /// <p>The master credentials for the DB instance.</p>
    pub master_user_password: Option<String>,
    /// <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
    pub multi_az: Option<bool>,
    pub pending_cloudwatch_logs_exports: Option<PendingCloudwatchLogsExports>,
    /// <p>The port for the DB instance.</p>
    pub port: Option<i64>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>The storage type of the DB instance.</p>
    pub storage_type: Option<String>,
}

#[allow(dead_code)]
struct PendingModifiedValuesDeserializer;
impl PendingModifiedValuesDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PendingModifiedValues, XmlParseError> {
        deserialize_elements::<_, PendingModifiedValues, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AllocatedStorage" => {
                    obj.allocated_storage = Some(IntegerOptionalDeserializer::deserialize(
                        "AllocatedStorage",
                        stack,
                    )?);
                }
                "BackupRetentionPeriod" => {
                    obj.backup_retention_period = Some(IntegerOptionalDeserializer::deserialize(
                        "BackupRetentionPeriod",
                        stack,
                    )?);
                }
                "CACertificateIdentifier" => {
                    obj.ca_certificate_identifier = Some(StringDeserializer::deserialize(
                        "CACertificateIdentifier",
                        stack,
                    )?);
                }
                "DBInstanceClass" => {
                    obj.db_instance_class =
                        Some(StringDeserializer::deserialize("DBInstanceClass", stack)?);
                }
                "DBInstanceIdentifier" => {
                    obj.db_instance_identifier = Some(StringDeserializer::deserialize(
                        "DBInstanceIdentifier",
                        stack,
                    )?);
                }
                "DBSubnetGroupName" => {
                    obj.db_subnet_group_name =
                        Some(StringDeserializer::deserialize("DBSubnetGroupName", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "IAMDatabaseAuthenticationEnabled" => {
                    obj.iam_database_authentication_enabled =
                        Some(BooleanOptionalDeserializer::deserialize(
                            "IAMDatabaseAuthenticationEnabled",
                            stack,
                        )?);
                }
                "Iops" => {
                    obj.iops = Some(IntegerOptionalDeserializer::deserialize("Iops", stack)?);
                }
                "LicenseModel" => {
                    obj.license_model =
                        Some(StringDeserializer::deserialize("LicenseModel", stack)?);
                }
                "MasterUserPassword" => {
                    obj.master_user_password = Some(StringDeserializer::deserialize(
                        "MasterUserPassword",
                        stack,
                    )?);
                }
                "MultiAZ" => {
                    obj.multi_az =
                        Some(BooleanOptionalDeserializer::deserialize("MultiAZ", stack)?);
                }
                "PendingCloudwatchLogsExports" => {
                    obj.pending_cloudwatch_logs_exports =
                        Some(PendingCloudwatchLogsExportsDeserializer::deserialize(
                            "PendingCloudwatchLogsExports",
                            stack,
                        )?);
                }
                "Port" => {
                    obj.port = Some(IntegerOptionalDeserializer::deserialize("Port", stack)?);
                }
                "ProcessorFeatures" => {
                    obj.processor_features.get_or_insert(vec![]).extend(
                        ProcessorFeatureListDeserializer::deserialize("ProcessorFeatures", stack)?,
                    );
                }
                "StorageType" => {
                    obj.storage_type = Some(StringDeserializer::deserialize("StorageType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the processor features of a DB instance class.</p> <p>To specify the number of CPU cores, use the <code>coreCount</code> feature name for the <code>Name</code> parameter. To specify the number of threads per core, use the <code>threadsPerCore</code> feature name for the <code>Name</code> parameter.</p> <p>You can set the processor features of the DB instance class for a DB instance when you call one of the following actions:</p> <ul> <li> <p> <code>CreateDBInstance</code> </p> </li> <li> <p> <code>ModifyDBInstance</code> </p> </li> <li> <p> <code>RestoreDBInstanceFromDBSnapshot</code> </p> </li> <li> <p> <code>RestoreDBInstanceFromS3</code> </p> </li> <li> <p> <code>RestoreDBInstanceToPointInTime</code> </p> </li> </ul> <p>You can view the valid processor values for a particular instance class by calling the <code>DescribeOrderableDBInstanceOptions</code> action and specifying the instance class for the <code>DBInstanceClass</code> parameter.</p> <p>In addition, you can use the following actions for DB instance class processor information:</p> <ul> <li> <p> <code>DescribeDBInstances</code> </p> </li> <li> <p> <code>DescribeDBSnapshots</code> </p> </li> <li> <p> <code>DescribeValidDBInstanceModifications</code> </p> </li> </ul> <p>If you call <code>DescribeDBInstances</code>, <code>ProcessorFeature</code> returns non-null values only if the following conditions are met:</p> <ul> <li> <p>You are accessing an Oracle DB instance.</p> </li> <li> <p>Your Oracle DB instance class supports configuring the number of CPU cores and threads per core.</p> </li> <li> <p>The current number CPU cores and threads is set to a non-default value.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring the Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide. </i> </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ProcessorFeature {
    /// <p>The name of the processor feature. Valid names are <code>coreCount</code> and <code>threadsPerCore</code>.</p>
    pub name: Option<String>,
    /// <p>The value of a processor feature name.</p>
    pub value: Option<String>,
}

#[allow(dead_code)]
struct ProcessorFeatureDeserializer;
impl ProcessorFeatureDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ProcessorFeature, XmlParseError> {
        deserialize_elements::<_, ProcessorFeature, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Name" => {
                    obj.name = Some(StringDeserializer::deserialize("Name", stack)?);
                }
                "Value" => {
                    obj.value = Some(StringDeserializer::deserialize("Value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ProcessorFeature` contents to a `SignedRequest`.
struct ProcessorFeatureSerializer;
impl ProcessorFeatureSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ProcessorFeature) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

#[allow(dead_code)]
struct ProcessorFeatureListDeserializer;
impl ProcessorFeatureListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ProcessorFeature>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ProcessorFeature" {
                obj.push(ProcessorFeatureDeserializer::deserialize(
                    "ProcessorFeature",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ProcessorFeatureList` contents to a `SignedRequest`.
struct ProcessorFeatureListSerializer;
impl ProcessorFeatureListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ProcessorFeature>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            ProcessorFeatureSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct PromoteReadReplicaDBClusterMessage {
    /// <p>The identifier of the DB cluster read replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster read replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
    pub db_cluster_identifier: String,
}

/// Serialize `PromoteReadReplicaDBClusterMessage` contents to a `SignedRequest`.
struct PromoteReadReplicaDBClusterMessageSerializer;
impl PromoteReadReplicaDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PromoteReadReplicaDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PromoteReadReplicaDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct PromoteReadReplicaDBClusterResultDeserializer;
impl PromoteReadReplicaDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PromoteReadReplicaDBClusterResult, XmlParseError> {
        deserialize_elements::<_, PromoteReadReplicaDBClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBCluster" => {
                        obj.db_cluster =
                            Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct PromoteReadReplicaMessage {
    /// <p><p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can&#39;t be set to 0 if the DB instance is a source to read replicas.</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing read replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
    pub db_instance_identifier: String,
    /// <p><p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
}

/// Serialize `PromoteReadReplicaMessage` contents to a `SignedRequest`.
struct PromoteReadReplicaMessageSerializer;
impl PromoteReadReplicaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PromoteReadReplicaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PromoteReadReplicaResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct PromoteReadReplicaResultDeserializer;
impl PromoteReadReplicaResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PromoteReadReplicaResult, XmlParseError> {
        deserialize_elements::<_, PromoteReadReplicaResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstance" => {
                        obj.db_instance =
                            Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct PurchaseReservedDBInstancesOfferingMessage {
    /// <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
    pub db_instance_count: Option<i64>,
    /// <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
    pub reserved_db_instance_id: Option<String>,
    /// <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
    pub reserved_db_instances_offering_id: String,
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `PurchaseReservedDBInstancesOfferingMessage` contents to a `SignedRequest`.
struct PurchaseReservedDBInstancesOfferingMessageSerializer;
impl PurchaseReservedDBInstancesOfferingMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &PurchaseReservedDBInstancesOfferingMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_count {
            params.put(&format!("{}{}", prefix, "DBInstanceCount"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_db_instance_id {
            params.put(
                &format!("{}{}", prefix, "ReservedDBInstanceId"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
            &obj.reserved_db_instances_offering_id,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct PurchaseReservedDBInstancesOfferingResult {
    pub reserved_db_instance: Option<ReservedDBInstance>,
}

#[allow(dead_code)]
struct PurchaseReservedDBInstancesOfferingResultDeserializer;
impl PurchaseReservedDBInstancesOfferingResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PurchaseReservedDBInstancesOfferingResult, XmlParseError> {
        deserialize_elements::<_, PurchaseReservedDBInstancesOfferingResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ReservedDBInstance" => {
                        obj.reserved_db_instance =
                            Some(ReservedDBInstanceDeserializer::deserialize(
                                "ReservedDBInstance",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>A range of integer values.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Range {
    /// <p>The minimum value in the range.</p>
    pub from: Option<i64>,
    /// <p>The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000... </p>
    pub step: Option<i64>,
    /// <p>The maximum value in the range.</p>
    pub to: Option<i64>,
}

#[allow(dead_code)]
struct RangeDeserializer;
impl RangeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Range, XmlParseError> {
        deserialize_elements::<_, Range, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "From" => {
                    obj.from = Some(IntegerDeserializer::deserialize("From", stack)?);
                }
                "Step" => {
                    obj.step = Some(IntegerOptionalDeserializer::deserialize("Step", stack)?);
                }
                "To" => {
                    obj.to = Some(IntegerDeserializer::deserialize("To", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct RangeListDeserializer;
impl RangeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Range>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Range" {
                obj.push(RangeDeserializer::deserialize("Range", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ReadReplicaDBClusterIdentifierListDeserializer;
impl ReadReplicaDBClusterIdentifierListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ReadReplicaDBClusterIdentifier" {
                obj.push(StringDeserializer::deserialize(
                    "ReadReplicaDBClusterIdentifier",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ReadReplicaDBInstanceIdentifierListDeserializer;
impl ReadReplicaDBInstanceIdentifierListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ReadReplicaDBInstanceIdentifier" {
                obj.push(StringDeserializer::deserialize(
                    "ReadReplicaDBInstanceIdentifier",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ReadReplicaIdentifierListDeserializer;
impl ReadReplicaIdentifierListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ReadReplicaIdentifier" {
                obj.push(StringDeserializer::deserialize(
                    "ReadReplicaIdentifier",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ReadersArnListDeserializer;
impl ReadersArnListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RebootDBInstanceMessage {
    /// <p><p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></p>
    pub db_instance_identifier: String,
    /// <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
    pub force_failover: Option<bool>,
}

/// Serialize `RebootDBInstanceMessage` contents to a `SignedRequest`.
struct RebootDBInstanceMessageSerializer;
impl RebootDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RebootDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.force_failover {
            params.put(&format!("{}{}", prefix, "ForceFailover"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RebootDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct RebootDBInstanceResultDeserializer;
impl RebootDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RebootDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, RebootDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> This data type is used as a response element in the <code>DescribeReservedDBInstances</code> and <code>DescribeReservedDBInstancesOfferings</code> actions. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RecurringCharge {
    /// <p>The amount of the recurring charge.</p>
    pub recurring_charge_amount: Option<f64>,
    /// <p>The frequency of the recurring charge.</p>
    pub recurring_charge_frequency: Option<String>,
}

#[allow(dead_code)]
struct RecurringChargeDeserializer;
impl RecurringChargeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RecurringCharge, XmlParseError> {
        deserialize_elements::<_, RecurringCharge, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "RecurringChargeAmount" => {
                    obj.recurring_charge_amount = Some(DoubleDeserializer::deserialize(
                        "RecurringChargeAmount",
                        stack,
                    )?);
                }
                "RecurringChargeFrequency" => {
                    obj.recurring_charge_frequency = Some(StringDeserializer::deserialize(
                        "RecurringChargeFrequency",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct RecurringChargeListDeserializer;
impl RecurringChargeListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<RecurringCharge>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "RecurringCharge" {
                obj.push(RecurringChargeDeserializer::deserialize(
                    "RecurringCharge",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RegisterDBProxyTargetsRequest {
    /// <p>One or more DB cluster identifiers.</p>
    pub db_cluster_identifiers: Option<Vec<String>>,
    /// <p>One or more DB instance identifiers.</p>
    pub db_instance_identifiers: Option<Vec<String>>,
    /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
    pub db_proxy_name: String,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
    pub target_group_name: Option<String>,
}

/// Serialize `RegisterDBProxyTargetsRequest` contents to a `SignedRequest`.
struct RegisterDBProxyTargetsRequestSerializer;
impl RegisterDBProxyTargetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RegisterDBProxyTargetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifiers {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBClusterIdentifiers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.db_instance_identifiers {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBInstanceIdentifiers"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "DBProxyName"), &obj.db_proxy_name);
        if let Some(ref field_value) = obj.target_group_name {
            params.put(&format!("{}{}", prefix, "TargetGroupName"), &field_value);
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RegisterDBProxyTargetsResponse {
    /// <p>One or more <code>DBProxyTarget</code> objects that are created when you register targets with a target group.</p>
    pub db_proxy_targets: Option<Vec<DBProxyTarget>>,
}

#[allow(dead_code)]
struct RegisterDBProxyTargetsResponseDeserializer;
impl RegisterDBProxyTargetsResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RegisterDBProxyTargetsResponse, XmlParseError> {
        deserialize_elements::<_, RegisterDBProxyTargetsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBProxyTargets" => {
                        obj.db_proxy_targets.get_or_insert(vec![]).extend(
                            TargetListDeserializer::deserialize("DBProxyTargets", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RemoveFromGlobalClusterMessage {
    /// <p> The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. </p>
    pub db_cluster_identifier: Option<String>,
    /// <p> The cluster identifier to detach from the Aurora global database cluster. </p>
    pub global_cluster_identifier: Option<String>,
}

/// Serialize `RemoveFromGlobalClusterMessage` contents to a `SignedRequest`.
struct RemoveFromGlobalClusterMessageSerializer;
impl RemoveFromGlobalClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveFromGlobalClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "DbClusterIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.global_cluster_identifier {
            params.put(
                &format!("{}{}", prefix, "GlobalClusterIdentifier"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RemoveFromGlobalClusterResult {
    pub global_cluster: Option<GlobalCluster>,
}

#[allow(dead_code)]
struct RemoveFromGlobalClusterResultDeserializer;
impl RemoveFromGlobalClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RemoveFromGlobalClusterResult, XmlParseError> {
        deserialize_elements::<_, RemoveFromGlobalClusterResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "GlobalCluster" => {
                        obj.global_cluster = Some(GlobalClusterDeserializer::deserialize(
                            "GlobalCluster",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RemoveRoleFromDBClusterMessage {
    /// <p>The name of the DB cluster to disassociate the IAM role from.</p>
    pub db_cluster_identifier: String,
    /// <p>The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
    pub feature_name: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
    pub role_arn: String,
}

/// Serialize `RemoveRoleFromDBClusterMessage` contents to a `SignedRequest`.
struct RemoveRoleFromDBClusterMessageSerializer;
impl RemoveRoleFromDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveRoleFromDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.feature_name {
            params.put(&format!("{}{}", prefix, "FeatureName"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "RoleArn"), &obj.role_arn);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RemoveRoleFromDBInstanceMessage {
    /// <p>The name of the DB instance to disassociate the IAM role from.</p>
    pub db_instance_identifier: String,
    /// <p>The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. </p>
    pub feature_name: String,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example, <code>arn:aws:iam::123456789012:role/AccessRole</code>.</p>
    pub role_arn: String,
}

/// Serialize `RemoveRoleFromDBInstanceMessage` contents to a `SignedRequest`.
struct RemoveRoleFromDBInstanceMessageSerializer;
impl RemoveRoleFromDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveRoleFromDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        params.put(&format!("{}{}", prefix, "FeatureName"), &obj.feature_name);
        params.put(&format!("{}{}", prefix, "RoleArn"), &obj.role_arn);
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RemoveSourceIdentifierFromSubscriptionMessage {
    /// <p> The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. </p>
    pub source_identifier: String,
    /// <p>The name of the RDS event notification subscription you want to remove a source identifier from.</p>
    pub subscription_name: String,
}

/// Serialize `RemoveSourceIdentifierFromSubscriptionMessage` contents to a `SignedRequest`.
struct RemoveSourceIdentifierFromSubscriptionMessageSerializer;
impl RemoveSourceIdentifierFromSubscriptionMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &RemoveSourceIdentifierFromSubscriptionMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceIdentifier"),
            &obj.source_identifier,
        );
        params.put(
            &format!("{}{}", prefix, "SubscriptionName"),
            &obj.subscription_name,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RemoveSourceIdentifierFromSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

#[allow(dead_code)]
struct RemoveSourceIdentifierFromSubscriptionResultDeserializer;
impl RemoveSourceIdentifierFromSubscriptionResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RemoveSourceIdentifierFromSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, RemoveSourceIdentifierFromSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "EventSubscription" => {
                        obj.event_subscription = Some(EventSubscriptionDeserializer::deserialize(
                            "EventSubscription",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RemoveTagsFromResourceMessage {
    /// <p>The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub resource_name: String,
    /// <p>The tag key (name) of the tag to be removed.</p>
    pub tag_keys: Vec<String>,
}

/// Serialize `RemoveTagsFromResourceMessage` contents to a `SignedRequest`.
struct RemoveTagsFromResourceMessageSerializer;
impl RemoveTagsFromResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveTagsFromResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ResourceName"), &obj.resource_name);
        KeyListSerializer::serialize(params, &format!("{}{}", prefix, "TagKeys"), &obj.tag_keys);
    }
}

#[allow(dead_code)]
struct ReplicaModeDeserializer;
impl ReplicaModeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p> This data type is used as a response element in the <code>DescribeReservedDBInstances</code> and <code>PurchaseReservedDBInstancesOffering</code> actions. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ReservedDBInstance {
    /// <p>The currency code for the reserved DB instance.</p>
    pub currency_code: Option<String>,
    /// <p>The DB instance class for the reserved DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>The number of reserved DB instances.</p>
    pub db_instance_count: Option<i64>,
    /// <p>The duration of the reservation in seconds.</p>
    pub duration: Option<i64>,
    /// <p>The fixed price charged for this reserved DB instance.</p>
    pub fixed_price: Option<f64>,
    /// <p><p>The unique identifier for the lease associated with the reserved DB instance.</p> <note> <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p> </note></p>
    pub lease_id: Option<String>,
    /// <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
    pub multi_az: Option<bool>,
    /// <p>The offering type of this reserved DB instance.</p>
    pub offering_type: Option<String>,
    /// <p>The description of the reserved DB instance.</p>
    pub product_description: Option<String>,
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    /// <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
    pub reserved_db_instance_arn: Option<String>,
    /// <p>The unique identifier for the reservation.</p>
    pub reserved_db_instance_id: Option<String>,
    /// <p>The offering identifier.</p>
    pub reserved_db_instances_offering_id: Option<String>,
    /// <p>The time the reservation started.</p>
    pub start_time: Option<String>,
    /// <p>The state of the reserved DB instance.</p>
    pub state: Option<String>,
    /// <p>The hourly price charged for this reserved DB instance.</p>
    pub usage_price: Option<f64>,
}

#[allow(dead_code)]
struct ReservedDBInstanceDeserializer;
impl ReservedDBInstanceDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedDBInstance, XmlParseError> {
        deserialize_elements::<_, ReservedDBInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "CurrencyCode" => {
                    obj.currency_code =
                        Some(StringDeserializer::deserialize("CurrencyCode", stack)?);
                }
                "DBInstanceClass" => {
                    obj.db_instance_class =
                        Some(StringDeserializer::deserialize("DBInstanceClass", stack)?);
                }
                "DBInstanceCount" => {
                    obj.db_instance_count =
                        Some(IntegerDeserializer::deserialize("DBInstanceCount", stack)?);
                }
                "Duration" => {
                    obj.duration = Some(IntegerDeserializer::deserialize("Duration", stack)?);
                }
                "FixedPrice" => {
                    obj.fixed_price = Some(DoubleDeserializer::deserialize("FixedPrice", stack)?);
                }
                "LeaseId" => {
                    obj.lease_id = Some(StringDeserializer::deserialize("LeaseId", stack)?);
                }
                "MultiAZ" => {
                    obj.multi_az = Some(BooleanDeserializer::deserialize("MultiAZ", stack)?);
                }
                "OfferingType" => {
                    obj.offering_type =
                        Some(StringDeserializer::deserialize("OfferingType", stack)?);
                }
                "ProductDescription" => {
                    obj.product_description = Some(StringDeserializer::deserialize(
                        "ProductDescription",
                        stack,
                    )?);
                }
                "RecurringCharges" => {
                    obj.recurring_charges.get_or_insert(vec![]).extend(
                        RecurringChargeListDeserializer::deserialize("RecurringCharges", stack)?,
                    );
                }
                "ReservedDBInstanceArn" => {
                    obj.reserved_db_instance_arn = Some(StringDeserializer::deserialize(
                        "ReservedDBInstanceArn",
                        stack,
                    )?);
                }
                "ReservedDBInstanceId" => {
                    obj.reserved_db_instance_id = Some(StringDeserializer::deserialize(
                        "ReservedDBInstanceId",
                        stack,
                    )?);
                }
                "ReservedDBInstancesOfferingId" => {
                    obj.reserved_db_instances_offering_id = Some(StringDeserializer::deserialize(
                        "ReservedDBInstancesOfferingId",
                        stack,
                    )?);
                }
                "StartTime" => {
                    obj.start_time = Some(TStampDeserializer::deserialize("StartTime", stack)?);
                }
                "State" => {
                    obj.state = Some(StringDeserializer::deserialize("State", stack)?);
                }
                "UsagePrice" => {
                    obj.usage_price = Some(DoubleDeserializer::deserialize("UsagePrice", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ReservedDBInstanceListDeserializer;
impl ReservedDBInstanceListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedDBInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ReservedDBInstance" {
                obj.push(ReservedDBInstanceDeserializer::deserialize(
                    "ReservedDBInstance",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeReservedDBInstances</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ReservedDBInstanceMessage {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>A list of reserved DB instances.</p>
    pub reserved_db_instances: Option<Vec<ReservedDBInstance>>,
}

#[allow(dead_code)]
struct ReservedDBInstanceMessageDeserializer;
impl ReservedDBInstanceMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedDBInstanceMessage, XmlParseError> {
        deserialize_elements::<_, ReservedDBInstanceMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "ReservedDBInstances" => {
                        obj.reserved_db_instances.get_or_insert(vec![]).extend(
                            ReservedDBInstanceListDeserializer::deserialize(
                                "ReservedDBInstances",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p> This data type is used as a response element in the <code>DescribeReservedDBInstancesOfferings</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ReservedDBInstancesOffering {
    /// <p>The currency code for the reserved DB instance offering.</p>
    pub currency_code: Option<String>,
    /// <p>The DB instance class for the reserved DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>The duration of the offering in seconds.</p>
    pub duration: Option<i64>,
    /// <p>The fixed price charged for this offering.</p>
    pub fixed_price: Option<f64>,
    /// <p>Indicates if the offering applies to Multi-AZ deployments.</p>
    pub multi_az: Option<bool>,
    /// <p>The offering type.</p>
    pub offering_type: Option<String>,
    /// <p>The database engine used by the offering.</p>
    pub product_description: Option<String>,
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    /// <p>The offering identifier.</p>
    pub reserved_db_instances_offering_id: Option<String>,
    /// <p>The hourly price charged for this offering.</p>
    pub usage_price: Option<f64>,
}

#[allow(dead_code)]
struct ReservedDBInstancesOfferingDeserializer;
impl ReservedDBInstancesOfferingDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedDBInstancesOffering, XmlParseError> {
        deserialize_elements::<_, ReservedDBInstancesOffering, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "CurrencyCode" => {
                        obj.currency_code =
                            Some(StringDeserializer::deserialize("CurrencyCode", stack)?);
                    }
                    "DBInstanceClass" => {
                        obj.db_instance_class =
                            Some(StringDeserializer::deserialize("DBInstanceClass", stack)?);
                    }
                    "Duration" => {
                        obj.duration = Some(IntegerDeserializer::deserialize("Duration", stack)?);
                    }
                    "FixedPrice" => {
                        obj.fixed_price =
                            Some(DoubleDeserializer::deserialize("FixedPrice", stack)?);
                    }
                    "MultiAZ" => {
                        obj.multi_az = Some(BooleanDeserializer::deserialize("MultiAZ", stack)?);
                    }
                    "OfferingType" => {
                        obj.offering_type =
                            Some(StringDeserializer::deserialize("OfferingType", stack)?);
                    }
                    "ProductDescription" => {
                        obj.product_description = Some(StringDeserializer::deserialize(
                            "ProductDescription",
                            stack,
                        )?);
                    }
                    "RecurringCharges" => {
                        obj.recurring_charges.get_or_insert(vec![]).extend(
                            RecurringChargeListDeserializer::deserialize(
                                "RecurringCharges",
                                stack,
                            )?,
                        );
                    }
                    "ReservedDBInstancesOfferingId" => {
                        obj.reserved_db_instances_offering_id =
                            Some(StringDeserializer::deserialize(
                                "ReservedDBInstancesOfferingId",
                                stack,
                            )?);
                    }
                    "UsagePrice" => {
                        obj.usage_price =
                            Some(DoubleDeserializer::deserialize("UsagePrice", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct ReservedDBInstancesOfferingListDeserializer;
impl ReservedDBInstancesOfferingListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedDBInstancesOffering>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ReservedDBInstancesOffering" {
                obj.push(ReservedDBInstancesOfferingDeserializer::deserialize(
                    "ReservedDBInstancesOffering",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p> Contains the result of a successful invocation of the <code>DescribeReservedDBInstancesOfferings</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ReservedDBInstancesOfferingMessage {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>A list of reserved DB instance offerings.</p>
    pub reserved_db_instances_offerings: Option<Vec<ReservedDBInstancesOffering>>,
}

#[allow(dead_code)]
struct ReservedDBInstancesOfferingMessageDeserializer;
impl ReservedDBInstancesOfferingMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedDBInstancesOfferingMessage, XmlParseError> {
        deserialize_elements::<_, ReservedDBInstancesOfferingMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Marker" => {
                        obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                    }
                    "ReservedDBInstancesOfferings" => {
                        obj.reserved_db_instances_offerings
                            .get_or_insert(vec![])
                            .extend(ReservedDBInstancesOfferingListDeserializer::deserialize(
                                "ReservedDBInstancesOfferings",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ResetDBClusterParameterGroupMessage {
    /// <p>The name of the DB cluster parameter group to reset.</p>
    pub db_cluster_parameter_group_name: String,
    /// <p>A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.</p>
    pub parameters: Option<Vec<Parameter>>,
    /// <p>A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.</p>
    pub reset_all_parameters: Option<bool>,
}

/// Serialize `ResetDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct ResetDBClusterParameterGroupMessageSerializer;
impl ResetDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterParameterGroupName"),
            &obj.db_cluster_parameter_group_name,
        );
        if let Some(ref field_value) = obj.parameters {
            ParametersListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Parameter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.reset_all_parameters {
            params.put(&format!("{}{}", prefix, "ResetAllParameters"), &field_value);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ResetDBParameterGroupMessage {
    /// <p><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul></p>
    pub db_parameter_group_name: String,
    /// <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
    pub parameters: Option<Vec<Parameter>>,
    /// <p> A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. </p>
    pub reset_all_parameters: Option<bool>,
}

/// Serialize `ResetDBParameterGroupMessage` contents to a `SignedRequest`.
struct ResetDBParameterGroupMessageSerializer;
impl ResetDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBParameterGroupName"),
            &obj.db_parameter_group_name,
        );
        if let Some(ref field_value) = obj.parameters {
            ParametersListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Parameter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.reset_all_parameters {
            params.put(&format!("{}{}", prefix, "ResetAllParameters"), &field_value);
        }
    }
}

/// <p>Describes the pending maintenance actions for a resource.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ResourcePendingMaintenanceActions {
    /// <p>A list that provides details about the pending maintenance actions for the resource.</p>
    pub pending_maintenance_action_details: Option<Vec<PendingMaintenanceAction>>,
    /// <p>The ARN of the resource that has pending maintenance actions.</p>
    pub resource_identifier: Option<String>,
}

#[allow(dead_code)]
struct ResourcePendingMaintenanceActionsDeserializer;
impl ResourcePendingMaintenanceActionsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ResourcePendingMaintenanceActions, XmlParseError> {
        deserialize_elements::<_, ResourcePendingMaintenanceActions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "PendingMaintenanceActionDetails" => {
                        obj.pending_maintenance_action_details
                            .get_or_insert(vec![])
                            .extend(PendingMaintenanceActionDetailsDeserializer::deserialize(
                                "PendingMaintenanceActionDetails",
                                stack,
                            )?);
                    }
                    "ResourceIdentifier" => {
                        obj.resource_identifier = Some(StringDeserializer::deserialize(
                            "ResourceIdentifier",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBClusterFromS3Message {
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p><p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note> <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p> </note> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul></p>
    pub backtrack_window: Option<i64>,
    /// <p><p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul></p>
    pub backup_retention_period: Option<i64>,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub character_set_name: Option<String>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: String,
    /// <p><p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>The database name for the restored DB cluster.</p>
    pub database_name: Option<String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
    pub engine: String,
    /// <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
    pub engine_version: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub kms_key_id: Option<String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: String,
    /// <p><p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul></p>
    pub master_username: String,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
    pub port: Option<i64>,
    /// <p><p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub s3_bucket_name: String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub s3_ingestion_role_arn: String,
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub s3_prefix: Option<String>,
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
    pub source_engine: String,
    /// <p>The version of the database that the backup files were created from.</p> <p>MySQL versions 5.5, 5.6, and 5.7 are supported. </p> <p>Example: <code>5.6.40</code>, <code>5.7.28</code> </p>
    pub source_engine_version: String,
    /// <p>A value that indicates whether the restored DB cluster is encrypted.</p>
    pub storage_encrypted: Option<bool>,
    pub tags: Option<Vec<Tag>>,
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBClusterFromS3Message` contents to a `SignedRequest`.
struct RestoreDBClusterFromS3MessageSerializer;
impl RestoreDBClusterFromS3MessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterFromS3Message) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AvailabilityZone"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.backtrack_window {
            params.put(&format!("{}{}", prefix, "BacktrackWindow"), &field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "MasterUserPassword"),
            &obj.master_user_password,
        );
        params.put(
            &format!("{}{}", prefix, "MasterUsername"),
            &obj.master_username,
        );
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "S3BucketName"),
            &obj.s3_bucket_name,
        );
        params.put(
            &format!("{}{}", prefix, "S3IngestionRoleArn"),
            &obj.s3_ingestion_role_arn,
        );
        if let Some(ref field_value) = obj.s3_prefix {
            params.put(&format!("{}{}", prefix, "S3Prefix"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SourceEngine"), &obj.source_engine);
        params.put(
            &format!("{}{}", prefix, "SourceEngineVersion"),
            &obj.source_engine_version,
        );
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBClusterFromS3Result {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct RestoreDBClusterFromS3ResultDeserializer;
impl RestoreDBClusterFromS3ResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBClusterFromS3Result, XmlParseError> {
        deserialize_elements::<_, RestoreDBClusterFromS3Result, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBCluster" => {
                        obj.db_cluster =
                            Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBClusterFromSnapshotMessage {
    /// <p>Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p><p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note> <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p> </note> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul></p>
    pub backtrack_window: Option<i64>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
    pub db_cluster_identifier: String,
    /// <p><p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>The database name for the restored DB cluster.</p>
    pub database_name: Option<String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>. </p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
    pub engine: String,
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    pub engine_mode: Option<String>,
    /// <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
    pub engine_version: Option<String>,
    /// <p><p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>When you don&#39;t specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the Amazon Web Services KMS CMK that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn&#39;t encrypted, then the restored DB cluster isn&#39;t encrypted.</p> </li> </ul></p>
    pub kms_key_id: Option<String>,
    /// <p>The name of the option group to use for the restored DB cluster.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
    pub port: Option<i64>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    pub scaling_configuration: Option<ScalingConfiguration>,
    /// <p><p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul></p>
    pub snapshot_identifier: String,
    /// <p>The tags to be assigned to the restored DB cluster.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>A list of VPC security groups that the new DB cluster will belong to.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBClusterFromSnapshotMessage` contents to a `SignedRequest`.
struct RestoreDBClusterFromSnapshotMessageSerializer;
impl RestoreDBClusterFromSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterFromSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AvailabilityZone"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.backtrack_window {
            params.put(&format!("{}{}", prefix, "BacktrackWindow"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_mode {
            params.put(&format!("{}{}", prefix, "EngineMode"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.scaling_configuration {
            ScalingConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ScalingConfiguration"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "SnapshotIdentifier"),
            &obj.snapshot_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBClusterFromSnapshotResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct RestoreDBClusterFromSnapshotResultDeserializer;
impl RestoreDBClusterFromSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBClusterFromSnapshotResult, XmlParseError> {
        deserialize_elements::<_, RestoreDBClusterFromSnapshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBCluster" => {
                        obj.db_cluster =
                            Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBClusterToPointInTimeMessage {
    /// <p><p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note> <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p> </note> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul></p>
    pub backtrack_window: Option<i64>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p><p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul></p>
    pub db_cluster_identifier: String,
    /// <p><p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></p>
    pub db_cluster_parameter_group_name: Option<String>,
    /// <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p>
    pub deletion_protection: Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>. </p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless cluster. To create a clone that is an Aurora Serverless cluster, the original cluster must be an Aurora Serverless cluster or an encrypted provisioned cluster.</p>
    pub engine_mode: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a Amazon Web Services KMS CMK that is different than the Amazon Web Services KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the Amazon Web Services KMS CMK identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the Amazon Web Services KMS CMK that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    pub kms_key_id: Option<String>,
    /// <p>The name of the option group for the new DB cluster.</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
    pub port: Option<i64>,
    /// <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
    pub restore_to_time: Option<String>,
    /// <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    pub restore_type: Option<String>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    pub scaling_configuration: Option<ScalingConfiguration>,
    /// <p><p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul></p>
    pub source_db_cluster_identifier: String,
    pub tags: Option<Vec<Tag>>,
    /// <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    pub use_latest_restorable_time: Option<bool>,
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBClusterToPointInTimeMessage` contents to a `SignedRequest`.
struct RestoreDBClusterToPointInTimeMessageSerializer;
impl RestoreDBClusterToPointInTimeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterToPointInTimeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.backtrack_window {
            params.put(&format!("{}{}", prefix, "BacktrackWindow"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBClusterParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.engine_mode {
            params.put(&format!("{}{}", prefix, "EngineMode"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.restore_to_time {
            params.put(&format!("{}{}", prefix, "RestoreToTime"), &field_value);
        }
        if let Some(ref field_value) = obj.restore_type {
            params.put(&format!("{}{}", prefix, "RestoreType"), &field_value);
        }
        if let Some(ref field_value) = obj.scaling_configuration {
            ScalingConfigurationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ScalingConfiguration"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "SourceDBClusterIdentifier"),
            &obj.source_db_cluster_identifier,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.use_latest_restorable_time {
            params.put(
                &format!("{}{}", prefix, "UseLatestRestorableTime"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBClusterToPointInTimeResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct RestoreDBClusterToPointInTimeResultDeserializer;
impl RestoreDBClusterToPointInTimeResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBClusterToPointInTimeResult, XmlParseError> {
        deserialize_elements::<_, RestoreDBClusterToPointInTimeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBCluster" => {
                        obj.db_cluster =
                            Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBInstanceFromDBSnapshotMessage {
    /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
    pub availability_zone: Option<String>,
    /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
    pub db_instance_identifier: String,
    /// <p><p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn&#39;t apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note></p>
    pub db_name: Option<String>,
    /// <p><p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></p>
    pub db_parameter_group_name: Option<String>,
    /// <p><p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul></p>
    pub db_snapshot_identifier: String,
    /// <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p> <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p><p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: Option<String>,
    /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
    pub iops: Option<i64>,
    /// <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub license_model: Option<String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: Option<bool>,
    /// <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
    pub port: Option<i64>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: Option<bool>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: Option<String>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: Option<bool>,
    /// <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBInstanceFromDBSnapshotMessage` contents to a `SignedRequest`.
struct RestoreDBInstanceFromDBSnapshotMessageSerializer;
impl RestoreDBInstanceFromDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBInstanceFromDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"), &field_value);
        }
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "DBSnapshotIdentifier"),
            &obj.db_snapshot_identifier,
        );
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_customer_owned_ip {
            params.put(
                &format!("{}{}", prefix, "EnableCustomerOwnedIp"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"), &field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(
                &format!("{}{}", prefix, "TdeCredentialPassword"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.use_default_processor_features {
            params.put(
                &format!("{}{}", prefix, "UseDefaultProcessorFeatures"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBInstanceFromDBSnapshotResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct RestoreDBInstanceFromDBSnapshotResultDeserializer;
impl RestoreDBInstanceFromDBSnapshotResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBInstanceFromDBSnapshotResult, XmlParseError> {
        deserialize_elements::<_, RestoreDBInstanceFromDBSnapshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstance" => {
                        obj.db_instance =
                            Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBInstanceFromS3Message {
    /// <p><p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note></p>
    pub allocated_storage: Option<i64>,
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. </p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>The Availability Zone that the DB instance is created in. For information about Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint. </p>
    pub availability_zone: Option<String>,
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. </p>
    pub backup_retention_period: Option<i64>,
    /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. </p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
    pub db_instance_class: String,
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
    pub db_instance_identifier: String,
    /// <p>The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. </p>
    pub db_name: Option<String>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    pub db_parameter_group_name: Option<String>,
    /// <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
    pub db_security_groups: Option<Vec<String>>,
    /// <p>A DB subnet group to associate with this DB instance.</p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
    pub enable_performance_insights: Option<bool>,
    /// <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
    pub engine: String,
    /// <p>The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. </p>
    pub engine_version: Option<String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub iops: Option<i64>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB instance. </p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region. </p>
    pub kms_key_id: Option<String>,
    /// <p>The license model for this DB instance. Use <code>general-public-license</code>. </p>
    pub license_model: Option<String>,
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: Option<String>,
    /// <p><p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t be a reserved word for the chosen database engine.</p> </li> </ul></p>
    pub master_username: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p> <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
    pub monitoring_interval: Option<i64>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
    pub monitoring_role_arn: Option<String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. </p>
    pub multi_az: Option<bool>,
    /// <p>The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. </p>
    pub option_group_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default CMK. There is a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a different default CMK for each Amazon Web Services Region.</p>
    pub performance_insights_kms_key_id: Option<String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: Option<i64>,
    /// <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
    pub port: Option<i64>,
    /// <p><p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_backup_window: Option<String>,
    /// <p><p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></p>
    pub preferred_maintenance_window: Option<String>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: Option<bool>,
    /// <p>The name of your Amazon S3 bucket that contains your database backup file. </p>
    pub s3_bucket_name: String,
    /// <p>An Amazon Web Services Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. </p>
    pub s3_ingestion_role_arn: String,
    /// <p>The prefix of your Amazon S3 bucket. </p>
    pub s3_prefix: Option<String>,
    /// <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
    pub source_engine: String,
    /// <p>The version of the database that the backup files were created from.</p> <p>MySQL versions 5.6 and 5.7 are supported. </p> <p>Example: <code>5.6.40</code> </p>
    pub source_engine_version: String,
    /// <p>A value that indicates whether the new DB instance is encrypted or not. </p>
    pub storage_encrypted: Option<bool>,
    /// <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    /// <p>A list of tags to associate with this DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub tags: Option<Vec<Tag>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: Option<bool>,
    /// <p>A list of VPC security groups to associate with this DB instance. </p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBInstanceFromS3Message` contents to a `SignedRequest`.
struct RestoreDBInstanceFromS3MessageSerializer;
impl RestoreDBInstanceFromS3MessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBInstanceFromS3Message) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocated_storage {
            params.put(&format!("{}{}", prefix, "AllocatedStorage"), &field_value);
        }
        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBInstanceClass"),
            &obj.db_instance_class,
        );
        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"), &field_value);
        }
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_security_groups {
            DBSecurityGroupNameListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DBSecurityGroupName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_performance_insights {
            params.put(
                &format!("{}{}", prefix, "EnablePerformanceInsights"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Engine"), &obj.engine);
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"), &field_value);
        }
        if let Some(ref field_value) = obj.master_username {
            params.put(&format!("{}{}", prefix, "MasterUsername"), &field_value);
        }
        if let Some(ref field_value) = obj.max_allocated_storage {
            params.put(
                &format!("{}{}", prefix, "MaxAllocatedStorage"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"), &field_value);
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.performance_insights_kms_key_id {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsKMSKeyId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.performance_insights_retention_period {
            params.put(
                &format!("{}{}", prefix, "PerformanceInsightsRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(
                &format!("{}{}", prefix, "PreferredBackupWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(
                &format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "S3BucketName"),
            &obj.s3_bucket_name,
        );
        params.put(
            &format!("{}{}", prefix, "S3IngestionRoleArn"),
            &obj.s3_ingestion_role_arn,
        );
        if let Some(ref field_value) = obj.s3_prefix {
            params.put(&format!("{}{}", prefix, "S3Prefix"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SourceEngine"), &obj.source_engine);
        params.put(
            &format!("{}{}", prefix, "SourceEngineVersion"),
            &obj.source_engine_version,
        );
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        if let Some(ref field_value) = obj.use_default_processor_features {
            params.put(
                &format!("{}{}", prefix, "UseDefaultProcessorFeatures"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBInstanceFromS3Result {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct RestoreDBInstanceFromS3ResultDeserializer;
impl RestoreDBInstanceFromS3ResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBInstanceFromS3Result, XmlParseError> {
        deserialize_elements::<_, RestoreDBInstanceFromS3Result, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstance" => {
                        obj.db_instance =
                            Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RestoreDBInstanceToPointInTimeMessage {
    /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    pub auto_minor_version_upgrade: Option<bool>,
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
    pub availability_zone: Option<String>,
    /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: Option<bool>,
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub db_instance_class: Option<String>,
    /// <p><p>The database name for the restored DB instance.</p> <note> <p>This parameter isn&#39;t used for the MySQL or MariaDB engines.</p> </note></p>
    pub db_name: Option<String>,
    /// <p><p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></p>
    pub db_parameter_group_name: Option<String>,
    /// <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
    pub db_subnet_group_name: Option<String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p>
    pub deletion_protection: Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: Option<String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: Option<String>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: Option<Vec<String>>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p> <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: Option<bool>,
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enable_iam_database_authentication: Option<bool>,
    /// <p><p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-ee-cdb</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se2-cdb</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul></p>
    pub engine: Option<String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
    pub iops: Option<i64>,
    /// <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub license_model: Option<String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p> <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: Option<i64>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: Option<bool>,
    /// <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: Option<String>,
    /// <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
    pub port: Option<i64>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: Option<Vec<ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p> <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC, and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses, and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p> <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p> <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: Option<bool>,
    /// <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
    pub restore_time: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub source_db_instance_automated_backups_arn: Option<String>,
    /// <p><p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul></p>
    pub source_db_instance_identifier: Option<String>,
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub source_dbi_resource_id: Option<String>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    /// <p><p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can&#39;t end with a hyphen or contain two consecutive hyphens</p> </li> </ul></p>
    pub target_db_instance_identifier: String,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: Option<String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: Option<String>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: Option<bool>,
    /// <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
    pub use_latest_restorable_time: Option<bool>,
    /// <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Serialize `RestoreDBInstanceToPointInTimeMessage` contents to a `SignedRequest`.
struct RestoreDBInstanceToPointInTimeMessageSerializer;
impl RestoreDBInstanceToPointInTimeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBInstanceToPointInTimeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(
                &format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"), &field_value);
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"), &field_value);
        }
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"), &field_value);
        }
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(
                &format!("{}{}", prefix, "DBParameterGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.deletion_protection {
            params.put(&format!("{}{}", prefix, "DeletionProtection"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"), &field_value);
        }
        if let Some(ref field_value) = obj.enable_cloudwatch_logs_exports {
            LogTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableCloudwatchLogsExports"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_customer_owned_ip {
            params.put(
                &format!("{}{}", prefix, "EnableCustomerOwnedIp"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(
                &format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"), &field_value);
        }
        if let Some(ref field_value) = obj.max_allocated_storage {
            params.put(
                &format!("{}{}", prefix, "MaxAllocatedStorage"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"), &field_value);
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"), &field_value);
        }
        if let Some(ref field_value) = obj.processor_features {
            ProcessorFeatureListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProcessorFeature"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"), &field_value);
        }
        if let Some(ref field_value) = obj.restore_time {
            params.put(&format!("{}{}", prefix, "RestoreTime"), &field_value);
        }
        if let Some(ref field_value) = obj.source_db_instance_automated_backups_arn {
            params.put(
                &format!("{}{}", prefix, "SourceDBInstanceAutomatedBackupsArn"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_db_instance_identifier {
            params.put(
                &format!("{}{}", prefix, "SourceDBInstanceIdentifier"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_dbi_resource_id {
            params.put(
                &format!("{}{}", prefix, "SourceDbiResourceId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetDBInstanceIdentifier"),
            &obj.target_db_instance_identifier,
        );
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"), &field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(
                &format!("{}{}", prefix, "TdeCredentialPassword"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.use_default_processor_features {
            params.put(
                &format!("{}{}", prefix, "UseDefaultProcessorFeatures"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.use_latest_restorable_time {
            params.put(
                &format!("{}{}", prefix, "UseLatestRestorableTime"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcSecurityGroupId"),
                field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreDBInstanceToPointInTimeResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct RestoreDBInstanceToPointInTimeResultDeserializer;
impl RestoreDBInstanceToPointInTimeResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreDBInstanceToPointInTimeResult, XmlParseError> {
        deserialize_elements::<_, RestoreDBInstanceToPointInTimeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstance" => {
                        obj.db_instance =
                            Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Earliest and latest time an instance can be restored to:</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RestoreWindow {
    /// <p>The earliest time you can restore an instance to.</p>
    pub earliest_time: Option<String>,
    /// <p>The latest time you can restore an instance to.</p>
    pub latest_time: Option<String>,
}

#[allow(dead_code)]
struct RestoreWindowDeserializer;
impl RestoreWindowDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreWindow, XmlParseError> {
        deserialize_elements::<_, RestoreWindow, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "EarliestTime" => {
                    obj.earliest_time =
                        Some(TStampDeserializer::deserialize("EarliestTime", stack)?);
                }
                "LatestTime" => {
                    obj.latest_time = Some(TStampDeserializer::deserialize("LatestTime", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct RevokeDBSecurityGroupIngressMessage {
    /// <p> The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. </p>
    pub cidrip: Option<String>,
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub db_security_group_name: String,
    /// <p> The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_id: Option<String>,
    /// <p> The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_name: Option<String>,
    /// <p> The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>
    pub ec2_security_group_owner_id: Option<String>,
}

/// Serialize `RevokeDBSecurityGroupIngressMessage` contents to a `SignedRequest`.
struct RevokeDBSecurityGroupIngressMessageSerializer;
impl RevokeDBSecurityGroupIngressMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RevokeDBSecurityGroupIngressMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidrip {
            params.put(&format!("{}{}", prefix, "CIDRIP"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DBSecurityGroupName"),
            &obj.db_security_group_name,
        );
        if let Some(ref field_value) = obj.ec2_security_group_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.ec2_security_group_name {
            params.put(
                &format!("{}{}", prefix, "EC2SecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.ec2_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "EC2SecurityGroupOwnerId"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct RevokeDBSecurityGroupIngressResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

#[allow(dead_code)]
struct RevokeDBSecurityGroupIngressResultDeserializer;
impl RevokeDBSecurityGroupIngressResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RevokeDBSecurityGroupIngressResult, XmlParseError> {
        deserialize_elements::<_, RevokeDBSecurityGroupIngressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBSecurityGroup" => {
                        obj.db_security_group = Some(DBSecurityGroupDeserializer::deserialize(
                            "DBSecurityGroup",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct ScalingConfiguration {
    /// <p><p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it&#39;s idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note></p>
    pub auto_pause: Option<bool>,
    /// <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
    pub max_capacity: Option<i64>,
    /// <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
    pub min_capacity: Option<i64>,
    /// <p>The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.</p> <p>Specify a value between 300 and 86,400 seconds.</p>
    pub seconds_until_auto_pause: Option<i64>,
    /// <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub timeout_action: Option<String>,
}

/// Serialize `ScalingConfiguration` contents to a `SignedRequest`.
struct ScalingConfigurationSerializer;
impl ScalingConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScalingConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_pause {
            params.put(&format!("{}{}", prefix, "AutoPause"), &field_value);
        }
        if let Some(ref field_value) = obj.max_capacity {
            params.put(&format!("{}{}", prefix, "MaxCapacity"), &field_value);
        }
        if let Some(ref field_value) = obj.min_capacity {
            params.put(&format!("{}{}", prefix, "MinCapacity"), &field_value);
        }
        if let Some(ref field_value) = obj.seconds_until_auto_pause {
            params.put(
                &format!("{}{}", prefix, "SecondsUntilAutoPause"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.timeout_action {
            params.put(&format!("{}{}", prefix, "TimeoutAction"), &field_value);
        }
    }
}

/// <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ScalingConfigurationInfo {
    /// <p>A value that indicates whether automatic pause is allowed for the Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>When the value is set to false for an Aurora Serverless DB cluster, the DB cluster automatically resumes.</p>
    pub auto_pause: Option<bool>,
    /// <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    pub max_capacity: Option<i64>,
    /// <p>The maximum capacity for the Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    pub min_capacity: Option<i64>,
    /// <p>The remaining amount of time, in seconds, before the Aurora DB cluster in <code>serverless</code> mode is paused. A DB cluster can be paused only when it's idle (it has no connections).</p>
    pub seconds_until_auto_pause: Option<i64>,
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub timeout_action: Option<String>,
}

#[allow(dead_code)]
struct ScalingConfigurationInfoDeserializer;
impl ScalingConfigurationInfoDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ScalingConfigurationInfo, XmlParseError> {
        deserialize_elements::<_, ScalingConfigurationInfo, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "AutoPause" => {
                        obj.auto_pause = Some(BooleanOptionalDeserializer::deserialize(
                            "AutoPause",
                            stack,
                        )?);
                    }
                    "MaxCapacity" => {
                        obj.max_capacity = Some(IntegerOptionalDeserializer::deserialize(
                            "MaxCapacity",
                            stack,
                        )?);
                    }
                    "MinCapacity" => {
                        obj.min_capacity = Some(IntegerOptionalDeserializer::deserialize(
                            "MinCapacity",
                            stack,
                        )?);
                    }
                    "SecondsUntilAutoPause" => {
                        obj.seconds_until_auto_pause =
                            Some(IntegerOptionalDeserializer::deserialize(
                                "SecondsUntilAutoPause",
                                stack,
                            )?);
                    }
                    "TimeoutAction" => {
                        obj.timeout_action =
                            Some(StringDeserializer::deserialize("TimeoutAction", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct SourceIdsListDeserializer;
impl SourceIdsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "SourceId" {
                obj.push(StringDeserializer::deserialize("SourceId", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `SourceIdsList` contents to a `SignedRequest`.
struct SourceIdsListSerializer;
impl SourceIdsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains an Amazon Web Services Region name as the result of a successful call to the <code>DescribeSourceRegions</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct SourceRegion {
    /// <p>The endpoint for the source Amazon Web Services Region endpoint.</p>
    pub endpoint: Option<String>,
    /// <p>The name of the source Amazon Web Services Region.</p>
    pub region_name: Option<String>,
    /// <p>The status of the source Amazon Web Services Region.</p>
    pub status: Option<String>,
    /// <p>Whether the source Amazon Web Services Region supports replicating automated backups to the current Amazon Web Services Region.</p>
    pub supports_db_instance_automated_backups_replication: Option<bool>,
}

#[allow(dead_code)]
struct SourceRegionDeserializer;
impl SourceRegionDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SourceRegion, XmlParseError> {
        deserialize_elements::<_, SourceRegion, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Endpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("Endpoint", stack)?);
                }
                "RegionName" => {
                    obj.region_name = Some(StringDeserializer::deserialize("RegionName", stack)?);
                }
                "Status" => {
                    obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                }
                "SupportsDBInstanceAutomatedBackupsReplication" => {
                    obj.supports_db_instance_automated_backups_replication =
                        Some(BooleanDeserializer::deserialize(
                            "SupportsDBInstanceAutomatedBackupsReplication",
                            stack,
                        )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct SourceRegionListDeserializer;
impl SourceRegionListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SourceRegion>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "SourceRegion" {
                obj.push(SourceRegionDeserializer::deserialize(
                    "SourceRegion",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the result of a successful invocation of the <code>DescribeSourceRegions</code> action.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct SourceRegionMessage {
    /// <p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>
    pub marker: Option<String>,
    /// <p>A list of SourceRegion instances that contains each source Amazon Web Services Region that the current Amazon Web Services Region can get a read replica or a DB snapshot from.</p>
    pub source_regions: Option<Vec<SourceRegion>>,
}

#[allow(dead_code)]
struct SourceRegionMessageDeserializer;
impl SourceRegionMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SourceRegionMessage, XmlParseError> {
        deserialize_elements::<_, SourceRegionMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Marker" => {
                    obj.marker = Some(StringDeserializer::deserialize("Marker", stack)?);
                }
                "SourceRegions" => {
                    obj.source_regions.get_or_insert(vec![]).extend(
                        SourceRegionListDeserializer::deserialize("SourceRegions", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct SourceTypeDeserializer;
impl SourceTypeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StartActivityStreamRequest {
    /// <p>Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.</p>
    pub apply_immediately: Option<bool>,
    /// <p>Specifies whether the database activity stream includes engine-native audit fields. This option only applies to an Oracle DB instance. By default, no engine-native audit fields are included.</p>
    pub engine_native_audit_fields_included: Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: String,
    /// <p>Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. </p>
    pub mode: String,
    /// <p>The Amazon Resource Name (ARN) of the DB cluster, for example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.</p>
    pub resource_arn: String,
}

/// Serialize `StartActivityStreamRequest` contents to a `SignedRequest`.
struct StartActivityStreamRequestSerializer;
impl StartActivityStreamRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartActivityStreamRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"), &field_value);
        }
        if let Some(ref field_value) = obj.engine_native_audit_fields_included {
            params.put(
                &format!("{}{}", prefix, "EngineNativeAuditFieldsIncluded"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "KmsKeyId"), &obj.kms_key_id);
        params.put(&format!("{}{}", prefix, "Mode"), &obj.mode);
        params.put(&format!("{}{}", prefix, "ResourceArn"), &obj.resource_arn);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StartActivityStreamResponse {
    /// <p>Indicates whether or not the database activity stream will start as soon as possible, regardless of the maintenance window for the database.</p>
    pub apply_immediately: Option<bool>,
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub engine_native_audit_fields_included: Option<bool>,
    /// <p>The name of the Amazon Kinesis data stream to be used for the database activity stream.</p>
    pub kinesis_stream_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of messages in the database activity stream.</p>
    pub kms_key_id: Option<String>,
    /// <p>The mode of the database activity stream.</p>
    pub mode: Option<String>,
    /// <p>The status of the database activity stream.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct StartActivityStreamResponseDeserializer;
impl StartActivityStreamResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StartActivityStreamResponse, XmlParseError> {
        deserialize_elements::<_, StartActivityStreamResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ApplyImmediately" => {
                        obj.apply_immediately =
                            Some(BooleanDeserializer::deserialize("ApplyImmediately", stack)?);
                    }
                    "EngineNativeAuditFieldsIncluded" => {
                        obj.engine_native_audit_fields_included =
                            Some(BooleanOptionalDeserializer::deserialize(
                                "EngineNativeAuditFieldsIncluded",
                                stack,
                            )?);
                    }
                    "KinesisStreamName" => {
                        obj.kinesis_stream_name =
                            Some(StringDeserializer::deserialize("KinesisStreamName", stack)?);
                    }
                    "KmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                    }
                    "Mode" => {
                        obj.mode =
                            Some(ActivityStreamModeDeserializer::deserialize("Mode", stack)?);
                    }
                    "Status" => {
                        obj.status = Some(ActivityStreamStatusDeserializer::deserialize(
                            "Status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StartDBClusterMessage {
    /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.</p>
    pub db_cluster_identifier: String,
}

/// Serialize `StartDBClusterMessage` contents to a `SignedRequest`.
struct StartDBClusterMessageSerializer;
impl StartDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StartDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct StartDBClusterResultDeserializer;
impl StartDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StartDBClusterResult, XmlParseError> {
        deserialize_elements::<_, StartDBClusterResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBCluster" => {
                    obj.db_cluster = Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StartDBInstanceAutomatedBackupsReplicationMessage {
    /// <p>The retention period for the replicated automated backups.</p>
    pub backup_retention_period: Option<i64>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the Amazon Resource Name (ARN) for the KMS encryption key in the destination Amazon Web Services Region, for example, <code>arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE</code>.</p>
    pub kms_key_id: Option<String>,
    /// <p>A URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication action to be called in the Amazon Web Services Region of the source DB instance. The presigned URL must be a valid request for the StartDBInstanceAutomatedBackupsReplication API action that can be executed in the Amazon Web Services Region that contains the source DB instance.</p>
    pub pre_signed_url: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example, <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
    pub source_db_instance_arn: String,
}

/// Serialize `StartDBInstanceAutomatedBackupsReplicationMessage` contents to a `SignedRequest`.
struct StartDBInstanceAutomatedBackupsReplicationMessageSerializer;
impl StartDBInstanceAutomatedBackupsReplicationMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &StartDBInstanceAutomatedBackupsReplicationMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(
                &format!("{}{}", prefix, "BackupRetentionPeriod"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SourceDBInstanceArn"),
            &obj.source_db_instance_arn,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StartDBInstanceAutomatedBackupsReplicationResult {
    pub db_instance_automated_backup: Option<DBInstanceAutomatedBackup>,
}

#[allow(dead_code)]
struct StartDBInstanceAutomatedBackupsReplicationResultDeserializer;
impl StartDBInstanceAutomatedBackupsReplicationResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StartDBInstanceAutomatedBackupsReplicationResult, XmlParseError> {
        deserialize_elements::<_, StartDBInstanceAutomatedBackupsReplicationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstanceAutomatedBackup" => {
                        obj.db_instance_automated_backup =
                            Some(DBInstanceAutomatedBackupDeserializer::deserialize(
                                "DBInstanceAutomatedBackup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StartDBInstanceMessage {
    /// <p> The user-supplied instance identifier. </p>
    pub db_instance_identifier: String,
}

/// Serialize `StartDBInstanceMessage` contents to a `SignedRequest`.
struct StartDBInstanceMessageSerializer;
impl StartDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StartDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct StartDBInstanceResultDeserializer;
impl StartDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StartDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, StartDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StartExportTaskMessage {
    /// <p><p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li> <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li> <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li> <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li> </ul></p>
    pub export_only: Option<Vec<String>>,
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. </p>
    pub export_task_identifier: String,
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. </p>
    pub iam_role_arn: String,
    /// <p><p>The ID of the Amazon Web Services KMS customer master key (CMK) to use to encrypt the snapshot exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK). The caller of this operation must be authorized to execute the following operations. These can be set in the Amazon Web Services KMS key policy: </p> <ul> <li> <p>GrantOperation.Encrypt</p> </li> <li> <p>GrantOperation.Decrypt</p> </li> <li> <p>GrantOperation.GenerateDataKey</p> </li> <li> <p>GrantOperation.GenerateDataKeyWithoutPlaintext</p> </li> <li> <p>GrantOperation.ReEncryptFrom</p> </li> <li> <p>GrantOperation.ReEncryptTo</p> </li> <li> <p>GrantOperation.CreateGrant</p> </li> <li> <p>GrantOperation.DescribeKey</p> </li> <li> <p>GrantOperation.RetireGrant</p> </li> </ul></p>
    pub kms_key_id: String,
    /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    pub s3_bucket_name: String,
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.</p>
    pub s3_prefix: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.</p>
    pub source_arn: String,
}

/// Serialize `StartExportTaskMessage` contents to a `SignedRequest`.
struct StartExportTaskMessageSerializer;
impl StartExportTaskMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartExportTaskMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.export_only {
            StringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExportOnly"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "ExportTaskIdentifier"),
            &obj.export_task_identifier,
        );
        params.put(&format!("{}{}", prefix, "IamRoleArn"), &obj.iam_role_arn);
        params.put(&format!("{}{}", prefix, "KmsKeyId"), &obj.kms_key_id);
        params.put(
            &format!("{}{}", prefix, "S3BucketName"),
            &obj.s3_bucket_name,
        );
        if let Some(ref field_value) = obj.s3_prefix {
            params.put(&format!("{}{}", prefix, "S3Prefix"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SourceArn"), &obj.source_arn);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StopActivityStreamRequest {
    /// <p>Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.</p>
    pub apply_immediately: Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. </p>
    pub resource_arn: String,
}

/// Serialize `StopActivityStreamRequest` contents to a `SignedRequest`.
struct StopActivityStreamRequestSerializer;
impl StopActivityStreamRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StopActivityStreamRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ResourceArn"), &obj.resource_arn);
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StopActivityStreamResponse {
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub kinesis_stream_name: Option<String>,
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).</p>
    pub kms_key_id: Option<String>,
    /// <p>The status of the database activity stream.</p>
    pub status: Option<String>,
}

#[allow(dead_code)]
struct StopActivityStreamResponseDeserializer;
impl StopActivityStreamResponseDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StopActivityStreamResponse, XmlParseError> {
        deserialize_elements::<_, StopActivityStreamResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "KinesisStreamName" => {
                        obj.kinesis_stream_name =
                            Some(StringDeserializer::deserialize("KinesisStreamName", stack)?);
                    }
                    "KmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                    }
                    "Status" => {
                        obj.status = Some(ActivityStreamStatusDeserializer::deserialize(
                            "Status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StopDBClusterMessage {
    /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.</p>
    pub db_cluster_identifier: String,
}

/// Serialize `StopDBClusterMessage` contents to a `SignedRequest`.
struct StopDBClusterMessageSerializer;
impl StopDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StopDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBClusterIdentifier"),
            &obj.db_cluster_identifier,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StopDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

#[allow(dead_code)]
struct StopDBClusterResultDeserializer;
impl StopDBClusterResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StopDBClusterResult, XmlParseError> {
        deserialize_elements::<_, StopDBClusterResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBCluster" => {
                    obj.db_cluster = Some(DBClusterDeserializer::deserialize("DBCluster", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StopDBInstanceAutomatedBackupsReplicationMessage {
    /// <p>The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automated backups, for example, <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
    pub source_db_instance_arn: String,
}

/// Serialize `StopDBInstanceAutomatedBackupsReplicationMessage` contents to a `SignedRequest`.
struct StopDBInstanceAutomatedBackupsReplicationMessageSerializer;
impl StopDBInstanceAutomatedBackupsReplicationMessageSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &StopDBInstanceAutomatedBackupsReplicationMessage,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "SourceDBInstanceArn"),
            &obj.source_db_instance_arn,
        );
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StopDBInstanceAutomatedBackupsReplicationResult {
    pub db_instance_automated_backup: Option<DBInstanceAutomatedBackup>,
}

#[allow(dead_code)]
struct StopDBInstanceAutomatedBackupsReplicationResultDeserializer;
impl StopDBInstanceAutomatedBackupsReplicationResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StopDBInstanceAutomatedBackupsReplicationResult, XmlParseError> {
        deserialize_elements::<_, StopDBInstanceAutomatedBackupsReplicationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "DBInstanceAutomatedBackup" => {
                        obj.db_instance_automated_backup =
                            Some(DBInstanceAutomatedBackupDeserializer::deserialize(
                                "DBInstanceAutomatedBackup",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct StopDBInstanceMessage {
    /// <p> The user-supplied instance identifier. </p>
    pub db_instance_identifier: String,
    /// <p> The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. </p>
    pub db_snapshot_identifier: Option<String>,
}

/// Serialize `StopDBInstanceMessage` contents to a `SignedRequest`.
struct StopDBInstanceMessageSerializer;
impl StopDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StopDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DBInstanceIdentifier"),
            &obj.db_instance_identifier,
        );
        if let Some(ref field_value) = obj.db_snapshot_identifier {
            params.put(
                &format!("{}{}", prefix, "DBSnapshotIdentifier"),
                &field_value,
            );
        }
    }
}

#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct StopDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

#[allow(dead_code)]
struct StopDBInstanceResultDeserializer;
impl StopDBInstanceResultDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StopDBInstanceResult, XmlParseError> {
        deserialize_elements::<_, StopDBInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DBInstance" => {
                    obj.db_instance =
                        Some(DBInstanceDeserializer::deserialize("DBInstance", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct StringDeserializer;
impl StringDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct StringListDeserializer;
impl StringListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(StringDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `StringList` contents to a `SignedRequest`.
struct StringListSerializer;
impl StringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[allow(dead_code)]
struct StringSensitiveDeserializer;
impl StringSensitiveDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p> This data type is used as a response element for the <code>DescribeDBSubnetGroups</code> operation. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Subnet {
    pub subnet_availability_zone: Option<AvailabilityZone>,
    /// <p>The identifier of the subnet.</p>
    pub subnet_identifier: Option<String>,
    /// <p>If the subnet is associated with an Outpost, this value specifies the Outpost.</p> <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub subnet_outpost: Option<Outpost>,
    /// <p>The status of the subnet.</p>
    pub subnet_status: Option<String>,
}

#[allow(dead_code)]
struct SubnetDeserializer;
impl SubnetDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Subnet, XmlParseError> {
        deserialize_elements::<_, Subnet, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "SubnetAvailabilityZone" => {
                    obj.subnet_availability_zone = Some(AvailabilityZoneDeserializer::deserialize(
                        "SubnetAvailabilityZone",
                        stack,
                    )?);
                }
                "SubnetIdentifier" => {
                    obj.subnet_identifier =
                        Some(StringDeserializer::deserialize("SubnetIdentifier", stack)?);
                }
                "SubnetOutpost" => {
                    obj.subnet_outpost =
                        Some(OutpostDeserializer::deserialize("SubnetOutpost", stack)?);
                }
                "SubnetStatus" => {
                    obj.subnet_status =
                        Some(StringDeserializer::deserialize("SubnetStatus", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `SubnetIdentifierList` contents to a `SignedRequest`.
struct SubnetIdentifierListSerializer;
impl SubnetIdentifierListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[allow(dead_code)]
struct SubnetListDeserializer;
impl SubnetListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Subnet>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Subnet" {
                obj.push(SubnetDeserializer::deserialize("Subnet", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct SupportedCharacterSetsListDeserializer;
impl SupportedCharacterSetsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CharacterSet>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "CharacterSet" {
                obj.push(CharacterSetDeserializer::deserialize(
                    "CharacterSet",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct SupportedTimezonesListDeserializer;
impl SupportedTimezonesListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Timezone>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Timezone" {
                obj.push(TimezoneDeserializer::deserialize("Timezone", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct TStampDeserializer;
impl TStampDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p>Metadata assigned to an Amazon RDS resource consisting of a key-value pair.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct Tag {
    /// <p>A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with <code>aws:</code> or <code>rds:</code>. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").</p>
    pub key: Option<String>,
    /// <p>A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with <code>aws:</code> or <code>rds:</code>. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").</p>
    pub value: Option<String>,
}

#[allow(dead_code)]
struct TagDeserializer;
impl TagDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Tag, XmlParseError> {
        deserialize_elements::<_, Tag, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Key" => {
                    obj.key = Some(StringDeserializer::deserialize("Key", stack)?);
                }
                "Value" => {
                    obj.value = Some(StringDeserializer::deserialize("Value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Tag` contents to a `SignedRequest`.
struct TagSerializer;
impl TagSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Tag) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.key {
            params.put(&format!("{}{}", prefix, "Key"), &field_value);
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

#[allow(dead_code)]
struct TagListDeserializer;
impl TagListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Tag>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "Tag" {
                obj.push(TagDeserializer::deserialize("Tag", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `TagList` contents to a `SignedRequest`.
struct TagListSerializer;
impl TagListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Tag>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            TagSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p><p/></p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct TagListMessage {
    /// <p>List of tags returned by the ListTagsForResource operation.</p>
    pub tag_list: Option<Vec<Tag>>,
}

#[allow(dead_code)]
struct TagListMessageDeserializer;
impl TagListMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TagListMessage, XmlParseError> {
        deserialize_elements::<_, TagListMessage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "TagList" => {
                    obj.tag_list
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("TagList", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct TargetGroupListDeserializer;
impl TargetGroupListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBProxyTargetGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(DBProxyTargetGroupDeserializer::deserialize(
                    "member", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Information about the connection health of an RDS Proxy target.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct TargetHealth {
    /// <p>A description of the health of the RDS Proxy target. If the <code>State</code> is <code>AVAILABLE</code>, a description is not included.</p>
    pub description: Option<String>,
    /// <p>The reason for the current health <code>State</code> of the RDS Proxy target.</p>
    pub reason: Option<String>,
    /// <p>The current state of the connection health lifecycle for the RDS Proxy target. The following is a typical lifecycle example for the states of an RDS Proxy target: </p> <p> <code>registering</code> &gt; <code>unavailable</code> &gt; <code>available</code> &gt; <code>unavailable</code> &gt; <code>available</code> </p>
    pub state: Option<String>,
}

#[allow(dead_code)]
struct TargetHealthDeserializer;
impl TargetHealthDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetHealth, XmlParseError> {
        deserialize_elements::<_, TargetHealth, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "Reason" => {
                    obj.reason = Some(TargetHealthReasonDeserializer::deserialize(
                        "Reason", stack,
                    )?);
                }
                "State" => {
                    obj.state = Some(TargetStateDeserializer::deserialize("State", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct TargetHealthReasonDeserializer;
impl TargetHealthReasonDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct TargetListDeserializer;
impl TargetListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DBProxyTarget>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(DBProxyTargetDeserializer::deserialize("member", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct TargetRoleDeserializer;
impl TargetRoleDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct TargetStateDeserializer;
impl TargetStateDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
#[allow(dead_code)]
struct TargetTypeDeserializer;
impl TargetTypeDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// <p>A time zone associated with a <code>DBInstance</code> or a <code>DBSnapshot</code>. This data type is an element in the response to the <code>DescribeDBInstances</code>, the <code>DescribeDBSnapshots</code>, and the <code>DescribeDBEngineVersions</code> actions. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct Timezone {
    /// <p>The name of the time zone.</p>
    pub timezone_name: Option<String>,
}

#[allow(dead_code)]
struct TimezoneDeserializer;
impl TimezoneDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Timezone, XmlParseError> {
        deserialize_elements::<_, Timezone, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "TimezoneName" => {
                    obj.timezone_name =
                        Some(StringDeserializer::deserialize("TimezoneName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The version of the database engine that a DB instance can be upgraded to.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct UpgradeTarget {
    /// <p>A value that indicates whether the target version is applied to any source DB instances that have <code>AutoMinorVersionUpgrade</code> set to true.</p>
    pub auto_upgrade: Option<bool>,
    /// <p>The version of the database engine that a DB instance can be upgraded to.</p>
    pub description: Option<String>,
    /// <p>The name of the upgrade target database engine.</p>
    pub engine: Option<String>,
    /// <p>The version number of the upgrade target database engine.</p>
    pub engine_version: Option<String>,
    /// <p>A value that indicates whether upgrading to the target version requires upgrading the major version of the database engine.</p>
    pub is_major_version_upgrade: Option<bool>,
    /// <p>A list of the supported DB engine modes for the target engine version.</p>
    pub supported_engine_modes: Option<Vec<String>>,
    /// <p>A value that indicates whether you can use Aurora global databases with the target engine version.</p>
    pub supports_global_databases: Option<bool>,
    /// <p>A value that indicates whether you can use Aurora parallel query with the target engine version.</p>
    pub supports_parallel_query: Option<bool>,
}

#[allow(dead_code)]
struct UpgradeTargetDeserializer;
impl UpgradeTargetDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UpgradeTarget, XmlParseError> {
        deserialize_elements::<_, UpgradeTarget, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AutoUpgrade" => {
                    obj.auto_upgrade =
                        Some(BooleanDeserializer::deserialize("AutoUpgrade", stack)?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "Engine" => {
                    obj.engine = Some(StringDeserializer::deserialize("Engine", stack)?);
                }
                "EngineVersion" => {
                    obj.engine_version =
                        Some(StringDeserializer::deserialize("EngineVersion", stack)?);
                }
                "IsMajorVersionUpgrade" => {
                    obj.is_major_version_upgrade = Some(BooleanDeserializer::deserialize(
                        "IsMajorVersionUpgrade",
                        stack,
                    )?);
                }
                "SupportedEngineModes" => {
                    obj.supported_engine_modes.get_or_insert(vec![]).extend(
                        EngineModeListDeserializer::deserialize("SupportedEngineModes", stack)?,
                    );
                }
                "SupportsGlobalDatabases" => {
                    obj.supports_global_databases = Some(BooleanOptionalDeserializer::deserialize(
                        "SupportsGlobalDatabases",
                        stack,
                    )?);
                }
                "SupportsParallelQuery" => {
                    obj.supports_parallel_query = Some(BooleanOptionalDeserializer::deserialize(
                        "SupportsParallelQuery",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Specifies the details of authentication used by a proxy to log in as a specific database user.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "deserialize_structs", derive(Deserialize))]
pub struct UserAuthConfig {
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    pub auth_scheme: Option<String>,
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    pub description: Option<String>,
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.</p>
    pub iam_auth: Option<String>,
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    pub secret_arn: Option<String>,
    /// <p>The name of the database user to which the proxy connects.</p>
    pub user_name: Option<String>,
}

/// Serialize `UserAuthConfig` contents to a `SignedRequest`.
struct UserAuthConfigSerializer;
impl UserAuthConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UserAuthConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auth_scheme {
            params.put(&format!("{}{}", prefix, "AuthScheme"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.iam_auth {
            params.put(&format!("{}{}", prefix, "IAMAuth"), &field_value);
        }
        if let Some(ref field_value) = obj.secret_arn {
            params.put(&format!("{}{}", prefix, "SecretArn"), &field_value);
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"), &field_value);
        }
    }
}

/// <p>Returns the details of authentication used by a proxy to log in as a specific database user.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct UserAuthConfigInfo {
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    pub auth_scheme: Option<String>,
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    pub description: Option<String>,
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.</p>
    pub iam_auth: Option<String>,
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    pub secret_arn: Option<String>,
    /// <p>The name of the database user to which the proxy connects.</p>
    pub user_name: Option<String>,
}

#[allow(dead_code)]
struct UserAuthConfigInfoDeserializer;
impl UserAuthConfigInfoDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UserAuthConfigInfo, XmlParseError> {
        deserialize_elements::<_, UserAuthConfigInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AuthScheme" => {
                    obj.auth_scheme =
                        Some(AuthSchemeDeserializer::deserialize("AuthScheme", stack)?);
                }
                "Description" => {
                    obj.description = Some(StringDeserializer::deserialize("Description", stack)?);
                }
                "IAMAuth" => {
                    obj.iam_auth = Some(IAMAuthModeDeserializer::deserialize("IAMAuth", stack)?);
                }
                "SecretArn" => {
                    obj.secret_arn = Some(StringDeserializer::deserialize("SecretArn", stack)?);
                }
                "UserName" => {
                    obj.user_name = Some(StringDeserializer::deserialize("UserName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct UserAuthConfigInfoListDeserializer;
impl UserAuthConfigInfoListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UserAuthConfigInfo>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "member" {
                obj.push(UserAuthConfigInfoDeserializer::deserialize(
                    "member", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `UserAuthConfigList` contents to a `SignedRequest`.
struct UserAuthConfigListSerializer;
impl UserAuthConfigListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<UserAuthConfig>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            UserAuthConfigSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the <code>DescribeValidDBInstanceModifications</code> action. You can use this information when you call <code>ModifyDBInstance</code>. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ValidDBInstanceModificationsMessage {
    /// <p>Valid storage options for your DB instance. </p>
    pub storage: Option<Vec<ValidStorageOptions>>,
    /// <p>Valid processor features for your DB instance. </p>
    pub valid_processor_features: Option<Vec<AvailableProcessorFeature>>,
}

#[allow(dead_code)]
struct ValidDBInstanceModificationsMessageDeserializer;
impl ValidDBInstanceModificationsMessageDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ValidDBInstanceModificationsMessage, XmlParseError> {
        deserialize_elements::<_, ValidDBInstanceModificationsMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Storage" => {
                        obj.storage.get_or_insert(vec![]).extend(
                            ValidStorageOptionsListDeserializer::deserialize("Storage", stack)?,
                        );
                    }
                    "ValidProcessorFeatures" => {
                        obj.valid_processor_features.get_or_insert(vec![]).extend(
                            AvailableProcessorFeatureListDeserializer::deserialize(
                                "ValidProcessorFeatures",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the <code>DescribeValidDBInstanceModifications</code> action. </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct ValidStorageOptions {
    /// <p>The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage. </p>
    pub iops_to_storage_ratio: Option<Vec<DoubleRange>>,
    /// <p>The valid range of provisioned IOPS. For example, 1000-20000. </p>
    pub provisioned_iops: Option<Vec<Range>>,
    /// <p>The valid range of storage in gibibytes. For example, 100 to 16384. </p>
    pub storage_size: Option<Vec<Range>>,
    /// <p>The valid storage types for your DB instance. For example, gp2, io1. </p>
    pub storage_type: Option<String>,
    /// <p>Whether or not Amazon RDS can automatically scale storage for DB instances that use the new instance class.</p>
    pub supports_storage_autoscaling: Option<bool>,
}

#[allow(dead_code)]
struct ValidStorageOptionsDeserializer;
impl ValidStorageOptionsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ValidStorageOptions, XmlParseError> {
        deserialize_elements::<_, ValidStorageOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "IopsToStorageRatio" => {
                    obj.iops_to_storage_ratio.get_or_insert(vec![]).extend(
                        DoubleRangeListDeserializer::deserialize("IopsToStorageRatio", stack)?,
                    );
                }
                "ProvisionedIops" => {
                    obj.provisioned_iops.get_or_insert(vec![]).extend(
                        RangeListDeserializer::deserialize("ProvisionedIops", stack)?,
                    );
                }
                "StorageSize" => {
                    obj.storage_size
                        .get_or_insert(vec![])
                        .extend(RangeListDeserializer::deserialize("StorageSize", stack)?);
                }
                "StorageType" => {
                    obj.storage_type = Some(StringDeserializer::deserialize("StorageType", stack)?);
                }
                "SupportsStorageAutoscaling" => {
                    obj.supports_storage_autoscaling = Some(BooleanDeserializer::deserialize(
                        "SupportsStorageAutoscaling",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ValidStorageOptionsListDeserializer;
impl ValidStorageOptionsListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ValidStorageOptions>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "ValidStorageOptions" {
                obj.push(ValidStorageOptionsDeserializer::deserialize(
                    "ValidStorageOptions",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct ValidUpgradeTargetListDeserializer;
impl ValidUpgradeTargetListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UpgradeTarget>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "UpgradeTarget" {
                obj.push(UpgradeTargetDeserializer::deserialize(
                    "UpgradeTarget",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `VpcSecurityGroupIdList` contents to a `SignedRequest`.
struct VpcSecurityGroupIdListSerializer;
impl VpcSecurityGroupIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            // let key = format!("{}.member.{}", name, index + 1);
            let key = format!("VpcSecurityGroupIds.{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>This data type is used as a response element for queries on VPC security group membership.</p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct VpcSecurityGroupMembership {
    /// <p>The status of the VPC security group.</p>
    pub status: Option<String>,
    /// <p>The name of the VPC security group.</p>
    pub vpc_security_group_id: Option<String>,
}

#[allow(dead_code)]
struct VpcSecurityGroupMembershipDeserializer;
impl VpcSecurityGroupMembershipDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcSecurityGroupMembership, XmlParseError> {
        deserialize_elements::<_, VpcSecurityGroupMembership, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "Status" => {
                        obj.status = Some(StringDeserializer::deserialize("Status", stack)?);
                    }
                    "VpcSecurityGroupId" => {
                        obj.vpc_security_group_id = Some(StringDeserializer::deserialize(
                            "VpcSecurityGroupId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[allow(dead_code)]
struct VpcSecurityGroupMembershipListDeserializer;
impl VpcSecurityGroupMembershipListDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcSecurityGroupMembership>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "VpcSecurityGroupMembership" {
                obj.push(VpcSecurityGroupMembershipDeserializer::deserialize(
                    "VpcSecurityGroupMembership",
                    stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Information about the virtual private network (VPN) between the VMware vSphere cluster and the Amazon Web Services website.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
#[derive(Clone, Debug, Default, PartialEq)]
#[cfg_attr(feature = "serialize_structs", derive(Serialize))]
pub struct VpnDetails {
    /// <p>The IP address of network traffic from Amazon Web Services to your on-premises data center.</p>
    pub vpn_gateway_ip: Option<String>,
    /// <p>The ID of the VPN.</p>
    pub vpn_id: Option<String>,
    /// <p>The name of the VPN.</p>
    pub vpn_name: Option<String>,
    /// <p>The preshared key (PSK) for the VPN.</p>
    pub vpn_psk: Option<String>,
    /// <p>The state of the VPN.</p>
    pub vpn_state: Option<String>,
    /// <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p>
    pub vpn_tunnel_originator_ip: Option<String>,
}

#[allow(dead_code)]
struct VpnDetailsDeserializer;
impl VpnDetailsDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpnDetails, XmlParseError> {
        deserialize_elements::<_, VpnDetails, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "VpnGatewayIp" => {
                    obj.vpn_gateway_ip =
                        Some(StringDeserializer::deserialize("VpnGatewayIp", stack)?);
                }
                "VpnId" => {
                    obj.vpn_id = Some(StringDeserializer::deserialize("VpnId", stack)?);
                }
                "VpnName" => {
                    obj.vpn_name = Some(StringDeserializer::deserialize("VpnName", stack)?);
                }
                "VpnPSK" => {
                    obj.vpn_psk = Some(StringSensitiveDeserializer::deserialize("VpnPSK", stack)?);
                }
                "VpnState" => {
                    obj.vpn_state = Some(StringDeserializer::deserialize("VpnState", stack)?);
                }
                "VpnTunnelOriginatorIP" => {
                    obj.vpn_tunnel_originator_ip = Some(StringDeserializer::deserialize(
                        "VpnTunnelOriginatorIP",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[allow(dead_code)]
struct WriteForwardingStatusDeserializer;
impl WriteForwardingStatusDeserializer {
    #[allow(dead_code, unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        xml_util::deserialize_primitive(tag_name, stack, Ok)
    }
}
/// Errors returned by AddRoleToDBCluster
#[derive(Debug, PartialEq)]
pub enum AddRoleToDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
    DBClusterRoleAlreadyExistsFault(String),
    /// <p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
    DBClusterRoleQuotaExceededFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl AddRoleToDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AddRoleToDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            AddRoleToDBClusterError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBClusterRoleAlreadyExists" => {
                        return RusotoError::Service(
                            AddRoleToDBClusterError::DBClusterRoleAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterRoleQuotaExceeded" => {
                        return RusotoError::Service(
                            AddRoleToDBClusterError::DBClusterRoleQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            AddRoleToDBClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AddRoleToDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AddRoleToDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            AddRoleToDBClusterError::DBClusterRoleAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddRoleToDBClusterError::DBClusterRoleQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddRoleToDBClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for AddRoleToDBClusterError {}
/// Errors returned by AddRoleToDBInstance
#[derive(Debug, PartialEq)]
pub enum AddRoleToDBInstanceError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified <code>RoleArn</code> or <code>FeatureName</code> value is already associated with the DB instance.</p>
    DBInstanceRoleAlreadyExistsFault(String),
    /// <p>You can't associate any more Amazon Web Services Identity and Access Management (IAM) roles with the DB instance because the quota has been reached.</p>
    DBInstanceRoleQuotaExceededFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl AddRoleToDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AddRoleToDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            AddRoleToDBInstanceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceRoleAlreadyExists" => {
                        return RusotoError::Service(
                            AddRoleToDBInstanceError::DBInstanceRoleAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceRoleQuotaExceeded" => {
                        return RusotoError::Service(
                            AddRoleToDBInstanceError::DBInstanceRoleQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            AddRoleToDBInstanceError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AddRoleToDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AddRoleToDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            AddRoleToDBInstanceError::DBInstanceRoleAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddRoleToDBInstanceError::DBInstanceRoleQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddRoleToDBInstanceError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for AddRoleToDBInstanceError {}
/// Errors returned by AddSourceIdentifierToSubscription
#[derive(Debug, PartialEq)]
pub enum AddSourceIdentifierToSubscriptionError {
    /// <p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
}

impl AddSourceIdentifierToSubscriptionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AddSourceIdentifierToSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "SourceNotFound" => {
                        return RusotoError::Service(
                            AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionNotFound" => {
                        return RusotoError::Service(
                            AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AddSourceIdentifierToSubscriptionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for AddSourceIdentifierToSubscriptionError {}
/// Errors returned by AddTagsToResource
#[derive(Debug, PartialEq)]
pub enum AddTagsToResourceError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl AddTagsToResourceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AddTagsToResourceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            AddTagsToResourceError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            AddTagsToResourceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(AddTagsToResourceError::DBProxyNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            AddTagsToResourceError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            AddTagsToResourceError::DBSnapshotNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AddTagsToResourceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AddTagsToResourceError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            AddTagsToResourceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            AddTagsToResourceError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            AddTagsToResourceError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AddTagsToResourceError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for AddTagsToResourceError {}
/// Errors returned by ApplyPendingMaintenanceAction
#[derive(Debug, PartialEq)]
pub enum ApplyPendingMaintenanceActionError {
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
}

impl ApplyPendingMaintenanceActionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ApplyPendingMaintenanceActionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ApplyPendingMaintenanceActionError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            ApplyPendingMaintenanceActionError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ResourceNotFoundFault" => {
                        return RusotoError::Service(
                            ApplyPendingMaintenanceActionError::ResourceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ApplyPendingMaintenanceActionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ApplyPendingMaintenanceActionError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ApplyPendingMaintenanceActionError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ApplyPendingMaintenanceActionError::ResourceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ApplyPendingMaintenanceActionError {}
/// Errors returned by AuthorizeDBSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum AuthorizeDBSecurityGroupIngressError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group is already authorized for the specified DB security group.</p>
    AuthorizationAlreadyExistsFault(String),
    /// <p>The DB security group authorization quota has been reached.</p>
    AuthorizationQuotaExceededFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
}

impl AuthorizeDBSecurityGroupIngressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AuthorizeDBSecurityGroupIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationAlreadyExists" => {
                        return RusotoError::Service(
                            AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "AuthorizationQuotaExceeded" => {
                        return RusotoError::Service(
                            AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            AuthorizeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSecurityGroupState" => {
                        return RusotoError::Service(
                            AuthorizeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AuthorizeDBSecurityGroupIngressError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AuthorizeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            AuthorizeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for AuthorizeDBSecurityGroupIngressError {}
/// Errors returned by BacktrackDBCluster
#[derive(Debug, PartialEq)]
pub enum BacktrackDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl BacktrackDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<BacktrackDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            BacktrackDBClusterError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            BacktrackDBClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for BacktrackDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            BacktrackDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            BacktrackDBClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for BacktrackDBClusterError {}
/// Errors returned by CancelExportTask
#[derive(Debug, PartialEq)]
pub enum CancelExportTaskError {
    /// <p>The export task doesn't exist.</p>
    ExportTaskNotFoundFault(String),
    /// <p>You can't cancel an export task that has completed.</p>
    InvalidExportTaskStateFault(String),
}

impl CancelExportTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelExportTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "ExportTaskNotFound" => {
                        return RusotoError::Service(
                            CancelExportTaskError::ExportTaskNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidExportTaskStateFault" => {
                        return RusotoError::Service(
                            CancelExportTaskError::InvalidExportTaskStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelExportTaskError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CancelExportTaskError::ExportTaskNotFoundFault(ref cause) => write!(f, "{}", cause),
            CancelExportTaskError::InvalidExportTaskStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CancelExportTaskError {}
/// Errors returned by CopyDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum CopyDBClusterParameterGroupError {
    /// <p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
}

impl CopyDBClusterParameterGroupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CopyDBClusterParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CopyDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            CopyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupQuotaExceeded" => {
                        return RusotoError::Service(
                            CopyDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyDBClusterParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CopyDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CopyDBClusterParameterGroupError {}
/// Errors returned by CopyDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum CopyDBClusterSnapshotError {
    /// <p>The user already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl CopyDBClusterSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyDBClusterSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyDBClusterSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CopyDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterSnapshotError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterSnapshotError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CopyDBClusterSnapshotError {}
/// Errors returned by CopyDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum CopyDBParameterGroupError {
    /// <p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
}

impl CopyDBParameterGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyDBParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CopyDBParameterGroupError::DBParameterGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            CopyDBParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupQuotaExceeded" => {
                        return RusotoError::Service(
                            CopyDBParameterGroupError::DBParameterGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyDBParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CopyDBParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CopyDBParameterGroupError {}
/// Errors returned by CopyDBSnapshot
#[derive(Debug, PartialEq)]
pub enum CopyDBSnapshotError {
    /// <p> <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl CopyDBSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyDBSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CustomAvailabilityZoneNotFound" => {
                        return RusotoError::Service(
                            CopyDBSnapshotError::CustomAvailabilityZoneNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotAlreadyExists" => {
                        return RusotoError::Service(
                            CopyDBSnapshotError::DBSnapshotAlreadyExistsFault(parsed_error.message),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(CopyDBSnapshotError::DBSnapshotNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            CopyDBSnapshotError::InvalidDBSnapshotStateFault(parsed_error.message),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(CopyDBSnapshotError::KMSKeyNotAccessibleFault(
                            parsed_error.message,
                        ))
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            CopyDBSnapshotError::SnapshotQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyDBSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CopyDBSnapshotError::CustomAvailabilityZoneNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyDBSnapshotError::DBSnapshotAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            CopyDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
            CopyDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => write!(f, "{}", cause),
            CopyDBSnapshotError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
            CopyDBSnapshotError::SnapshotQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CopyDBSnapshotError {}
/// Errors returned by CopyOptionGroup
#[derive(Debug, PartialEq)]
pub enum CopyOptionGroupError {
    /// <p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>The quota of 20 option groups was exceeded for this Amazon Web Services account.</p>
    OptionGroupQuotaExceededFault(String),
}

impl CopyOptionGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyOptionGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "OptionGroupAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CopyOptionGroupError::OptionGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CopyOptionGroupError::OptionGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "OptionGroupQuotaExceededFault" => {
                        return RusotoError::Service(
                            CopyOptionGroupError::OptionGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyOptionGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CopyOptionGroupError::OptionGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CopyOptionGroupError::OptionGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            CopyOptionGroupError::OptionGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CopyOptionGroupError {}
/// Errors returned by CreateCustomAvailabilityZone
#[derive(Debug, PartialEq)]
pub enum CreateCustomAvailabilityZoneError {
    /// <p> <code>CustomAvailabilityZoneName</code> is already used by an existing custom Availability Zone.</p>
    CustomAvailabilityZoneAlreadyExistsFault(String),
    /// <p>You have exceeded the maximum number of custom Availability Zones.</p>
    CustomAvailabilityZoneQuotaExceededFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
}

impl CreateCustomAvailabilityZoneError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateCustomAvailabilityZoneError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CustomAvailabilityZoneAlreadyExists" => return RusotoError::Service(
                        CreateCustomAvailabilityZoneError::CustomAvailabilityZoneAlreadyExistsFault(
                            parsed_error.message,
                        ),
                    ),
                    "CustomAvailabilityZoneQuotaExceeded" => return RusotoError::Service(
                        CreateCustomAvailabilityZoneError::CustomAvailabilityZoneQuotaExceededFault(
                            parsed_error.message,
                        ),
                    ),
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            CreateCustomAvailabilityZoneError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateCustomAvailabilityZoneError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateCustomAvailabilityZoneError::CustomAvailabilityZoneAlreadyExistsFault(
                ref cause,
            ) => write!(f, "{}", cause),
            CreateCustomAvailabilityZoneError::CustomAvailabilityZoneQuotaExceededFault(
                ref cause,
            ) => write!(f, "{}", cause),
            CreateCustomAvailabilityZoneError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateCustomAvailabilityZoneError {}
/// Errors returned by CreateDBCluster
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterError {
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
}

impl CreateDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::DBClusterAlreadyExistsFault(parsed_error.message),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(CreateDBClusterError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBClusterParameterGroupNotFound" => {
                        return RusotoError::Service(
                            CreateDBClusterError::DBClusterParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::DBClusterQuotaExceededFault(parsed_error.message),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(CreateDBClusterError::DBInstanceNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            CreateDBClusterError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::DBSubnetGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(CreateDBClusterError::DomainNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::GlobalClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "InsufficientStorageClusterCapacity" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InsufficientStorageClusterCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBSubnetGroupStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InvalidDBSubnetGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidGlobalClusterStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InvalidGlobalClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(CreateDBClusterError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::InvalidVPCNetworkStateFault(parsed_error.message),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            CreateDBClusterError::KMSKeyNotAccessibleFault(parsed_error.message),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBClusterError::StorageQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBClusterError::DBClusterAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::DBClusterParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterError::DBClusterQuotaExceededFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterError::DBSubnetGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::DomainNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::GlobalClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::InsufficientStorageClusterCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::InvalidDBSubnetGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterError::InvalidGlobalClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::InvalidVPCNetworkStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
            CreateDBClusterError::StorageQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CreateDBClusterError {}
/// Errors returned by CreateDBClusterEndpoint
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterEndpointError {
    /// <p>The specified custom endpoint can't be created because it already exists.</p>
    DBClusterEndpointAlreadyExistsFault(String),
    /// <p>The cluster already has the maximum number of custom endpoints.</p>
    DBClusterEndpointQuotaExceededFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl CreateDBClusterEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBClusterEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterEndpointAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::DBClusterEndpointAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterEndpointQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::DBClusterEndpointQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            CreateDBClusterEndpointError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBClusterEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBClusterEndpointError::DBClusterEndpointAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterEndpointError::DBClusterEndpointQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterEndpointError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterEndpointError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterEndpointError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterEndpointError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBClusterEndpointError {}
/// Errors returned by CreateDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterParameterGroupError {
    /// <p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
}

impl CreateDBClusterParameterGroupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateDBClusterParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBClusterParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBClusterParameterGroupError {}
/// Errors returned by CreateDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterSnapshotError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The user already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl CreateDBClusterSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBClusterSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBClusterSnapshotError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterSnapshotAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CreateDBClusterSnapshotError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBClusterSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBClusterSnapshotError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterSnapshotError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBClusterSnapshotError {}
/// Errors returned by CreateDBInstance
#[derive(Debug, PartialEq)]
pub enum CreateDBInstanceError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),

    BackupPolicyNotFoundFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl CreateDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::AuthorizationNotFoundFault(parsed_error.message),
                        )
                    }
                    "BackupPolicyNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::BackupPolicyNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(CreateDBInstanceError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::DBSubnetGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(CreateDBInstanceError::DomainNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InstanceQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::InstanceQuotaExceededFault(parsed_error.message),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::InsufficientDBInstanceCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(CreateDBInstanceError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::KMSKeyNotAccessibleFault(parsed_error.message),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::OptionGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::ProvisionedIopsNotAvailableInAZFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::StorageQuotaExceededFault(parsed_error.message),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            CreateDBInstanceError::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBInstanceError::AuthorizationNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::BackupPolicyNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::DBSubnetGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::DomainNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::InstanceQuotaExceededFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::OptionGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::ProvisionedIopsNotAvailableInAZFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceError::StorageQuotaExceededFault(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceError::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBInstanceError {}
/// Errors returned by CreateDBInstanceReadReplica
#[derive(Debug, PartialEq)]
pub enum CreateDBInstanceReadReplicaError {
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p>The DBSubnetGroup shouldn't be specified while creating read replicas that lie in the same region as the source instance.</p>
    DBSubnetGroupNotAllowedFault(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The DBSubnetGroup doesn't belong to the same VPC as that of an existing cross-region read replica of the same source instance.</p>
    InvalidDBSubnetGroupFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl CreateDBInstanceReadReplicaError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateDBInstanceReadReplicaError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotAllowedFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBSubnetGroupNotAllowedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::DomainNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InstanceQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InsufficientDBInstanceCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSubnetGroupFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InvalidDBSubnetGroupFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InvalidSubnet(parsed_error.message),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAZFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBInstanceReadReplicaError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBInstanceReadReplicaError::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBSubnetGroupNotAllowedFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::DomainNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::InvalidDBSubnetGroupFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            CreateDBInstanceReadReplicaError::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAZFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBInstanceReadReplicaError {}
/// Errors returned by CreateDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBParameterGroupError {
    /// <p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
}

impl CreateDBParameterGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBParameterGroupError::DBParameterGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBParameterGroupError::DBParameterGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBParameterGroupError {}
/// Errors returned by CreateDBProxy
#[derive(Debug, PartialEq)]
pub enum CreateDBProxyError {
    /// <p>The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyAlreadyExistsFault(String),
    /// <p>Your Amazon Web Services account already has the maximum number of proxies in the specified Amazon Web Services Region.</p>
    DBProxyQuotaExceededFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
}

impl CreateDBProxyError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBProxyError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyAlreadyExistsFault" => {
                        return RusotoError::Service(CreateDBProxyError::DBProxyAlreadyExistsFault(
                            parsed_error.message,
                        ))
                    }
                    "DBProxyQuotaExceededFault" => {
                        return RusotoError::Service(CreateDBProxyError::DBProxyQuotaExceededFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(CreateDBProxyError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBProxyError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBProxyError::DBProxyAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            CreateDBProxyError::DBProxyQuotaExceededFault(ref cause) => write!(f, "{}", cause),
            CreateDBProxyError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CreateDBProxyError {}
/// Errors returned by CreateDBProxyEndpoint
#[derive(Debug, PartialEq)]
pub enum CreateDBProxyEndpointError {
    /// <p>The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyEndpointAlreadyExistsFault(String),
    /// <p>The DB proxy already has the maximum number of endpoints.</p>
    DBProxyEndpointQuotaExceededFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
}

impl CreateDBProxyEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBProxyEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyEndpointAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateDBProxyEndpointError::DBProxyEndpointAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyEndpointQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateDBProxyEndpointError::DBProxyEndpointQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            CreateDBProxyEndpointError::DBProxyNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            CreateDBProxyEndpointError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(CreateDBProxyEndpointError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBProxyEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBProxyEndpointError::DBProxyEndpointAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBProxyEndpointError::DBProxyEndpointQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBProxyEndpointError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBProxyEndpointError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBProxyEndpointError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CreateDBProxyEndpointError {}
/// Errors returned by CreateDBSecurityGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBSecurityGroupError {
    /// <p> A DB security group with the name specified in <code>DBSecurityGroupName</code> already exists. </p>
    DBSecurityGroupAlreadyExistsFault(String),
    /// <p>A DB security group isn't allowed for this action.</p>
    DBSecurityGroupNotSupportedFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB security groups.</p>
    DBSecurityGroupQuotaExceededFault(String),
}

impl CreateDBSecurityGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBSecurityGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSecurityGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBSecurityGroupError::DBSecurityGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotSupported" => {
                        return RusotoError::Service(
                            CreateDBSecurityGroupError::DBSecurityGroupNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "QuotaExceeded.DBSecurityGroup" => {
                        return RusotoError::Service(
                            CreateDBSecurityGroupError::DBSecurityGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBSecurityGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBSecurityGroupError::DBSecurityGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSecurityGroupError::DBSecurityGroupNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSecurityGroupError::DBSecurityGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateDBSecurityGroupError {}
/// Errors returned by CreateDBSnapshot
#[derive(Debug, PartialEq)]
pub enum CreateDBSnapshotError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl CreateDBSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            CreateDBSnapshotError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBSnapshotAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBSnapshotError::DBSnapshotAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            CreateDBSnapshotError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBSnapshotError::SnapshotQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBSnapshotError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateDBSnapshotError::DBSnapshotAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSnapshotError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            CreateDBSnapshotError::SnapshotQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CreateDBSnapshotError {}
/// Errors returned by CreateDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBSubnetGroupError {
    /// <p> <code>DBSubnetGroupName</code> is already used by an existing DB subnet group. </p>
    DBSubnetGroupAlreadyExistsFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p>The request would result in the user exceeding the allowed number of DB subnet groups.</p>
    DBSubnetGroupQuotaExceededFault(String),
    /// <p>The request would result in the user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DBSubnetQuotaExceededFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
}

impl CreateDBSubnetGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDBSubnetGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSubnetGroupAlreadyExists" => {
                        return RusotoError::Service(
                            CreateDBSubnetGroupError::DBSubnetGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            CreateDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateDBSubnetGroupError::DBSubnetGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateDBSubnetGroupError::DBSubnetQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(CreateDBSubnetGroupError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDBSubnetGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateDBSubnetGroupError::DBSubnetGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSubnetGroupError::DBSubnetGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSubnetGroupError::DBSubnetQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateDBSubnetGroupError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for CreateDBSubnetGroupError {}
/// Errors returned by CreateEventSubscription
#[derive(Debug, PartialEq)]
pub enum CreateEventSubscriptionError {
    /// <p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(String),
    /// <p>SNS has responded that there is a problem with the SND topic specified.</p>
    SNSInvalidTopicFault(String),
    /// <p>You do not have permission to publish to the SNS topic ARN.</p>
    SNSNoAuthorizationFault(String),
    /// <p>The SNS topic ARN does not exist.</p>
    SNSTopicArnNotFoundFault(String),
    /// <p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    /// <p>The supplied subscription name already exists.</p>
    SubscriptionAlreadyExistFault(String),
    /// <p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(String),
}

impl CreateEventSubscriptionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateEventSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "EventSubscriptionQuotaExceeded" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSInvalidTopic" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SNSInvalidTopicFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSNoAuthorization" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SNSNoAuthorizationFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSTopicArnNotFound" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SNSTopicArnNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SourceNotFound" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SourceNotFoundFault(parsed_error.message),
                        )
                    }
                    "SubscriptionAlreadyExist" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SubscriptionAlreadyExistFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionCategoryNotFound" => {
                        return RusotoError::Service(
                            CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateEventSubscriptionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateEventSubscriptionError::SNSInvalidTopicFault(ref cause) => write!(f, "{}", cause),
            CreateEventSubscriptionError::SNSNoAuthorizationFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateEventSubscriptionError::SNSTopicArnNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateEventSubscriptionError::SourceNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateEventSubscriptionError::SubscriptionAlreadyExistFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateEventSubscriptionError {}
/// Errors returned by CreateGlobalCluster
#[derive(Debug, PartialEq)]
pub enum CreateGlobalClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global database identifier (unique name) to create a new global database cluster.</p>
    GlobalClusterAlreadyExistsFault(String),
    /// <p>The number of global database clusters for this account is already at the maximum allowed.</p>
    GlobalClusterQuotaExceededFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl CreateGlobalClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateGlobalClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            CreateGlobalClusterError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "GlobalClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "GlobalClusterQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateGlobalClusterError::GlobalClusterQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            CreateGlobalClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateGlobalClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateGlobalClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateGlobalClusterError::GlobalClusterQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateGlobalClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateGlobalClusterError {}
/// Errors returned by CreateOptionGroup
#[derive(Debug, PartialEq)]
pub enum CreateOptionGroupError {
    /// <p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(String),
    /// <p>The quota of 20 option groups was exceeded for this Amazon Web Services account.</p>
    OptionGroupQuotaExceededFault(String),
}

impl CreateOptionGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateOptionGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "OptionGroupAlreadyExistsFault" => {
                        return RusotoError::Service(
                            CreateOptionGroupError::OptionGroupAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupQuotaExceededFault" => {
                        return RusotoError::Service(
                            CreateOptionGroupError::OptionGroupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateOptionGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CreateOptionGroupError::OptionGroupAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            CreateOptionGroupError::OptionGroupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for CreateOptionGroupError {}
/// Errors returned by DeleteCustomAvailabilityZone
#[derive(Debug, PartialEq)]
pub enum DeleteCustomAvailabilityZoneError {
    /// <p> <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
}

impl DeleteCustomAvailabilityZoneError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteCustomAvailabilityZoneError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CustomAvailabilityZoneNotFound" => {
                        return RusotoError::Service(
                            DeleteCustomAvailabilityZoneError::CustomAvailabilityZoneNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            DeleteCustomAvailabilityZoneError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteCustomAvailabilityZoneError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteCustomAvailabilityZoneError::CustomAvailabilityZoneNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteCustomAvailabilityZoneError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteCustomAvailabilityZoneError {}
/// Errors returned by DeleteDBCluster
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The user already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl DeleteDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(DeleteDBClusterError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBClusterSnapshotAlreadyExistsFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterError::DBClusterSnapshotAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            DeleteDBClusterError::SnapshotQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            DeleteDBClusterError::DBClusterSnapshotAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            DeleteDBClusterError::SnapshotQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteDBClusterError {}
/// Errors returned by DeleteDBClusterEndpoint
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterEndpointError {
    /// <p>The specified custom endpoint doesn't exist.</p>
    DBClusterEndpointNotFoundFault(String),
    /// <p>The requested operation can't be performed on the endpoint while the endpoint is in this state.</p>
    InvalidDBClusterEndpointStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl DeleteDBClusterEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBClusterEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterEndpointNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterEndpointError::DBClusterEndpointNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterEndpointStateFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterEndpointError::InvalidDBClusterEndpointStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterEndpointError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBClusterEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBClusterEndpointError::DBClusterEndpointNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterEndpointError::InvalidDBClusterEndpointStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterEndpointError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBClusterEndpointError {}
/// Errors returned by DeleteDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl DeleteDBClusterParameterGroupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteDBClusterParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DeleteDBClusterParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            DeleteDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBClusterParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBClusterParameterGroupError {}
/// Errors returned by DeleteDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterSnapshotError {
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
}

impl DeleteDBClusterSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBClusterSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            DeleteDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBClusterSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBClusterSnapshotError {}
/// Errors returned by DeleteDBInstance
#[derive(Debug, PartialEq)]
pub enum DeleteDBInstanceError {
    /// <p>The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB Instance quota.</p>
    DBInstanceAutomatedBackupQuotaExceededFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl DeleteDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceAutomatedBackupQuotaExceeded" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::DBInstanceAutomatedBackupQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBSnapshotAlreadyExists" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::DBSnapshotAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            DeleteDBInstanceError::SnapshotQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBInstanceError::DBInstanceAutomatedBackupQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            DeleteDBInstanceError::DBSnapshotAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBInstanceError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            DeleteDBInstanceError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            DeleteDBInstanceError::SnapshotQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteDBInstanceError {}
/// Errors returned by DeleteDBInstanceAutomatedBackup
#[derive(Debug, PartialEq)]
pub enum DeleteDBInstanceAutomatedBackupError {
    /// <p>No automated backup for this DB instance was found.</p>
    DBInstanceAutomatedBackupNotFoundFault(String),
    /// <p>The automated backup is in an invalid state. For example, this automated backup is associated with an active instance. </p>
    InvalidDBInstanceAutomatedBackupStateFault(String),
}

impl DeleteDBInstanceAutomatedBackupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteDBInstanceAutomatedBackupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                                    "DBInstanceAutomatedBackupNotFound" => return RusotoError::Service(DeleteDBInstanceAutomatedBackupError::DBInstanceAutomatedBackupNotFoundFault(parsed_error.message)),"InvalidDBInstanceAutomatedBackupState" => return RusotoError::Service(DeleteDBInstanceAutomatedBackupError::InvalidDBInstanceAutomatedBackupStateFault(parsed_error.message)),_ => {}
                                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBInstanceAutomatedBackupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBInstanceAutomatedBackupError::DBInstanceAutomatedBackupNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
            DeleteDBInstanceAutomatedBackupError::InvalidDBInstanceAutomatedBackupStateFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteDBInstanceAutomatedBackupError {}
/// Errors returned by DeleteDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl DeleteDBParameterGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DeleteDBParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            DeleteDBParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBParameterGroupError {}
/// Errors returned by DeleteDBProxy
#[derive(Debug, PartialEq)]
pub enum DeleteDBProxyError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl DeleteDBProxyError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBProxyError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(DeleteDBProxyError::DBProxyNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(DeleteDBProxyError::InvalidDBProxyStateFault(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBProxyError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBProxyError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            DeleteDBProxyError::InvalidDBProxyStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteDBProxyError {}
/// Errors returned by DeleteDBProxyEndpoint
#[derive(Debug, PartialEq)]
pub enum DeleteDBProxyEndpointError {
    /// <p>The DB proxy endpoint doesn't exist.</p>
    DBProxyEndpointNotFoundFault(String),
    /// <p>You can't perform this operation while the DB proxy endpoint is in a particular state.</p>
    InvalidDBProxyEndpointStateFault(String),
}

impl DeleteDBProxyEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBProxyEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyEndpointNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteDBProxyEndpointError::DBProxyEndpointNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyEndpointStateFault" => {
                        return RusotoError::Service(
                            DeleteDBProxyEndpointError::InvalidDBProxyEndpointStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBProxyEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBProxyEndpointError::DBProxyEndpointNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBProxyEndpointError::InvalidDBProxyEndpointStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBProxyEndpointError {}
/// Errors returned by DeleteDBSecurityGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBSecurityGroupError {
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
}

impl DeleteDBSecurityGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBSecurityGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            DeleteDBSecurityGroupError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSecurityGroupState" => {
                        return RusotoError::Service(
                            DeleteDBSecurityGroupError::InvalidDBSecurityGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBSecurityGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBSecurityGroupError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBSecurityGroupError::InvalidDBSecurityGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBSecurityGroupError {}
/// Errors returned by DeleteDBSnapshot
#[derive(Debug, PartialEq)]
pub enum DeleteDBSnapshotError {
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
}

impl DeleteDBSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            DeleteDBSnapshotError::DBSnapshotNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            DeleteDBSnapshotError::InvalidDBSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
            DeleteDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteDBSnapshotError {}
/// Errors returned by DeleteDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBSubnetGroupError {
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    /// <p> The DB subnet isn't in the <i>available</i> state. </p>
    InvalidDBSubnetStateFault(String),
}

impl DeleteDBSubnetGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDBSubnetGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteDBSubnetGroupError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSubnetGroupStateFault" => {
                        return RusotoError::Service(
                            DeleteDBSubnetGroupError::InvalidDBSubnetGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSubnetStateFault" => {
                        return RusotoError::Service(
                            DeleteDBSubnetGroupError::InvalidDBSubnetStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDBSubnetGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteDBSubnetGroupError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBSubnetGroupError::InvalidDBSubnetGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteDBSubnetGroupError::InvalidDBSubnetStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteDBSubnetGroupError {}
/// Errors returned by DeleteEventSubscription
#[derive(Debug, PartialEq)]
pub enum DeleteEventSubscriptionError {
    /// <p>This error can occur if someone else is modifying a subscription. You should retry the action.</p>
    InvalidEventSubscriptionStateFault(String),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
}

impl DeleteEventSubscriptionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteEventSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InvalidEventSubscriptionState" => {
                        return RusotoError::Service(
                            DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionNotFound" => {
                        return RusotoError::Service(
                            DeleteEventSubscriptionError::SubscriptionNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteEventSubscriptionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteEventSubscriptionError::SubscriptionNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteEventSubscriptionError {}
/// Errors returned by DeleteGlobalCluster
#[derive(Debug, PartialEq)]
pub enum DeleteGlobalClusterError {
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(String),
}

impl DeleteGlobalClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteGlobalClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteGlobalClusterError::GlobalClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidGlobalClusterStateFault" => {
                        return RusotoError::Service(
                            DeleteGlobalClusterError::InvalidGlobalClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteGlobalClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteGlobalClusterError::GlobalClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteGlobalClusterError::InvalidGlobalClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteGlobalClusterError {}
/// Errors returned by DeleteInstallationMedia
#[derive(Debug, PartialEq)]
pub enum DeleteInstallationMediaError {
    /// <p> <code>InstallationMediaID</code> doesn't refer to an existing installation medium.</p>
    InstallationMediaNotFoundFault(String),
}

impl DeleteInstallationMediaError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteInstallationMediaError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InstallationMediaNotFound" => {
                        return RusotoError::Service(
                            DeleteInstallationMediaError::InstallationMediaNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteInstallationMediaError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteInstallationMediaError::InstallationMediaNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeleteInstallationMediaError {}
/// Errors returned by DeleteOptionGroup
#[derive(Debug, PartialEq)]
pub enum DeleteOptionGroupError {
    /// <p> The option group isn't in the <i>available</i> state. </p>
    InvalidOptionGroupStateFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
}

impl DeleteOptionGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteOptionGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InvalidOptionGroupStateFault" => {
                        return RusotoError::Service(
                            DeleteOptionGroupError::InvalidOptionGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DeleteOptionGroupError::OptionGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteOptionGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeleteOptionGroupError::InvalidOptionGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeleteOptionGroupError::OptionGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DeleteOptionGroupError {}
/// Errors returned by DeregisterDBProxyTargets
#[derive(Debug, PartialEq)]
pub enum DeregisterDBProxyTargetsError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p>The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl DeregisterDBProxyTargetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeregisterDBProxyTargetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            DeregisterDBProxyTargetsError::DBProxyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DeregisterDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetNotFoundFault" => {
                        return RusotoError::Service(
                            DeregisterDBProxyTargetsError::DBProxyTargetNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            DeregisterDBProxyTargetsError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeregisterDBProxyTargetsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DeregisterDBProxyTargetsError::DBProxyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeregisterDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeregisterDBProxyTargetsError::DBProxyTargetNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DeregisterDBProxyTargetsError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DeregisterDBProxyTargetsError {}
/// Errors returned by DescribeAccountAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeAccountAttributesError {}

impl DescribeAccountAttributesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeAccountAttributesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeAccountAttributesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeAccountAttributesError {}
/// Errors returned by DescribeCertificates
#[derive(Debug, PartialEq)]
pub enum DescribeCertificatesError {
    /// <p> <code>CertificateIdentifier</code> doesn't refer to an existing certificate. </p>
    CertificateNotFoundFault(String),
}

impl DescribeCertificatesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeCertificatesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CertificateNotFound" => {
                        return RusotoError::Service(
                            DescribeCertificatesError::CertificateNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeCertificatesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeCertificatesError::CertificateNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeCertificatesError {}
/// Errors returned by DescribeCustomAvailabilityZones
#[derive(Debug, PartialEq)]
pub enum DescribeCustomAvailabilityZonesError {
    /// <p> <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(String),
}

impl DescribeCustomAvailabilityZonesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeCustomAvailabilityZonesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CustomAvailabilityZoneNotFound" => return RusotoError::Service(
                        DescribeCustomAvailabilityZonesError::CustomAvailabilityZoneNotFoundFault(
                            parsed_error.message,
                        ),
                    ),
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeCustomAvailabilityZonesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeCustomAvailabilityZonesError::CustomAvailabilityZoneNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeCustomAvailabilityZonesError {}
/// Errors returned by DescribeDBClusterBacktracks
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterBacktracksError {
    /// <p> <code>BacktrackIdentifier</code> doesn't refer to an existing backtrack. </p>
    DBClusterBacktrackNotFoundFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
}

impl DescribeDBClusterBacktracksError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterBacktracksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterBacktrackNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBClusterBacktracksError::DBClusterBacktrackNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBClusterBacktracksError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterBacktracksError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterBacktracksError::DBClusterBacktrackNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBClusterBacktracksError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterBacktracksError {}
/// Errors returned by DescribeDBClusterEndpoints
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterEndpointsError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
}

impl DescribeDBClusterEndpointsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterEndpointsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBClusterEndpointsError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterEndpointsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterEndpointsError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterEndpointsError {}
/// Errors returned by DescribeDBClusterParameterGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterParameterGroupsError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
}

impl DescribeDBClusterParameterGroupsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterParameterGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DescribeDBClusterParameterGroupsError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterParameterGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterParameterGroupsError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterParameterGroupsError {}
/// Errors returned by DescribeDBClusterParameters
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterParametersError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
}

impl DescribeDBClusterParametersError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterParametersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DescribeDBClusterParametersError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterParametersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterParametersError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterParametersError {}
/// Errors returned by DescribeDBClusterSnapshotAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterSnapshotAttributesError {
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
}

impl DescribeDBClusterSnapshotAttributesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterSnapshotAttributesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => return RusotoError::Service(
                        DescribeDBClusterSnapshotAttributesError::DBClusterSnapshotNotFoundFault(
                            parsed_error.message,
                        ),
                    ),
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterSnapshotAttributesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterSnapshotAttributesError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterSnapshotAttributesError {}
/// Errors returned by DescribeDBClusterSnapshots
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterSnapshotsError {
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
}

impl DescribeDBClusterSnapshotsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBClusterSnapshotsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBClusterSnapshotsError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClusterSnapshotsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClusterSnapshotsError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBClusterSnapshotsError {}
/// Errors returned by DescribeDBClusters
#[derive(Debug, PartialEq)]
pub enum DescribeDBClustersError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
}

impl DescribeDBClustersError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBClustersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBClustersError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBClustersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBClustersError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBClustersError {}
/// Errors returned by DescribeDBEngineVersions
#[derive(Debug, PartialEq)]
pub enum DescribeDBEngineVersionsError {}

impl DescribeDBEngineVersionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBEngineVersionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBEngineVersionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeDBEngineVersionsError {}
/// Errors returned by DescribeDBInstanceAutomatedBackups
#[derive(Debug, PartialEq)]
pub enum DescribeDBInstanceAutomatedBackupsError {
    /// <p>No automated backup for this DB instance was found.</p>
    DBInstanceAutomatedBackupNotFoundFault(String),
}

impl DescribeDBInstanceAutomatedBackupsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBInstanceAutomatedBackupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                                    "DBInstanceAutomatedBackupNotFound" => return RusotoError::Service(DescribeDBInstanceAutomatedBackupsError::DBInstanceAutomatedBackupNotFoundFault(parsed_error.message)),_ => {}
                                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBInstanceAutomatedBackupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBInstanceAutomatedBackupsError::DBInstanceAutomatedBackupNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBInstanceAutomatedBackupsError {}
/// Errors returned by DescribeDBInstances
#[derive(Debug, PartialEq)]
pub enum DescribeDBInstancesError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
}

impl DescribeDBInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            DescribeDBInstancesError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBInstancesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBInstancesError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBInstancesError {}
/// Errors returned by DescribeDBLogFiles
#[derive(Debug, PartialEq)]
pub enum DescribeDBLogFilesError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
}

impl DescribeDBLogFilesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBLogFilesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            DescribeDBLogFilesError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBLogFilesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBLogFilesError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBLogFilesError {}
/// Errors returned by DescribeDBParameterGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBParameterGroupsError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
}

impl DescribeDBParameterGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBParameterGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DescribeDBParameterGroupsError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBParameterGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBParameterGroupsError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBParameterGroupsError {}
/// Errors returned by DescribeDBParameters
#[derive(Debug, PartialEq)]
pub enum DescribeDBParametersError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
}

impl DescribeDBParametersError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBParametersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            DescribeDBParametersError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBParametersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBParametersError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBParametersError {}
/// Errors returned by DescribeDBProxies
#[derive(Debug, PartialEq)]
pub enum DescribeDBProxiesError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
}

impl DescribeDBProxiesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBProxiesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(DescribeDBProxiesError::DBProxyNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBProxiesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBProxiesError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBProxiesError {}
/// Errors returned by DescribeDBProxyEndpoints
#[derive(Debug, PartialEq)]
pub enum DescribeDBProxyEndpointsError {
    /// <p>The DB proxy endpoint doesn't exist.</p>
    DBProxyEndpointNotFoundFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
}

impl DescribeDBProxyEndpointsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBProxyEndpointsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyEndpointNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyEndpointsError::DBProxyEndpointNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyEndpointsError::DBProxyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBProxyEndpointsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBProxyEndpointsError::DBProxyEndpointNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBProxyEndpointsError::DBProxyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBProxyEndpointsError {}
/// Errors returned by DescribeDBProxyTargetGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBProxyTargetGroupsError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl DescribeDBProxyTargetGroupsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBProxyTargetGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetGroupsError::DBProxyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetGroupsError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetGroupsError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBProxyTargetGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBProxyTargetGroupsError::DBProxyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBProxyTargetGroupsError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBProxyTargetGroupsError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBProxyTargetGroupsError {}
/// Errors returned by DescribeDBProxyTargets
#[derive(Debug, PartialEq)]
pub enum DescribeDBProxyTargetsError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p>The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl DescribeDBProxyTargetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBProxyTargetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetsError::DBProxyNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetsError::DBProxyTargetNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            DescribeDBProxyTargetsError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBProxyTargetsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBProxyTargetsError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            DescribeDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBProxyTargetsError::DBProxyTargetNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeDBProxyTargetsError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBProxyTargetsError {}
/// Errors returned by DescribeDBSecurityGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBSecurityGroupsError {
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
}

impl DescribeDBSecurityGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBSecurityGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            DescribeDBSecurityGroupsError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBSecurityGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBSecurityGroupsError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBSecurityGroupsError {}
/// Errors returned by DescribeDBSnapshotAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeDBSnapshotAttributesError {
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl DescribeDBSnapshotAttributesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeDBSnapshotAttributesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            DescribeDBSnapshotAttributesError::DBSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBSnapshotAttributesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBSnapshotAttributesError::DBSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBSnapshotAttributesError {}
/// Errors returned by DescribeDBSnapshots
#[derive(Debug, PartialEq)]
pub enum DescribeDBSnapshotsError {
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl DescribeDBSnapshotsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBSnapshotsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            DescribeDBSnapshotsError::DBSnapshotNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBSnapshotsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBSnapshotsError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeDBSnapshotsError {}
/// Errors returned by DescribeDBSubnetGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBSubnetGroupsError {
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
}

impl DescribeDBSubnetGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDBSubnetGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeDBSubnetGroupsError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDBSubnetGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeDBSubnetGroupsError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeDBSubnetGroupsError {}
/// Errors returned by DescribeEngineDefaultClusterParameters
#[derive(Debug, PartialEq)]
pub enum DescribeEngineDefaultClusterParametersError {}

impl DescribeEngineDefaultClusterParametersError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeEngineDefaultClusterParametersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEngineDefaultClusterParametersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeEngineDefaultClusterParametersError {}
/// Errors returned by DescribeEngineDefaultParameters
#[derive(Debug, PartialEq)]
pub enum DescribeEngineDefaultParametersError {}

impl DescribeEngineDefaultParametersError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeEngineDefaultParametersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEngineDefaultParametersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeEngineDefaultParametersError {}
/// Errors returned by DescribeEventCategories
#[derive(Debug, PartialEq)]
pub enum DescribeEventCategoriesError {}

impl DescribeEventCategoriesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeEventCategoriesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEventCategoriesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeEventCategoriesError {}
/// Errors returned by DescribeEventSubscriptions
#[derive(Debug, PartialEq)]
pub enum DescribeEventSubscriptionsError {
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
}

impl DescribeEventSubscriptionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeEventSubscriptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "SubscriptionNotFound" => {
                        return RusotoError::Service(
                            DescribeEventSubscriptionsError::SubscriptionNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEventSubscriptionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeEventSubscriptionsError::SubscriptionNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeEventSubscriptionsError {}
/// Errors returned by DescribeEvents
#[derive(Debug, PartialEq)]
pub enum DescribeEventsError {}

impl DescribeEventsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeEventsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEventsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeEventsError {}
/// Errors returned by DescribeExportTasks
#[derive(Debug, PartialEq)]
pub enum DescribeExportTasksError {
    /// <p>The export task doesn't exist.</p>
    ExportTaskNotFoundFault(String),
}

impl DescribeExportTasksError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeExportTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "ExportTaskNotFound" => {
                        return RusotoError::Service(
                            DescribeExportTasksError::ExportTaskNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeExportTasksError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeExportTasksError::ExportTaskNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeExportTasksError {}
/// Errors returned by DescribeGlobalClusters
#[derive(Debug, PartialEq)]
pub enum DescribeGlobalClustersError {
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
}

impl DescribeGlobalClustersError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeGlobalClustersError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeGlobalClustersError::GlobalClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeGlobalClustersError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeGlobalClustersError::GlobalClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeGlobalClustersError {}
/// Errors returned by DescribeInstallationMedia
#[derive(Debug, PartialEq)]
pub enum DescribeInstallationMediaError {
    /// <p> <code>InstallationMediaID</code> doesn't refer to an existing installation medium.</p>
    InstallationMediaNotFoundFault(String),
}

impl DescribeInstallationMediaError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeInstallationMediaError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InstallationMediaNotFound" => {
                        return RusotoError::Service(
                            DescribeInstallationMediaError::InstallationMediaNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInstallationMediaError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeInstallationMediaError::InstallationMediaNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeInstallationMediaError {}
/// Errors returned by DescribeOptionGroupOptions
#[derive(Debug, PartialEq)]
pub enum DescribeOptionGroupOptionsError {}

impl DescribeOptionGroupOptionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeOptionGroupOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeOptionGroupOptionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeOptionGroupOptionsError {}
/// Errors returned by DescribeOptionGroups
#[derive(Debug, PartialEq)]
pub enum DescribeOptionGroupsError {
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
}

impl DescribeOptionGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeOptionGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            DescribeOptionGroupsError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeOptionGroupsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeOptionGroupsError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeOptionGroupsError {}
/// Errors returned by DescribeOrderableDBInstanceOptions
#[derive(Debug, PartialEq)]
pub enum DescribeOrderableDBInstanceOptionsError {}

impl DescribeOrderableDBInstanceOptionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeOrderableDBInstanceOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeOrderableDBInstanceOptionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeOrderableDBInstanceOptionsError {}
/// Errors returned by DescribePendingMaintenanceActions
#[derive(Debug, PartialEq)]
pub enum DescribePendingMaintenanceActionsError {
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
}

impl DescribePendingMaintenanceActionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribePendingMaintenanceActionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "ResourceNotFoundFault" => {
                        return RusotoError::Service(
                            DescribePendingMaintenanceActionsError::ResourceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribePendingMaintenanceActionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribePendingMaintenanceActionsError::ResourceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribePendingMaintenanceActionsError {}
/// Errors returned by DescribeReservedDBInstances
#[derive(Debug, PartialEq)]
pub enum DescribeReservedDBInstancesError {
    /// <p>The specified reserved DB Instance not found.</p>
    ReservedDBInstanceNotFoundFault(String),
}

impl DescribeReservedDBInstancesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeReservedDBInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "ReservedDBInstanceNotFound" => {
                        return RusotoError::Service(
                            DescribeReservedDBInstancesError::ReservedDBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedDBInstancesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeReservedDBInstancesError::ReservedDBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeReservedDBInstancesError {}
/// Errors returned by DescribeReservedDBInstancesOfferings
#[derive(Debug, PartialEq)]
pub enum DescribeReservedDBInstancesOfferingsError {
    /// <p>Specified offering does not exist.</p>
    ReservedDBInstancesOfferingNotFoundFault(String),
}

impl DescribeReservedDBInstancesOfferingsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeReservedDBInstancesOfferingsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                                    "ReservedDBInstancesOfferingNotFound" => return RusotoError::Service(DescribeReservedDBInstancesOfferingsError::ReservedDBInstancesOfferingNotFoundFault(parsed_error.message)),_ => {}
                                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedDBInstancesOfferingsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeReservedDBInstancesOfferingsError::ReservedDBInstancesOfferingNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for DescribeReservedDBInstancesOfferingsError {}
/// Errors returned by DescribeSourceRegions
#[derive(Debug, PartialEq)]
pub enum DescribeSourceRegionsError {}

impl DescribeSourceRegionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSourceRegionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSourceRegionsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {}
    }
}
impl Error for DescribeSourceRegionsError {}
/// Errors returned by DescribeValidDBInstanceModifications
#[derive(Debug, PartialEq)]
pub enum DescribeValidDBInstanceModificationsError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl DescribeValidDBInstanceModificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeValidDBInstanceModificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            DescribeValidDBInstanceModificationsError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            DescribeValidDBInstanceModificationsError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeValidDBInstanceModificationsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DescribeValidDBInstanceModificationsError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DescribeValidDBInstanceModificationsError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DescribeValidDBInstanceModificationsError {}
/// Errors returned by DownloadDBLogFilePortion
#[derive(Debug, PartialEq)]
pub enum DownloadDBLogFilePortionError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>LogFileName</code> doesn't refer to an existing DB log file.</p>
    DBLogFileNotFoundFault(String),
}

impl DownloadDBLogFilePortionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DownloadDBLogFilePortionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            DownloadDBLogFilePortionError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBLogFileNotFoundFault" => {
                        return RusotoError::Service(
                            DownloadDBLogFilePortionError::DBLogFileNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DownloadDBLogFilePortionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            DownloadDBLogFilePortionError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            DownloadDBLogFilePortionError::DBLogFileNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for DownloadDBLogFilePortionError {}
/// Errors returned by FailoverDBCluster
#[derive(Debug, PartialEq)]
pub enum FailoverDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl FailoverDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<FailoverDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            FailoverDBClusterError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            FailoverDBClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            FailoverDBClusterError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for FailoverDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            FailoverDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            FailoverDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            FailoverDBClusterError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for FailoverDBClusterError {}
/// Errors returned by FailoverGlobalCluster
#[derive(Debug, PartialEq)]
pub enum FailoverGlobalClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(String),
}

impl FailoverGlobalClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<FailoverGlobalClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            FailoverGlobalClusterError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            FailoverGlobalClusterError::GlobalClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            FailoverGlobalClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidGlobalClusterStateFault" => {
                        return RusotoError::Service(
                            FailoverGlobalClusterError::InvalidGlobalClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for FailoverGlobalClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            FailoverGlobalClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            FailoverGlobalClusterError::GlobalClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            FailoverGlobalClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            FailoverGlobalClusterError::InvalidGlobalClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for FailoverGlobalClusterError {}
/// Errors returned by ImportInstallationMedia
#[derive(Debug, PartialEq)]
pub enum ImportInstallationMediaError {
    /// <p> <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(String),
    /// <p>The specified installation medium has already been imported.</p>
    InstallationMediaAlreadyExistsFault(String),
}

impl ImportInstallationMediaError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportInstallationMediaError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CustomAvailabilityZoneNotFound" => {
                        return RusotoError::Service(
                            ImportInstallationMediaError::CustomAvailabilityZoneNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InstallationMediaAlreadyExists" => {
                        return RusotoError::Service(
                            ImportInstallationMediaError::InstallationMediaAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportInstallationMediaError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ImportInstallationMediaError::CustomAvailabilityZoneNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ImportInstallationMediaError::InstallationMediaAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ImportInstallationMediaError {}
/// Errors returned by ListTagsForResource
#[derive(Debug, PartialEq)]
pub enum ListTagsForResourceError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl ListTagsForResourceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ListTagsForResourceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            ListTagsForResourceError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            ListTagsForResourceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            ListTagsForResourceError::DBProxyNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ListTagsForResourceError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            ListTagsForResourceError::DBSnapshotNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ListTagsForResourceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ListTagsForResourceError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            ListTagsForResourceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            ListTagsForResourceError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            ListTagsForResourceError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ListTagsForResourceError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ListTagsForResourceError {}
/// Errors returned by ModifyCertificates
#[derive(Debug, PartialEq)]
pub enum ModifyCertificatesError {
    /// <p> <code>CertificateIdentifier</code> doesn't refer to an existing certificate. </p>
    CertificateNotFoundFault(String),
}

impl ModifyCertificatesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyCertificatesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "CertificateNotFound" => {
                        return RusotoError::Service(
                            ModifyCertificatesError::CertificateNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyCertificatesError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyCertificatesError::CertificateNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyCertificatesError {}
/// Errors returned by ModifyCurrentDBClusterCapacity
#[derive(Debug, PartialEq)]
pub enum ModifyCurrentDBClusterCapacityError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>Capacity</code> isn't a valid Aurora Serverless DB cluster capacity. Valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
    InvalidDBClusterCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl ModifyCurrentDBClusterCapacityError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyCurrentDBClusterCapacityError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyCurrentDBClusterCapacityError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterCapacityFault" => {
                        return RusotoError::Service(
                            ModifyCurrentDBClusterCapacityError::InvalidDBClusterCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyCurrentDBClusterCapacityError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyCurrentDBClusterCapacityError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyCurrentDBClusterCapacityError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyCurrentDBClusterCapacityError::InvalidDBClusterCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyCurrentDBClusterCapacityError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyCurrentDBClusterCapacityError {}
/// Errors returned by ModifyDBCluster
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterError {
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
}

impl ModifyDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::DBClusterAlreadyExistsFault(parsed_error.message),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(ModifyDBClusterError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBClusterParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::DBClusterParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::DBSubnetGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(ModifyDBClusterError::DomainNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBSecurityGroupState" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::InvalidDBSecurityGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSubnetGroupStateFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::InvalidDBSubnetGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(ModifyDBClusterError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::InvalidVPCNetworkStateFault(parsed_error.message),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            ModifyDBClusterError::StorageQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBClusterError::DBClusterAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::DBClusterParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterError::DBSubnetGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::DomainNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::InvalidDBSecurityGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterError::InvalidDBSubnetGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::InvalidVPCNetworkStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBClusterError::StorageQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyDBClusterError {}
/// Errors returned by ModifyDBClusterEndpoint
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterEndpointError {
    /// <p>The specified custom endpoint doesn't exist.</p>
    DBClusterEndpointNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The requested operation can't be performed on the endpoint while the endpoint is in this state.</p>
    InvalidDBClusterEndpointStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl ModifyDBClusterEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBClusterEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterEndpointNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterEndpointError::DBClusterEndpointNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            ModifyDBClusterEndpointError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterEndpointStateFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterEndpointError::InvalidDBClusterEndpointStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterEndpointError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            ModifyDBClusterEndpointError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBClusterEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBClusterEndpointError::DBClusterEndpointNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterEndpointError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterEndpointError::InvalidDBClusterEndpointStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterEndpointError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterEndpointError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBClusterEndpointError {}
/// Errors returned by ModifyDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl ModifyDBClusterParameterGroupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyDBClusterParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ModifyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            ModifyDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBClusterParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBClusterParameterGroupError {}
/// Errors returned by ModifyDBClusterSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterSnapshotAttributeError {
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(String),
}

impl ModifyDBClusterSnapshotAttributeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyDBClusterSnapshotAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBClusterSnapshotAttributeError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterSnapshotStateFault" => return RusotoError::Service(
                        ModifyDBClusterSnapshotAttributeError::InvalidDBClusterSnapshotStateFault(
                            parsed_error.message,
                        ),
                    ),
                    "SharedSnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBClusterSnapshotAttributeError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBClusterSnapshotAttributeError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBClusterSnapshotAttributeError::InvalidDBClusterSnapshotStateFault(
                ref cause,
            ) => write!(f, "{}", cause),
            ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBClusterSnapshotAttributeError {}
/// Errors returned by ModifyDBInstance
#[derive(Debug, PartialEq)]
pub enum ModifyDBInstanceError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),

    BackupPolicyNotFoundFault(String),
    /// <p> <code>CertificateIdentifier</code> doesn't refer to an existing certificate. </p>
    CertificateNotFoundFault(String),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>The DB upgrade failed because a resource the DB depends on can't be modified.</p>
    DBUpgradeDependencyFailureFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl ModifyDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::AuthorizationNotFoundFault(parsed_error.message),
                        )
                    }
                    "BackupPolicyNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::BackupPolicyNotFoundFault(parsed_error.message),
                        )
                    }
                    "CertificateNotFound" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::CertificateNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBUpgradeDependencyFailure" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::DBUpgradeDependencyFailureFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(ModifyDBInstanceError::DomainNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InsufficientDBInstanceCapacity" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::InsufficientDBInstanceCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSecurityGroupState" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::InvalidDBSecurityGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::KMSKeyNotAccessibleFault(parsed_error.message),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::OptionGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::ProvisionedIopsNotAvailableInAZFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::StorageQuotaExceededFault(parsed_error.message),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            ModifyDBInstanceError::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBInstanceError::AuthorizationNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::BackupPolicyNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::CertificateNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::DBUpgradeDependencyFailureFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::DomainNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::InvalidDBSecurityGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::OptionGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::ProvisionedIopsNotAvailableInAZFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBInstanceError::StorageQuotaExceededFault(ref cause) => write!(f, "{}", cause),
            ModifyDBInstanceError::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBInstanceError {}
/// Errors returned by ModifyDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl ModifyDBParameterGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ModifyDBParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            ModifyDBParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBParameterGroupError {}
/// Errors returned by ModifyDBProxy
#[derive(Debug, PartialEq)]
pub enum ModifyDBProxyError {
    /// <p>The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyAlreadyExistsFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl ModifyDBProxyError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBProxyError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyAlreadyExistsFault" => {
                        return RusotoError::Service(ModifyDBProxyError::DBProxyAlreadyExistsFault(
                            parsed_error.message,
                        ))
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(ModifyDBProxyError::DBProxyNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(ModifyDBProxyError::InvalidDBProxyStateFault(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBProxyError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBProxyError::DBProxyAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            ModifyDBProxyError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            ModifyDBProxyError::InvalidDBProxyStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyDBProxyError {}
/// Errors returned by ModifyDBProxyEndpoint
#[derive(Debug, PartialEq)]
pub enum ModifyDBProxyEndpointError {
    /// <p>The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyEndpointAlreadyExistsFault(String),
    /// <p>The DB proxy endpoint doesn't exist.</p>
    DBProxyEndpointNotFoundFault(String),
    /// <p>You can't perform this operation while the DB proxy endpoint is in a particular state.</p>
    InvalidDBProxyEndpointStateFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl ModifyDBProxyEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBProxyEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyEndpointAlreadyExistsFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyEndpointError::DBProxyEndpointAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyEndpointNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyEndpointError::DBProxyEndpointNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyEndpointStateFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyEndpointError::InvalidDBProxyEndpointStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyEndpointError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBProxyEndpointError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBProxyEndpointError::DBProxyEndpointAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBProxyEndpointError::DBProxyEndpointNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBProxyEndpointError::InvalidDBProxyEndpointStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBProxyEndpointError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBProxyEndpointError {}
/// Errors returned by ModifyDBProxyTargetGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBProxyTargetGroupError {
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl ModifyDBProxyTargetGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBProxyTargetGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyTargetGroupError::DBProxyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyTargetGroupError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            ModifyDBProxyTargetGroupError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBProxyTargetGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBProxyTargetGroupError::DBProxyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBProxyTargetGroupError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBProxyTargetGroupError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBProxyTargetGroupError {}
/// Errors returned by ModifyDBSnapshot
#[derive(Debug, PartialEq)]
pub enum ModifyDBSnapshotError {
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl ModifyDBSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            ModifyDBSnapshotError::DBSnapshotNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyDBSnapshotError {}
/// Errors returned by ModifyDBSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyDBSnapshotAttributeError {
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(String),
}

impl ModifyDBSnapshotAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBSnapshotAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            ModifyDBSnapshotAttributeError::DBSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            ModifyDBSnapshotAttributeError::InvalidDBSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SharedSnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBSnapshotAttributeError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBSnapshotAttributeError::DBSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBSnapshotAttributeError::InvalidDBSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyDBSnapshotAttributeError {}
/// Errors returned by ModifyDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBSubnetGroupError {
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DBSubnetQuotaExceededFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(String),
}

impl ModifyDBSubnetGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyDBSubnetGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            ModifyDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyDBSubnetGroupError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetQuotaExceededFault" => {
                        return RusotoError::Service(
                            ModifyDBSubnetGroupError::DBSubnetQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(ModifyDBSubnetGroupError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "SubnetAlreadyInUse" => {
                        return RusotoError::Service(ModifyDBSubnetGroupError::SubnetAlreadyInUse(
                            parsed_error.message,
                        ))
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyDBSubnetGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBSubnetGroupError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBSubnetGroupError::DBSubnetQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyDBSubnetGroupError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            ModifyDBSubnetGroupError::SubnetAlreadyInUse(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyDBSubnetGroupError {}
/// Errors returned by ModifyEventSubscription
#[derive(Debug, PartialEq)]
pub enum ModifyEventSubscriptionError {
    /// <p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(String),
    /// <p>SNS has responded that there is a problem with the SND topic specified.</p>
    SNSInvalidTopicFault(String),
    /// <p>You do not have permission to publish to the SNS topic ARN.</p>
    SNSNoAuthorizationFault(String),
    /// <p>The SNS topic ARN does not exist.</p>
    SNSTopicArnNotFoundFault(String),
    /// <p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(String),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
}

impl ModifyEventSubscriptionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyEventSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "EventSubscriptionQuotaExceeded" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSInvalidTopic" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::SNSInvalidTopicFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSNoAuthorization" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::SNSNoAuthorizationFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SNSTopicArnNotFound" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::SNSTopicArnNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionCategoryNotFound" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionNotFound" => {
                        return RusotoError::Service(
                            ModifyEventSubscriptionError::SubscriptionNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyEventSubscriptionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyEventSubscriptionError::SNSInvalidTopicFault(ref cause) => write!(f, "{}", cause),
            ModifyEventSubscriptionError::SNSNoAuthorizationFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyEventSubscriptionError::SNSTopicArnNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyEventSubscriptionError::SubscriptionNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyEventSubscriptionError {}
/// Errors returned by ModifyGlobalCluster
#[derive(Debug, PartialEq)]
pub enum ModifyGlobalClusterError {
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(String),
}

impl ModifyGlobalClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyGlobalClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyGlobalClusterError::GlobalClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyGlobalClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            ModifyGlobalClusterError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidGlobalClusterStateFault" => {
                        return RusotoError::Service(
                            ModifyGlobalClusterError::InvalidGlobalClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyGlobalClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyGlobalClusterError::GlobalClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyGlobalClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyGlobalClusterError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyGlobalClusterError::InvalidGlobalClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ModifyGlobalClusterError {}
/// Errors returned by ModifyOptionGroup
#[derive(Debug, PartialEq)]
pub enum ModifyOptionGroupError {
    /// <p> The option group isn't in the <i>available</i> state. </p>
    InvalidOptionGroupStateFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
}

impl ModifyOptionGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyOptionGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "InvalidOptionGroupStateFault" => {
                        return RusotoError::Service(
                            ModifyOptionGroupError::InvalidOptionGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            ModifyOptionGroupError::OptionGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyOptionGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ModifyOptionGroupError::InvalidOptionGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ModifyOptionGroupError::OptionGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for ModifyOptionGroupError {}
/// Errors returned by PromoteReadReplica
#[derive(Debug, PartialEq)]
pub enum PromoteReadReplicaError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl PromoteReadReplicaError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<PromoteReadReplicaError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            PromoteReadReplicaError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            PromoteReadReplicaError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PromoteReadReplicaError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            PromoteReadReplicaError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            PromoteReadReplicaError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for PromoteReadReplicaError {}
/// Errors returned by PromoteReadReplicaDBCluster
#[derive(Debug, PartialEq)]
pub enum PromoteReadReplicaDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl PromoteReadReplicaDBClusterError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<PromoteReadReplicaDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            PromoteReadReplicaDBClusterError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            PromoteReadReplicaDBClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PromoteReadReplicaDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            PromoteReadReplicaDBClusterError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            PromoteReadReplicaDBClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for PromoteReadReplicaDBClusterError {}
/// Errors returned by PurchaseReservedDBInstancesOffering
#[derive(Debug, PartialEq)]
pub enum PurchaseReservedDBInstancesOfferingError {
    /// <p>User already has a reservation with the given identifier.</p>
    ReservedDBInstanceAlreadyExistsFault(String),
    /// <p>Request would exceed the user's DB Instance quota.</p>
    ReservedDBInstanceQuotaExceededFault(String),
    /// <p>Specified offering does not exist.</p>
    ReservedDBInstancesOfferingNotFoundFault(String),
}

impl PurchaseReservedDBInstancesOfferingError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<PurchaseReservedDBInstancesOfferingError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                                    "ReservedDBInstanceAlreadyExists" => return RusotoError::Service(PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceAlreadyExistsFault(parsed_error.message)),"ReservedDBInstanceQuotaExceeded" => return RusotoError::Service(PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceQuotaExceededFault(parsed_error.message)),"ReservedDBInstancesOfferingNotFound" => return RusotoError::Service(PurchaseReservedDBInstancesOfferingError::ReservedDBInstancesOfferingNotFoundFault(parsed_error.message)),_ => {}
                                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PurchaseReservedDBInstancesOfferingError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceAlreadyExistsFault(
                ref cause,
            ) => write!(f, "{}", cause),
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceQuotaExceededFault(
                ref cause,
            ) => write!(f, "{}", cause),
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstancesOfferingNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for PurchaseReservedDBInstancesOfferingError {}
/// Errors returned by RebootDBInstance
#[derive(Debug, PartialEq)]
pub enum RebootDBInstanceError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl RebootDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RebootDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            RebootDBInstanceError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            RebootDBInstanceError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RebootDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RebootDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            RebootDBInstanceError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for RebootDBInstanceError {}
/// Errors returned by RegisterDBProxyTargets
#[derive(Debug, PartialEq)]
pub enum RegisterDBProxyTargetsError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The proxy is already associated with the specified RDS DB instance or Aurora DB cluster.</p>
    DBProxyTargetAlreadyRegisteredFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p>The requested operation can't be performed because there aren't enough available IP addresses in the proxy's subnets. Add more CIDR blocks to the VPC or remove IP address that aren't required from the subnets.</p>
    InsufficientAvailableIPsInSubnetFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDBProxyStateFault(String),
}

impl RegisterDBProxyTargetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RegisterDBProxyTargetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::DBProxyNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyTargetAlreadyRegisteredFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::DBProxyTargetAlreadyRegisteredFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientAvailableIPsInSubnetFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::InsufficientAvailableIPsInSubnetFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBProxyStateFault" => {
                        return RusotoError::Service(
                            RegisterDBProxyTargetsError::InvalidDBProxyStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RegisterDBProxyTargetsError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RegisterDBProxyTargetsError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            RegisterDBProxyTargetsError::DBProxyTargetAlreadyRegisteredFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::InsufficientAvailableIPsInSubnetFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RegisterDBProxyTargetsError::InvalidDBProxyStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RegisterDBProxyTargetsError {}
/// Errors returned by RemoveFromGlobalCluster
#[derive(Debug, PartialEq)]
pub enum RemoveFromGlobalClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster. </p>
    GlobalClusterNotFoundFault(String),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation. </p>
    InvalidGlobalClusterStateFault(String),
}

impl RemoveFromGlobalClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RemoveFromGlobalClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveFromGlobalClusterError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "GlobalClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidGlobalClusterStateFault" => {
                        return RusotoError::Service(
                            RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RemoveFromGlobalClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RemoveFromGlobalClusterError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RemoveFromGlobalClusterError {}
/// Errors returned by RemoveRoleFromDBCluster
#[derive(Debug, PartialEq)]
pub enum RemoveRoleFromDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The specified IAM role Amazon Resource Name (ARN) isn't associated with the specified DB cluster.</p>
    DBClusterRoleNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
}

impl RemoveRoleFromDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RemoveRoleFromDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBClusterError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterRoleNotFound" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBClusterError::DBClusterRoleNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBClusterError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RemoveRoleFromDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RemoveRoleFromDBClusterError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveRoleFromDBClusterError::DBClusterRoleNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveRoleFromDBClusterError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RemoveRoleFromDBClusterError {}
/// Errors returned by RemoveRoleFromDBInstance
#[derive(Debug, PartialEq)]
pub enum RemoveRoleFromDBInstanceError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified <code>RoleArn</code> value doesn't match the specified feature for the DB instance.</p>
    DBInstanceRoleNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl RemoveRoleFromDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RemoveRoleFromDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBInstanceError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceRoleNotFound" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBInstanceError::DBInstanceRoleNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            RemoveRoleFromDBInstanceError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RemoveRoleFromDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RemoveRoleFromDBInstanceError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveRoleFromDBInstanceError::DBInstanceRoleNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveRoleFromDBInstanceError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RemoveRoleFromDBInstanceError {}
/// Errors returned by RemoveSourceIdentifierFromSubscription
#[derive(Debug, PartialEq)]
pub enum RemoveSourceIdentifierFromSubscriptionError {
    /// <p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
}

impl RemoveSourceIdentifierFromSubscriptionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RemoveSourceIdentifierFromSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "SourceNotFound" => {
                        return RusotoError::Service(
                            RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "SubscriptionNotFound" => {
                        return RusotoError::Service(
                            RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RemoveSourceIdentifierFromSubscriptionError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RemoveSourceIdentifierFromSubscriptionError {}
/// Errors returned by RemoveTagsFromResource
#[derive(Debug, PartialEq)]
pub enum RemoveTagsFromResourceError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyNotFoundFault(String),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DBProxyTargetGroupNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
}

impl RemoveTagsFromResourceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RemoveTagsFromResourceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveTagsFromResourceError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            RemoveTagsFromResourceError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBProxyNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveTagsFromResourceError::DBProxyNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBProxyTargetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RemoveTagsFromResourceError::DBProxyTargetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            RemoveTagsFromResourceError::DBSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RemoveTagsFromResourceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RemoveTagsFromResourceError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveTagsFromResourceError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveTagsFromResourceError::DBProxyNotFoundFault(ref cause) => write!(f, "{}", cause),
            RemoveTagsFromResourceError::DBProxyTargetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RemoveTagsFromResourceError::DBSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RemoveTagsFromResourceError {}
/// Errors returned by ResetDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum ResetDBClusterParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl ResetDBClusterParameterGroupError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ResetDBClusterParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ResetDBClusterParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            ResetDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetDBClusterParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ResetDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ResetDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ResetDBClusterParameterGroupError {}
/// Errors returned by ResetDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum ResetDBParameterGroupError {
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
}

impl ResetDBParameterGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetDBParameterGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            ResetDBParameterGroupError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBParameterGroupState" => {
                        return RusotoError::Service(
                            ResetDBParameterGroupError::InvalidDBParameterGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetDBParameterGroupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            ResetDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            ResetDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for ResetDBParameterGroupError {}
/// Errors returned by RestoreDBClusterFromS3
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterFromS3Error {
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    /// <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
}

impl RestoreDBClusterFromS3Error {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RestoreDBClusterFromS3Error> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DBClusterAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterParameterGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DBClusterParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterQuotaExceededFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DBClusterQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::DomainNotFoundFault(parsed_error.message),
                        )
                    }
                    "InsufficientStorageClusterCapacity" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSubnetGroupStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::InvalidDBSubnetGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidS3BucketFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::InvalidS3BucketFault(parsed_error.message),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(RestoreDBClusterFromS3Error::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromS3Error::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBClusterFromS3Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBClusterFromS3Error::DBClusterAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::DBClusterParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::DBClusterQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::DomainNotFoundFault(ref cause) => write!(f, "{}", cause),
            RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::InvalidDBSubnetGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::InvalidS3BucketFault(ref cause) => write!(f, "{}", cause),
            RestoreDBClusterFromS3Error::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            RestoreDBClusterFromS3Error::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromS3Error::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBClusterFromS3Error {}
/// Errors returned by RestoreDBClusterFromSnapshot
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterFromSnapshotError {
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The DB cluster doesn't have enough capacity for the current operation.</p>
    InsufficientDBClusterCapacityFault(String),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
}

impl RestoreDBClusterFromSnapshotError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RestoreDBClusterFromSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBClusterAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterParameterGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBClusterParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterQuotaExceededFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBClusterQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::DomainNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBClusterCapacityFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InsufficientDBClusterCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientStorageClusterCapacity" => return RusotoError::Service(
                        RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(
                            parsed_error.message,
                        ),
                    ),
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InvalidDBSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidRestoreFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InvalidRestoreFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InvalidSubnet(parsed_error.message),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBClusterFromSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBClusterFromSnapshotError::DBClusterAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DBClusterParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DBClusterQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DBSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::DomainNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::InsufficientDBClusterCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBClusterFromSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::InvalidDBSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::InvalidRestoreFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            RestoreDBClusterFromSnapshotError::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBClusterFromSnapshotError {}
/// Errors returned by RestoreDBClusterToPointInTime
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterToPointInTimeError {
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The DB cluster doesn't have enough capacity for the current operation.</p>
    InsufficientDBClusterCapacityFault(String),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
}

impl RestoreDBClusterToPointInTimeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RestoreDBClusterToPointInTimeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DBClusterAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DBClusterNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterParameterGroupNotFound" => return RusotoError::Service(
                        RestoreDBClusterToPointInTimeError::DBClusterParameterGroupNotFoundFault(
                            parsed_error.message,
                        ),
                    ),
                    "DBClusterQuotaExceededFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DBClusterQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::DomainNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBClusterCapacityFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InsufficientDBClusterCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientStorageClusterCapacity" => return RusotoError::Service(
                        RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(
                            parsed_error.message,
                        ),
                    ),
                    "InvalidDBClusterSnapshotStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidDBClusterSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidDBSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidRestoreFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidRestoreFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidSubnet(parsed_error.message),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBClusterToPointInTimeError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBClusterToPointInTimeError::DBClusterAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DBClusterNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DBClusterParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DBClusterQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::DomainNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InsufficientDBClusterCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBClusterToPointInTimeError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InvalidDBSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InvalidRestoreFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            RestoreDBClusterToPointInTimeError::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBClusterToPointInTimeError {}
/// Errors returned by RestoreDBInstanceFromDBSnapshot
#[derive(Debug, PartialEq)]
pub enum RestoreDBInstanceFromDBSnapshotError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),

    BackupPolicyNotFoundFault(String),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl RestoreDBInstanceFromDBSnapshotError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RestoreDBInstanceFromDBSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "BackupPolicyNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::BackupPolicyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DBSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => return RusotoError::Service(
                        RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupDoesNotCoverEnoughAZs(
                            parsed_error.message,
                        ),
                    ),
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InstanceQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => return RusotoError::Service(
                        RestoreDBInstanceFromDBSnapshotError::InsufficientDBInstanceCapacityFault(
                            parsed_error.message,
                        ),
                    ),
                    "InvalidDBSnapshotState" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::InvalidDBSnapshotStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidRestoreFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => return RusotoError::Service(
                        RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAZFault(
                            parsed_error.message,
                        ),
                    ),
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBInstanceFromDBSnapshotError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::BackupPolicyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::InsufficientDBInstanceCapacityFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBInstanceFromDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAZFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBInstanceFromDBSnapshotError {}
/// Errors returned by RestoreDBInstanceFromS3
#[derive(Debug, PartialEq)]
pub enum RestoreDBInstanceFromS3Error {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),

    BackupPolicyNotFoundFault(String),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl RestoreDBInstanceFromS3Error {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RestoreDBInstanceFromS3Error> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::AuthorizationNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "BackupPolicyNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::BackupPolicyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InstanceQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::InstanceQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::InsufficientDBInstanceCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidS3BucketFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::InvalidS3BucketFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(RestoreDBInstanceFromS3Error::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::ProvisionedIopsNotAvailableInAZFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            RestoreDBInstanceFromS3Error::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBInstanceFromS3Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBInstanceFromS3Error::AuthorizationNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::BackupPolicyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::InstanceQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::InvalidS3BucketFault(ref cause) => write!(f, "{}", cause),
            RestoreDBInstanceFromS3Error::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            RestoreDBInstanceFromS3Error::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::ProvisionedIopsNotAvailableInAZFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceFromS3Error::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBInstanceFromS3Error {}
/// Errors returned by RestoreDBInstanceToPointInTime
#[derive(Debug, PartialEq)]
pub enum RestoreDBInstanceToPointInTimeError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),

    BackupPolicyNotFoundFault(String),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    /// <p>No automated backup for this DB instance was found.</p>
    DBInstanceAutomatedBackupNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain. </p>
    DomainNotFoundFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// <p> <code>SourceDBInstanceIdentifier</code> refers to a DB instance with <code>BackupRetentionPeriod</code> equal to 0. </p>
    PointInTimeRestoreNotEnabledFault(String),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl RestoreDBInstanceToPointInTimeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RestoreDBInstanceToPointInTimeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "BackupPolicyNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::BackupPolicyNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceAlreadyExists" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBInstanceAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBInstanceAutomatedBackupNotFound" => return RusotoError::Service(
                        RestoreDBInstanceToPointInTimeError::DBInstanceAutomatedBackupNotFoundFault(
                            parsed_error.message,
                        ),
                    ),
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBParameterGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBParameterGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DBSubnetGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DomainNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InstanceQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => return RusotoError::Service(
                        RestoreDBInstanceToPointInTimeError::InsufficientDBInstanceCapacityFault(
                            parsed_error.message,
                        ),
                    ),
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidRestoreFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::InvalidSubnet(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::InvalidVPCNetworkStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "OptionGroupNotFoundFault" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "PointInTimeRestoreNotEnabled" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ProvisionedIopsNotAvailableInAZFault" => return RusotoError::Service(
                        RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAZFault(
                            parsed_error.message,
                        ),
                    ),
                    "StorageQuotaExceeded" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "StorageTypeNotSupported" => {
                        return RusotoError::Service(
                            RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreDBInstanceToPointInTimeError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::BackupPolicyNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBInstanceAlreadyExistsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBInstanceAutomatedBackupNotFoundFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBInstanceToPointInTimeError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBParameterGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DBSubnetGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            RestoreDBInstanceToPointInTimeError::InvalidVPCNetworkStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::KMSKeyNotAccessibleFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAZFault(
                ref cause,
            ) => write!(f, "{}", cause),
            RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RestoreDBInstanceToPointInTimeError {}
/// Errors returned by RevokeDBSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum RevokeDBSecurityGroupIngressError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
}

impl RevokeDBSecurityGroupIngressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RevokeDBSecurityGroupIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSecurityGroupNotFound" => {
                        return RusotoError::Service(
                            RevokeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBSecurityGroupState" => {
                        return RusotoError::Service(
                            RevokeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RevokeDBSecurityGroupIngressError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RevokeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            RevokeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
        }
    }
}
impl Error for RevokeDBSecurityGroupIngressError {}
/// Errors returned by StartActivityStream
#[derive(Debug, PartialEq)]
pub enum StartActivityStreamError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
}

impl StartActivityStreamError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StartActivityStreamError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            StartActivityStreamError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            StartActivityStreamError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StartActivityStreamError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StartActivityStreamError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            StartActivityStreamError::KMSKeyNotAccessibleFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ResourceNotFoundFault" => {
                        return RusotoError::Service(
                            StartActivityStreamError::ResourceNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartActivityStreamError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StartActivityStreamError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartActivityStreamError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartActivityStreamError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartActivityStreamError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartActivityStreamError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
            StartActivityStreamError::ResourceNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StartActivityStreamError {}
/// Errors returned by StartDBCluster
#[derive(Debug, PartialEq)]
pub enum StartDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl StartDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StartDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(StartDBClusterError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StartDBClusterError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StartDBClusterError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StartDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            StartDBClusterError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StartDBClusterError {}
/// Errors returned by StartDBInstance
#[derive(Debug, PartialEq)]
pub enum StartDBInstanceError {
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p> <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(String),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVPCNetworkStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
}

impl StartDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StartDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "AuthorizationNotFound" => {
                        return RusotoError::Service(
                            StartDBInstanceError::AuthorizationNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(StartDBInstanceError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(StartDBInstanceError::DBInstanceNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => {
                        return RusotoError::Service(
                            StartDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSubnetGroupNotFoundFault" => {
                        return RusotoError::Service(
                            StartDBInstanceError::DBSubnetGroupNotFoundFault(parsed_error.message),
                        )
                    }
                    "InsufficientDBInstanceCapacity" => {
                        return RusotoError::Service(
                            StartDBInstanceError::InsufficientDBInstanceCapacityFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StartDBInstanceError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StartDBInstanceError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    "InvalidSubnet" => {
                        return RusotoError::Service(StartDBInstanceError::InvalidSubnet(
                            parsed_error.message,
                        ))
                    }
                    "InvalidVPCNetworkStateFault" => {
                        return RusotoError::Service(
                            StartDBInstanceError::InvalidVPCNetworkStateFault(parsed_error.message),
                        )
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            StartDBInstanceError::KMSKeyNotAccessibleFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StartDBInstanceError::AuthorizationNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                write!(f, "{}", cause)
            }
            StartDBInstanceError::DBSubnetGroupNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartDBInstanceError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::InvalidSubnet(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => write!(f, "{}", cause),
            StartDBInstanceError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StartDBInstanceError {}
/// Errors returned by StartDBInstanceAutomatedBackupsReplication
#[derive(Debug, PartialEq)]
pub enum StartDBInstanceAutomatedBackupsReplicationError {
    /// <p>The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB Instance quota.</p>
    DBInstanceAutomatedBackupQuotaExceededFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(String),
}

impl StartDBInstanceAutomatedBackupsReplicationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<StartDBInstanceAutomatedBackupsReplicationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                                    "DBInstanceAutomatedBackupQuotaExceeded" => return RusotoError::Service(StartDBInstanceAutomatedBackupsReplicationError::DBInstanceAutomatedBackupQuotaExceededFault(parsed_error.message)),"DBInstanceNotFound" => return RusotoError::Service(StartDBInstanceAutomatedBackupsReplicationError::DBInstanceNotFoundFault(parsed_error.message)),"InvalidDBInstanceState" => return RusotoError::Service(StartDBInstanceAutomatedBackupsReplicationError::InvalidDBInstanceStateFault(parsed_error.message)),"KMSKeyNotAccessibleFault" => return RusotoError::Service(StartDBInstanceAutomatedBackupsReplicationError::KMSKeyNotAccessibleFault(parsed_error.message)),"StorageTypeNotSupported" => return RusotoError::Service(StartDBInstanceAutomatedBackupsReplicationError::StorageTypeNotSupportedFault(parsed_error.message)),_ => {}
                                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartDBInstanceAutomatedBackupsReplicationError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
                            StartDBInstanceAutomatedBackupsReplicationError::DBInstanceAutomatedBackupQuotaExceededFault(ref cause) => write!(f, "{}", cause),
StartDBInstanceAutomatedBackupsReplicationError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
StartDBInstanceAutomatedBackupsReplicationError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
StartDBInstanceAutomatedBackupsReplicationError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
StartDBInstanceAutomatedBackupsReplicationError::StorageTypeNotSupportedFault(ref cause) => write!(f, "{}", cause)
                        }
    }
}
impl Error for StartDBInstanceAutomatedBackupsReplicationError {}
/// Errors returned by StartExportTask
#[derive(Debug, PartialEq)]
pub enum StartExportTaskError {
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// <p>You can't start an export task that's already running.</p>
    ExportTaskAlreadyExistsFault(String),
    /// <p>The IAM role requires additional permissions to export to an Amazon S3 bucket.</p>
    IamRoleMissingPermissionsFault(String),
    /// <p>The IAM role is missing for exporting to an Amazon S3 bucket.</p>
    IamRoleNotFoundFault(String),
    /// <p>The export is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportOnlyFault(String),
    /// <p>The state of the export snapshot is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportSourceStateFault(String),
    /// <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(String),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KMSKeyNotAccessibleFault(String),
}

impl StartExportTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StartExportTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => {
                        return RusotoError::Service(
                            StartExportTaskError::DBClusterSnapshotNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "DBSnapshotNotFound" => {
                        return RusotoError::Service(StartExportTaskError::DBSnapshotNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "ExportTaskAlreadyExists" => {
                        return RusotoError::Service(
                            StartExportTaskError::ExportTaskAlreadyExistsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "IamRoleMissingPermissions" => {
                        return RusotoError::Service(
                            StartExportTaskError::IamRoleMissingPermissionsFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "IamRoleNotFound" => {
                        return RusotoError::Service(StartExportTaskError::IamRoleNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidExportOnly" => {
                        return RusotoError::Service(StartExportTaskError::InvalidExportOnlyFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidExportSourceState" => {
                        return RusotoError::Service(
                            StartExportTaskError::InvalidExportSourceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidS3BucketFault" => {
                        return RusotoError::Service(StartExportTaskError::InvalidS3BucketFault(
                            parsed_error.message,
                        ))
                    }
                    "KMSKeyNotAccessibleFault" => {
                        return RusotoError::Service(
                            StartExportTaskError::KMSKeyNotAccessibleFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartExportTaskError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StartExportTaskError::DBClusterSnapshotNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartExportTaskError::DBSnapshotNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartExportTaskError::ExportTaskAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            StartExportTaskError::IamRoleMissingPermissionsFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartExportTaskError::IamRoleNotFoundFault(ref cause) => write!(f, "{}", cause),
            StartExportTaskError::InvalidExportOnlyFault(ref cause) => write!(f, "{}", cause),
            StartExportTaskError::InvalidExportSourceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StartExportTaskError::InvalidS3BucketFault(ref cause) => write!(f, "{}", cause),
            StartExportTaskError::KMSKeyNotAccessibleFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StartExportTaskError {}
/// Errors returned by StopActivityStream
#[derive(Debug, PartialEq)]
pub enum StopActivityStreamError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
}

impl StopActivityStreamError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StopActivityStreamError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(
                            StopActivityStreamError::DBClusterNotFoundFault(parsed_error.message),
                        )
                    }
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            StopActivityStreamError::DBInstanceNotFoundFault(parsed_error.message),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StopActivityStreamError::InvalidDBClusterStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StopActivityStreamError::InvalidDBInstanceStateFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "ResourceNotFoundFault" => {
                        return RusotoError::Service(
                            StopActivityStreamError::ResourceNotFoundFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StopActivityStreamError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StopActivityStreamError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            StopActivityStreamError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            StopActivityStreamError::InvalidDBClusterStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StopActivityStreamError::InvalidDBInstanceStateFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StopActivityStreamError::ResourceNotFoundFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StopActivityStreamError {}
/// Errors returned by StopDBCluster
#[derive(Debug, PartialEq)]
pub enum StopDBClusterError {
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl StopDBClusterError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StopDBClusterError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => {
                        return RusotoError::Service(StopDBClusterError::DBClusterNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StopDBClusterError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StopDBClusterError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StopDBClusterError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StopDBClusterError::DBClusterNotFoundFault(ref cause) => write!(f, "{}", cause),
            StopDBClusterError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            StopDBClusterError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StopDBClusterError {}
/// Errors returned by StopDBInstance
#[derive(Debug, PartialEq)]
pub enum StopDBInstanceError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p> <code>DBSnapshotIdentifier</code> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDBClusterStateFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
}

impl StopDBInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StopDBInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(StopDBInstanceError::DBInstanceNotFoundFault(
                            parsed_error.message,
                        ))
                    }
                    "DBSnapshotAlreadyExists" => {
                        return RusotoError::Service(
                            StopDBInstanceError::DBSnapshotAlreadyExistsFault(parsed_error.message),
                        )
                    }
                    "InvalidDBClusterStateFault" => {
                        return RusotoError::Service(
                            StopDBInstanceError::InvalidDBClusterStateFault(parsed_error.message),
                        )
                    }
                    "InvalidDBInstanceState" => {
                        return RusotoError::Service(
                            StopDBInstanceError::InvalidDBInstanceStateFault(parsed_error.message),
                        )
                    }
                    "SnapshotQuotaExceeded" => {
                        return RusotoError::Service(
                            StopDBInstanceError::SnapshotQuotaExceededFault(parsed_error.message),
                        )
                    }
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StopDBInstanceError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StopDBInstanceError::DBInstanceNotFoundFault(ref cause) => write!(f, "{}", cause),
            StopDBInstanceError::DBSnapshotAlreadyExistsFault(ref cause) => write!(f, "{}", cause),
            StopDBInstanceError::InvalidDBClusterStateFault(ref cause) => write!(f, "{}", cause),
            StopDBInstanceError::InvalidDBInstanceStateFault(ref cause) => write!(f, "{}", cause),
            StopDBInstanceError::SnapshotQuotaExceededFault(ref cause) => write!(f, "{}", cause),
        }
    }
}
impl Error for StopDBInstanceError {}
/// Errors returned by StopDBInstanceAutomatedBackupsReplication
#[derive(Debug, PartialEq)]
pub enum StopDBInstanceAutomatedBackupsReplicationError {
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDBInstanceStateFault(String),
}

impl StopDBInstanceAutomatedBackupsReplicationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<StopDBInstanceAutomatedBackupsReplicationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    "DBInstanceNotFound" => {
                        return RusotoError::Service(
                            StopDBInstanceAutomatedBackupsReplicationError::DBInstanceNotFoundFault(
                                parsed_error.message,
                            ),
                        )
                    }
                    "InvalidDBInstanceState" => return RusotoError::Service(
                        StopDBInstanceAutomatedBackupsReplicationError::InvalidDBInstanceStateFault(
                            parsed_error.message,
                        ),
                    ),
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        xml_util::start_element("ErrorResponse", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StopDBInstanceAutomatedBackupsReplicationError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            StopDBInstanceAutomatedBackupsReplicationError::DBInstanceNotFoundFault(ref cause) => {
                write!(f, "{}", cause)
            }
            StopDBInstanceAutomatedBackupsReplicationError::InvalidDBInstanceStateFault(
                ref cause,
            ) => write!(f, "{}", cause),
        }
    }
}
impl Error for StopDBInstanceAutomatedBackupsReplicationError {}
/// Trait representing the capabilities of the Amazon RDS API. Amazon RDS clients implement this trait.
#[async_trait]
pub trait Rds {
    /// <p><p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other Amazon Web Services Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn add_role_to_db_cluster(
        &self,
        input: AddRoleToDBClusterMessage,
    ) -> Result<(), RusotoError<AddRoleToDBClusterError>>;

    /// <p><p>Associates an Amazon Web Services Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note></p>
    async fn add_role_to_db_instance(
        &self,
        input: AddRoleToDBInstanceMessage,
    ) -> Result<(), RusotoError<AddRoleToDBInstanceError>>;

    /// <p>Adds a source identifier to an existing RDS event notification subscription.</p>
    async fn add_source_identifier_to_subscription(
        &self,
        input: AddSourceIdentifierToSubscriptionMessage,
    ) -> Result<
        AddSourceIdentifierToSubscriptionResult,
        RusotoError<AddSourceIdentifierToSubscriptionError>,
    >;

    /// <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
    async fn add_tags_to_resource(
        &self,
        input: AddTagsToResourceMessage,
    ) -> Result<(), RusotoError<AddTagsToResourceError>>;

    /// <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
    async fn apply_pending_maintenance_action(
        &self,
        input: ApplyPendingMaintenanceActionMessage,
    ) -> Result<ApplyPendingMaintenanceActionResult, RusotoError<ApplyPendingMaintenanceActionError>>;

    /// <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one Amazon Web Services Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
    async fn authorize_db_security_group_ingress(
        &self,
        input: AuthorizeDBSecurityGroupIngressMessage,
    ) -> Result<
        AuthorizeDBSecurityGroupIngressResult,
        RusotoError<AuthorizeDBSecurityGroupIngressError>,
    >;

    /// <p><p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora MySQL DB clusters.</p> </note></p>
    async fn backtrack_db_cluster(
        &self,
        input: BacktrackDBClusterMessage,
    ) -> Result<DBClusterBacktrack, RusotoError<BacktrackDBClusterError>>;

    /// <p>Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. </p>
    async fn cancel_export_task(
        &self,
        input: CancelExportTaskMessage,
    ) -> Result<ExportTask, RusotoError<CancelExportTaskError>>;

    /// <p><p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn copy_db_cluster_parameter_group(
        &self,
        input: CopyDBClusterParameterGroupMessage,
    ) -> Result<CopyDBClusterParameterGroupResult, RusotoError<CopyDBClusterParameterGroupError>>;

    /// <p><p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another Amazon Web Services Region. In that case, the Amazon Web Services Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination Amazon Web Services Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another Amazon Web Services Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source Amazon Web Services Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source Amazon Web Services Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in &quot;copying&quot; status.</p> <p>For more information on copying encrypted DB cluster snapshots from one Amazon Web Services Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn copy_db_cluster_snapshot(
        &self,
        input: CopyDBClusterSnapshotMessage,
    ) -> Result<CopyDBClusterSnapshotResult, RusotoError<CopyDBClusterSnapshotError>>;

    /// <p>Copies the specified DB parameter group.</p>
    async fn copy_db_parameter_group(
        &self,
        input: CopyDBParameterGroupMessage,
    ) -> Result<CopyDBParameterGroupResult, RusotoError<CopyDBParameterGroupError>>;

    /// <p>Copies the specified DB snapshot. The source DB snapshot must be in the <code>available</code> state.</p> <p>You can copy a snapshot from one Amazon Web Services Region to another. In that case, the Amazon Web Services Region where you call the <code>CopyDBSnapshot</code> action is the destination Amazon Web Services Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn copy_db_snapshot(
        &self,
        input: CopyDBSnapshotMessage,
    ) -> Result<CopyDBSnapshotResult, RusotoError<CopyDBSnapshotError>>;

    /// <p>Copies the specified option group.</p>
    async fn copy_option_group(
        &self,
        input: CopyOptionGroupMessage,
    ) -> Result<CopyOptionGroupResult, RusotoError<CopyOptionGroupError>>;

    /// <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn create_custom_availability_zone(
        &self,
        input: CreateCustomAvailabilityZoneMessage,
    ) -> Result<CreateCustomAvailabilityZoneResult, RusotoError<CreateCustomAvailabilityZoneError>>;

    /// <p><p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a read replica of another DB cluster or Amazon RDS MySQL or PostgreSQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster(
        &self,
        input: CreateDBClusterMessage,
    ) -> Result<CreateDBClusterResult, RusotoError<CreateDBClusterError>>;

    /// <p><p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_endpoint(
        &self,
        input: CreateDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<CreateDBClusterEndpointError>>;

    /// <p><p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_parameter_group(
        &self,
        input: CreateDBClusterParameterGroupMessage,
    ) -> Result<CreateDBClusterParameterGroupResult, RusotoError<CreateDBClusterParameterGroupError>>;

    /// <p><p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_snapshot(
        &self,
        input: CreateDBClusterSnapshotMessage,
    ) -> Result<CreateDBClusterSnapshotResult, RusotoError<CreateDBClusterSnapshotError>>;

    /// <p>Creates a new DB instance.</p>
    async fn create_db_instance(
        &self,
        input: CreateDBInstanceMessage,
    ) -> Result<CreateDBInstanceResult, RusotoError<CreateDBInstanceError>>;

    /// <p><p>Creates a new DB instance that acts as a read replica for an existing source DB instance. You can create a read replica for a DB instance running MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn&#39;t support this action. Call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster.</p> <p>All read replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified.</p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important></p>
    async fn create_db_instance_read_replica(
        &self,
        input: CreateDBInstanceReadReplicaMessage,
    ) -> Result<CreateDBInstanceReadReplicaResult, RusotoError<CreateDBInstanceReadReplicaError>>;

    /// <p><p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important></p>
    async fn create_db_parameter_group(
        &self,
        input: CreateDBParameterGroupMessage,
    ) -> Result<CreateDBParameterGroupResult, RusotoError<CreateDBParameterGroupError>>;

    /// <p>Creates a new DB proxy.</p>
    async fn create_db_proxy(
        &self,
        input: CreateDBProxyRequest,
    ) -> Result<CreateDBProxyResponse, RusotoError<CreateDBProxyError>>;

    /// <p> Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are associated with Aurora DB clusters. You can use DB proxy endpoints to specify read/write or read-only access to the DB cluster. You can also use DB proxy endpoints to access a DB proxy through a different VPC than the proxy's default VPC. </p>
    async fn create_db_proxy_endpoint(
        &self,
        input: CreateDBProxyEndpointRequest,
    ) -> Result<CreateDBProxyEndpointResponse, RusotoError<CreateDBProxyEndpointError>>;

    /// <p><p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note></p>
    async fn create_db_security_group(
        &self,
        input: CreateDBSecurityGroupMessage,
    ) -> Result<CreateDBSecurityGroupResult, RusotoError<CreateDBSecurityGroupError>>;

    /// <p>Creates a snapshot of a DB instance. The source DB instance must be in the <code>available</code> or <code>storage-optimization</code> state.</p>
    async fn create_db_snapshot(
        &self,
        input: CreateDBSnapshotMessage,
    ) -> Result<CreateDBSnapshotResult, RusotoError<CreateDBSnapshotError>>;

    /// <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
    async fn create_db_subnet_group(
        &self,
        input: CreateDBSubnetGroupMessage,
    ) -> Result<CreateDBSubnetGroupResult, RusotoError<CreateDBSubnetGroupError>>;

    /// <p><p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of and provide a list of RDS sources (<code>SourceIds</code>) that triggers the events. You can also provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code> = <code>mydbinstance1</code>, <code>mydbinstance2</code> and <code>EventCategories</code> = <code>Availability</code>, <code>Backup</code>.</p> <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType</code> = <code>db-instance</code> and <code>SourceIdentifier</code> = <code>myDBInstance1</code>, you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your RDS sources. If you don&#39;t specify either the SourceType or the <code>SourceIdentifier</code>, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren&#39;t sent for the topic.</p> </note></p>
    async fn create_event_subscription(
        &self,
        input: CreateEventSubscriptionMessage,
    ) -> Result<CreateEventSubscriptionResult, RusotoError<CreateEventSubscriptionError>>;

    /// <p><p> Creates an Aurora global database spread across multiple Amazon Web Services Regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_global_cluster(
        &self,
        input: CreateGlobalClusterMessage,
    ) -> Result<CreateGlobalClusterResult, RusotoError<CreateGlobalClusterError>>;

    /// <p>Creates a new option group. You can create up to 20 option groups.</p>
    async fn create_option_group(
        &self,
        input: CreateOptionGroupMessage,
    ) -> Result<CreateOptionGroupResult, RusotoError<CreateOptionGroupError>>;

    /// <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn delete_custom_availability_zone(
        &self,
        input: DeleteCustomAvailabilityZoneMessage,
    ) -> Result<DeleteCustomAvailabilityZoneResult, RusotoError<DeleteCustomAvailabilityZoneError>>;

    /// <p><p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster(
        &self,
        input: DeleteDBClusterMessage,
    ) -> Result<DeleteDBClusterResult, RusotoError<DeleteDBClusterError>>;

    /// <p><p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_endpoint(
        &self,
        input: DeleteDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<DeleteDBClusterEndpointError>>;

    /// <p><p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_parameter_group(
        &self,
        input: DeleteDBClusterParameterGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBClusterParameterGroupError>>;

    /// <p><p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_snapshot(
        &self,
        input: DeleteDBClusterSnapshotMessage,
    ) -> Result<DeleteDBClusterSnapshotResult, RusotoError<DeleteDBClusterSnapshotError>>;

    /// <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a read replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a read replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
    async fn delete_db_instance(
        &self,
        input: DeleteDBInstanceMessage,
    ) -> Result<DeleteDBInstanceResult, RusotoError<DeleteDBInstanceError>>;

    /// <p>Deletes automated backups using the <code>DbiResourceId</code> value of the source DB instance or the Amazon Resource Name (ARN) of the automated backups.</p>
    async fn delete_db_instance_automated_backup(
        &self,
        input: DeleteDBInstanceAutomatedBackupMessage,
    ) -> Result<
        DeleteDBInstanceAutomatedBackupResult,
        RusotoError<DeleteDBInstanceAutomatedBackupError>,
    >;

    /// <p>Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.</p>
    async fn delete_db_parameter_group(
        &self,
        input: DeleteDBParameterGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBParameterGroupError>>;

    /// <p>Deletes an existing DB proxy.</p>
    async fn delete_db_proxy(
        &self,
        input: DeleteDBProxyRequest,
    ) -> Result<DeleteDBProxyResponse, RusotoError<DeleteDBProxyError>>;

    /// <p>Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to access the DB proxy using the endpoint that you defined. The endpoint that you delete might have provided capabilities such as read/write or read-only operations, or using a different VPC than the DB proxy's default VPC.</p>
    async fn delete_db_proxy_endpoint(
        &self,
        input: DeleteDBProxyEndpointRequest,
    ) -> Result<DeleteDBProxyEndpointResponse, RusotoError<DeleteDBProxyEndpointError>>;

    /// <p><p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note></p>
    async fn delete_db_security_group(
        &self,
        input: DeleteDBSecurityGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBSecurityGroupError>>;

    /// <p><p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note></p>
    async fn delete_db_snapshot(
        &self,
        input: DeleteDBSnapshotMessage,
    ) -> Result<DeleteDBSnapshotResult, RusotoError<DeleteDBSnapshotError>>;

    /// <p><p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note></p>
    async fn delete_db_subnet_group(
        &self,
        input: DeleteDBSubnetGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBSubnetGroupError>>;

    /// <p>Deletes an RDS event notification subscription.</p>
    async fn delete_event_subscription(
        &self,
        input: DeleteEventSubscriptionMessage,
    ) -> Result<DeleteEventSubscriptionResult, RusotoError<DeleteEventSubscriptionError>>;

    /// <p><p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_global_cluster(
        &self,
        input: DeleteGlobalClusterMessage,
    ) -> Result<DeleteGlobalClusterResult, RusotoError<DeleteGlobalClusterError>>;

    /// <p>Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
    async fn delete_installation_media(
        &self,
        input: DeleteInstallationMediaMessage,
    ) -> Result<InstallationMedia, RusotoError<DeleteInstallationMediaError>>;

    /// <p>Deletes an existing option group.</p>
    async fn delete_option_group(
        &self,
        input: DeleteOptionGroupMessage,
    ) -> Result<(), RusotoError<DeleteOptionGroupError>>;

    /// <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
    async fn deregister_db_proxy_targets(
        &self,
        input: DeregisterDBProxyTargetsRequest,
    ) -> Result<DeregisterDBProxyTargetsResponse, RusotoError<DeregisterDBProxyTargetsError>>;

    /// <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
    async fn describe_account_attributes(
        &self,
        input: DescribeAccountAttributesMessage,
    ) -> Result<AccountAttributesMessage, RusotoError<DescribeAccountAttributesError>>;

    /// <p>Lists the set of CA certificates provided by Amazon RDS for this Amazon Web Services account.</p>
    async fn describe_certificates(
        &self,
        input: DescribeCertificatesMessage,
    ) -> Result<CertificateMessage, RusotoError<DescribeCertificatesError>>;

    /// <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn describe_custom_availability_zones(
        &self,
        input: DescribeCustomAvailabilityZonesMessage,
    ) -> Result<CustomAvailabilityZoneMessage, RusotoError<DescribeCustomAvailabilityZonesError>>;

    /// <p><p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora MySQL DB clusters.</p> </note></p>
    async fn describe_db_cluster_backtracks(
        &self,
        input: DescribeDBClusterBacktracksMessage,
    ) -> Result<DBClusterBacktrackMessage, RusotoError<DescribeDBClusterBacktracksError>>;

    /// <p><p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_endpoints(
        &self,
        input: DescribeDBClusterEndpointsMessage,
    ) -> Result<DBClusterEndpointMessage, RusotoError<DescribeDBClusterEndpointsError>>;

    /// <p><p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_parameter_groups(
        &self,
        input: DescribeDBClusterParameterGroupsMessage,
    ) -> Result<DBClusterParameterGroupsMessage, RusotoError<DescribeDBClusterParameterGroupsError>>;

    /// <p><p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_parameters(
        &self,
        input: DescribeDBClusterParametersMessage,
    ) -> Result<DBClusterParameterGroupDetails, RusotoError<DescribeDBClusterParametersError>>;

    /// <p><p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_snapshot_attributes(
        &self,
        input: DescribeDBClusterSnapshotAttributesMessage,
    ) -> Result<
        DescribeDBClusterSnapshotAttributesResult,
        RusotoError<DescribeDBClusterSnapshotAttributesError>,
    >;

    /// <p><p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_snapshots(
        &self,
        input: DescribeDBClusterSnapshotsMessage,
    ) -> Result<DBClusterSnapshotMessage, RusotoError<DescribeDBClusterSnapshotsError>>;

    /// <p><p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note></p>
    async fn describe_db_clusters(
        &self,
        input: DescribeDBClustersMessage,
    ) -> Result<DBClusterMessage, RusotoError<DescribeDBClustersError>>;

    /// <p>Returns a list of the available DB engines.</p>
    async fn describe_db_engine_versions(
        &self,
        input: DescribeDBEngineVersionsMessage,
    ) -> Result<DBEngineVersionMessage, RusotoError<DescribeDBEngineVersionsError>>;

    /// <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
    async fn describe_db_instance_automated_backups(
        &self,
        input: DescribeDBInstanceAutomatedBackupsMessage,
    ) -> Result<
        DBInstanceAutomatedBackupMessage,
        RusotoError<DescribeDBInstanceAutomatedBackupsError>,
    >;

    /// <p><p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note></p>
    async fn describe_db_instances(
        &self,
        input: DescribeDBInstancesMessage,
    ) -> Result<DBInstanceMessage, RusotoError<DescribeDBInstancesError>>;

    /// <p>Returns a list of DB log files for the DB instance.</p>
    async fn describe_db_log_files(
        &self,
        input: DescribeDBLogFilesMessage,
    ) -> Result<DescribeDBLogFilesResponse, RusotoError<DescribeDBLogFilesError>>;

    /// <p> Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. </p>
    async fn describe_db_parameter_groups(
        &self,
        input: DescribeDBParameterGroupsMessage,
    ) -> Result<DBParameterGroupsMessage, RusotoError<DescribeDBParameterGroupsError>>;

    /// <p>Returns the detailed parameter list for a particular DB parameter group.</p>
    async fn describe_db_parameters(
        &self,
        input: DescribeDBParametersMessage,
    ) -> Result<DBParameterGroupDetails, RusotoError<DescribeDBParametersError>>;

    /// <p>Returns information about DB proxies.</p>
    async fn describe_db_proxies(
        &self,
        input: DescribeDBProxiesRequest,
    ) -> Result<DescribeDBProxiesResponse, RusotoError<DescribeDBProxiesError>>;

    /// <p>Returns information about DB proxy endpoints.</p>
    async fn describe_db_proxy_endpoints(
        &self,
        input: DescribeDBProxyEndpointsRequest,
    ) -> Result<DescribeDBProxyEndpointsResponse, RusotoError<DescribeDBProxyEndpointsError>>;

    /// <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
    async fn describe_db_proxy_target_groups(
        &self,
        input: DescribeDBProxyTargetGroupsRequest,
    ) -> Result<DescribeDBProxyTargetGroupsResponse, RusotoError<DescribeDBProxyTargetGroupsError>>;

    /// <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
    async fn describe_db_proxy_targets(
        &self,
        input: DescribeDBProxyTargetsRequest,
    ) -> Result<DescribeDBProxyTargetsResponse, RusotoError<DescribeDBProxyTargetsError>>;

    /// <p> Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. </p>
    async fn describe_db_security_groups(
        &self,
        input: DescribeDBSecurityGroupsMessage,
    ) -> Result<DBSecurityGroupMessage, RusotoError<DescribeDBSecurityGroupsError>>;

    /// <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
    async fn describe_db_snapshot_attributes(
        &self,
        input: DescribeDBSnapshotAttributesMessage,
    ) -> Result<DescribeDBSnapshotAttributesResult, RusotoError<DescribeDBSnapshotAttributesError>>;

    /// <p>Returns information about DB snapshots. This API action supports pagination.</p>
    async fn describe_db_snapshots(
        &self,
        input: DescribeDBSnapshotsMessage,
    ) -> Result<DBSnapshotMessage, RusotoError<DescribeDBSnapshotsError>>;

    /// <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
    async fn describe_db_subnet_groups(
        &self,
        input: DescribeDBSubnetGroupsMessage,
    ) -> Result<DBSubnetGroupMessage, RusotoError<DescribeDBSubnetGroupsError>>;

    /// <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
    async fn describe_engine_default_cluster_parameters(
        &self,
        input: DescribeEngineDefaultClusterParametersMessage,
    ) -> Result<
        DescribeEngineDefaultClusterParametersResult,
        RusotoError<DescribeEngineDefaultClusterParametersError>,
    >;

    /// <p>Returns the default engine and system parameter information for the specified database engine.</p>
    async fn describe_engine_default_parameters(
        &self,
        input: DescribeEngineDefaultParametersMessage,
    ) -> Result<
        DescribeEngineDefaultParametersResult,
        RusotoError<DescribeEngineDefaultParametersError>,
    >;

    /// <p>Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn describe_event_categories(
        &self,
        input: DescribeEventCategoriesMessage,
    ) -> Result<EventCategoriesMessage, RusotoError<DescribeEventCategoriesError>>;

    /// <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p> <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
    async fn describe_event_subscriptions(
        &self,
        input: DescribeEventSubscriptionsMessage,
    ) -> Result<EventSubscriptionsMessage, RusotoError<DescribeEventSubscriptionsError>>;

    /// <p><p>Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots for the past 14 days. Events specific to a particular DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots group can be obtained by providing the name as a parameter.</p> <note> <p>By default, the past hour of events are returned.</p> </note></p>
    async fn describe_events(
        &self,
        input: DescribeEventsMessage,
    ) -> Result<EventsMessage, RusotoError<DescribeEventsError>>;

    /// <p>Returns information about a snapshot export to Amazon S3. This API operation supports pagination. </p>
    async fn describe_export_tasks(
        &self,
        input: DescribeExportTasksMessage,
    ) -> Result<ExportTasksMessage, RusotoError<DescribeExportTasksError>>;

    /// <p><p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_global_clusters(
        &self,
        input: DescribeGlobalClustersMessage,
    ) -> Result<GlobalClustersMessage, RusotoError<DescribeGlobalClustersError>>;

    /// <p>Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
    async fn describe_installation_media(
        &self,
        input: DescribeInstallationMediaMessage,
    ) -> Result<InstallationMediaMessage, RusotoError<DescribeInstallationMediaError>>;

    /// <p>Describes all available options.</p>
    async fn describe_option_group_options(
        &self,
        input: DescribeOptionGroupOptionsMessage,
    ) -> Result<OptionGroupOptionsMessage, RusotoError<DescribeOptionGroupOptionsError>>;

    /// <p>Describes the available option groups.</p>
    async fn describe_option_groups(
        &self,
        input: DescribeOptionGroupsMessage,
    ) -> Result<OptionGroups, RusotoError<DescribeOptionGroupsError>>;

    /// <p>Returns a list of orderable DB instance options for the specified engine.</p>
    async fn describe_orderable_db_instance_options(
        &self,
        input: DescribeOrderableDBInstanceOptionsMessage,
    ) -> Result<
        OrderableDBInstanceOptionsMessage,
        RusotoError<DescribeOrderableDBInstanceOptionsError>,
    >;

    /// <p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>
    async fn describe_pending_maintenance_actions(
        &self,
        input: DescribePendingMaintenanceActionsMessage,
    ) -> Result<PendingMaintenanceActionsMessage, RusotoError<DescribePendingMaintenanceActionsError>>;

    /// <p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>
    async fn describe_reserved_db_instances(
        &self,
        input: DescribeReservedDBInstancesMessage,
    ) -> Result<ReservedDBInstanceMessage, RusotoError<DescribeReservedDBInstancesError>>;

    /// <p>Lists available reserved DB instance offerings.</p>
    async fn describe_reserved_db_instances_offerings(
        &self,
        input: DescribeReservedDBInstancesOfferingsMessage,
    ) -> Result<
        ReservedDBInstancesOfferingMessage,
        RusotoError<DescribeReservedDBInstancesOfferingsError>,
    >;

    /// <p>Returns a list of the source Amazon Web Services Regions where the current Amazon Web Services Region can create a read replica, copy a DB snapshot from, or replicate automated backups from. This API action supports pagination.</p>
    async fn describe_source_regions(
        &self,
        input: DescribeSourceRegionsMessage,
    ) -> Result<SourceRegionMessage, RusotoError<DescribeSourceRegionsError>>;

    /// <p>You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. </p>
    async fn describe_valid_db_instance_modifications(
        &self,
        input: DescribeValidDBInstanceModificationsMessage,
    ) -> Result<
        DescribeValidDBInstanceModificationsResult,
        RusotoError<DescribeValidDBInstanceModificationsError>,
    >;

    /// <p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>
    async fn download_db_log_file_portion(
        &self,
        input: DownloadDBLogFilePortionMessage,
    ) -> Result<DownloadDBLogFilePortionDetails, RusotoError<DownloadDBLogFilePortionError>>;

    /// <p><p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn failover_db_cluster(
        &self,
        input: FailoverDBClusterMessage,
    ) -> Result<FailoverDBClusterResult, RusotoError<FailoverDBClusterError>>;

    /// <p><p>Initiates the failover process for an Aurora global database (<a>GlobalCluster</a>).</p> <p>A failover for an Aurora global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected (target) DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Aurora global database.</p> <p>For more information about failing over an Amazon Aurora global database, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Managed planned failover for Amazon Aurora global databases</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action applies to <a>GlobalCluster</a> (Aurora global databases) only. Use this action only on healthy Aurora global databases with running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios or to reconfigure your Aurora global database topology. </p> </note></p>
    async fn failover_global_cluster(
        &self,
        input: FailoverGlobalClusterMessage,
    ) -> Result<FailoverGlobalClusterResult, RusotoError<FailoverGlobalClusterError>>;

    /// <p>Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.</p>
    async fn import_installation_media(
        &self,
        input: ImportInstallationMediaMessage,
    ) -> Result<InstallationMedia, RusotoError<ImportInstallationMediaError>>;

    /// <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
    async fn list_tags_for_resource(
        &self,
        input: ListTagsForResourceMessage,
    ) -> Result<TagListMessage, RusotoError<ListTagsForResourceError>>;

    /// <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified Amazon Web Services Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified Amazon Web Services Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn modify_certificates(
        &self,
        input: ModifyCertificatesMessage,
    ) -> Result<ModifyCertificatesResult, RusotoError<ModifyCertificatesError>>;

    /// <p><p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_current_db_cluster_capacity(
        &self,
        input: ModifyCurrentDBClusterCapacityMessage,
    ) -> Result<DBClusterCapacityInfo, RusotoError<ModifyCurrentDBClusterCapacityError>>;

    /// <p><p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster(
        &self,
        input: ModifyDBClusterMessage,
    ) -> Result<ModifyDBClusterResult, RusotoError<ModifyDBClusterError>>;

    /// <p><p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_endpoint(
        &self,
        input: ModifyDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<ModifyDBClusterEndpointError>>;

    /// <p><p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_parameter_group(
        &self,
        input: ModifyDBClusterParameterGroupMessage,
    ) -> Result<DBClusterParameterGroupNameMessage, RusotoError<ModifyDBClusterParameterGroupError>>;

    /// <p><p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts.</p> <note> <p>Don&#39;t add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts.</p> </note> <p>If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can&#39;t use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot is public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action. The accounts are returned as values for the <code>restore</code> attribute.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_snapshot_attribute(
        &self,
        input: ModifyDBClusterSnapshotAttributeMessage,
    ) -> Result<
        ModifyDBClusterSnapshotAttributeResult,
        RusotoError<ModifyDBClusterSnapshotAttributeError>,
    >;

    /// <p>Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. </p>
    async fn modify_db_instance(
        &self,
        input: ModifyDBInstanceMessage,
    ) -> Result<ModifyDBInstanceResult, RusotoError<ModifyDBInstanceError>>;

    /// <p><p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important></p>
    async fn modify_db_parameter_group(
        &self,
        input: ModifyDBParameterGroupMessage,
    ) -> Result<DBParameterGroupNameMessage, RusotoError<ModifyDBParameterGroupError>>;

    /// <p>Changes the settings for an existing DB proxy.</p>
    async fn modify_db_proxy(
        &self,
        input: ModifyDBProxyRequest,
    ) -> Result<ModifyDBProxyResponse, RusotoError<ModifyDBProxyError>>;

    /// <p>Changes the settings for an existing DB proxy endpoint.</p>
    async fn modify_db_proxy_endpoint(
        &self,
        input: ModifyDBProxyEndpointRequest,
    ) -> Result<ModifyDBProxyEndpointResponse, RusotoError<ModifyDBProxyEndpointError>>;

    /// <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
    async fn modify_db_proxy_target_group(
        &self,
        input: ModifyDBProxyTargetGroupRequest,
    ) -> Result<ModifyDBProxyTargetGroupResponse, RusotoError<ModifyDBProxyTargetGroupError>>;

    /// <p>Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted or unencrypted, but not shared or public. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
    async fn modify_db_snapshot(
        &self,
        input: ModifyDBSnapshotMessage,
    ) -> Result<ModifyDBSnapshotResult, RusotoError<ModifyDBSnapshotError>>;

    /// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all Amazon Web Services accounts.</p> <note> <p>Don't add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all Amazon Web Services accounts.</p> </note> <p>If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action. The accounts are returned as values for the <code>restore</code> attribute.</p>
    async fn modify_db_snapshot_attribute(
        &self,
        input: ModifyDBSnapshotAttributeMessage,
    ) -> Result<ModifyDBSnapshotAttributeResult, RusotoError<ModifyDBSnapshotAttributeError>>;

    /// <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
    async fn modify_db_subnet_group(
        &self,
        input: ModifyDBSubnetGroupMessage,
    ) -> Result<ModifyDBSubnetGroupResult, RusotoError<ModifyDBSubnetGroupError>>;

    /// <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given source type (<code>SourceType</code>) in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation.</p>
    async fn modify_event_subscription(
        &self,
        input: ModifyEventSubscriptionMessage,
    ) -> Result<ModifyEventSubscriptionResult, RusotoError<ModifyEventSubscriptionError>>;

    /// <p><p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_global_cluster(
        &self,
        input: ModifyGlobalClusterMessage,
    ) -> Result<ModifyGlobalClusterResult, RusotoError<ModifyGlobalClusterError>>;

    /// <p>Modifies an existing option group.</p>
    async fn modify_option_group(
        &self,
        input: ModifyOptionGroupMessage,
    ) -> Result<ModifyOptionGroupResult, RusotoError<ModifyOptionGroupError>>;

    /// <p><p>Promotes a read replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a read replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a read replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your read replica, configure the automated backup window so that daily backups do not interfere with read replica promotion.</p> </li> <li> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note></p>
    async fn promote_read_replica(
        &self,
        input: PromoteReadReplicaMessage,
    ) -> Result<PromoteReadReplicaResult, RusotoError<PromoteReadReplicaError>>;

    /// <p><p>Promotes a read replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn promote_read_replica_db_cluster(
        &self,
        input: PromoteReadReplicaDBClusterMessage,
    ) -> Result<PromoteReadReplicaDBClusterResult, RusotoError<PromoteReadReplicaDBClusterError>>;

    /// <p>Purchases a reserved DB instance offering.</p>
    async fn purchase_reserved_db_instances_offering(
        &self,
        input: PurchaseReservedDBInstancesOfferingMessage,
    ) -> Result<
        PurchaseReservedDBInstancesOfferingResult,
        RusotoError<PurchaseReservedDBInstancesOfferingError>,
    >;

    /// <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn reboot_db_instance(
        &self,
        input: RebootDBInstanceMessage,
    ) -> Result<RebootDBInstanceResult, RusotoError<RebootDBInstanceError>>;

    /// <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
    async fn register_db_proxy_targets(
        &self,
        input: RegisterDBProxyTargetsRequest,
    ) -> Result<RegisterDBProxyTargetsResponse, RusotoError<RegisterDBProxyTargetsError>>;

    /// <p><p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn remove_from_global_cluster(
        &self,
        input: RemoveFromGlobalClusterMessage,
    ) -> Result<RemoveFromGlobalClusterResult, RusotoError<RemoveFromGlobalClusterError>>;

    /// <p><p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other Amazon Web Services Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn remove_role_from_db_cluster(
        &self,
        input: RemoveRoleFromDBClusterMessage,
    ) -> Result<(), RusotoError<RemoveRoleFromDBClusterError>>;

    /// <p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from a DB instance.</p>
    async fn remove_role_from_db_instance(
        &self,
        input: RemoveRoleFromDBInstanceMessage,
    ) -> Result<(), RusotoError<RemoveRoleFromDBInstanceError>>;

    /// <p>Removes a source identifier from an existing RDS event notification subscription.</p>
    async fn remove_source_identifier_from_subscription(
        &self,
        input: RemoveSourceIdentifierFromSubscriptionMessage,
    ) -> Result<
        RemoveSourceIdentifierFromSubscriptionResult,
        RusotoError<RemoveSourceIdentifierFromSubscriptionError>,
    >;

    /// <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn remove_tags_from_resource(
        &self,
        input: RemoveTagsFromResourceMessage,
    ) -> Result<(), RusotoError<RemoveTagsFromResourceError>>;

    /// <p><p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn reset_db_cluster_parameter_group(
        &self,
        input: ResetDBClusterParameterGroupMessage,
    ) -> Result<DBClusterParameterGroupNameMessage, RusotoError<ResetDBClusterParameterGroupError>>;

    /// <p>Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. </p>
    async fn reset_db_parameter_group(
        &self,
        input: ResetDBParameterGroupMessage,
    ) -> Result<DBParameterGroupNameMessage, RusotoError<ResetDBParameterGroupError>>;

    /// <p><p>Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3"> Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromS3</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters. The source DB engine must be MySQL.</p> </note></p>
    async fn restore_db_cluster_from_s3(
        &self,
        input: RestoreDBClusterFromS3Message,
    ) -> Result<RestoreDBClusterFromS3Result, RusotoError<RestoreDBClusterFromS3Error>>;

    /// <p><p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don&#39;t specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn restore_db_cluster_from_snapshot(
        &self,
        input: RestoreDBClusterFromSnapshotMessage,
    ) -> Result<RestoreDBClusterFromSnapshotResult, RusotoError<RestoreDBClusterFromSnapshotError>>;

    /// <p><p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn restore_db_cluster_to_point_in_time(
        &self,
        input: RestoreDBClusterToPointInTimeMessage,
    ) -> Result<RestoreDBClusterToPointInTimeResult, RusotoError<RestoreDBClusterToPointInTimeError>>;

    /// <p><p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most of the source&#39;s original configuration, including the default security group and DB parameter group. By default, the new DB instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p> <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn&#39;t allow two DB instances with the same name. After you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note></p>
    async fn restore_db_instance_from_db_snapshot(
        &self,
        input: RestoreDBInstanceFromDBSnapshotMessage,
    ) -> Result<
        RestoreDBInstanceFromDBSnapshotResult,
        RusotoError<RestoreDBInstanceFromDBSnapshotError>,
    >;

    /// <p>Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn restore_db_instance_from_s3(
        &self,
        input: RestoreDBInstanceFromS3Message,
    ) -> Result<RestoreDBInstanceFromS3Result, RusotoError<RestoreDBInstanceFromS3Error>>;

    /// <p><p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note></p>
    async fn restore_db_instance_to_point_in_time(
        &self,
        input: RestoreDBInstanceToPointInTimeMessage,
    ) -> Result<
        RestoreDBInstanceToPointInTimeResult,
        RusotoError<RestoreDBInstanceToPointInTimeError>,
    >;

    /// <p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>
    async fn revoke_db_security_group_ingress(
        &self,
        input: RevokeDBSecurityGroupIngressMessage,
    ) -> Result<RevokeDBSecurityGroupIngressResult, RusotoError<RevokeDBSecurityGroupIngressError>>;

    /// <p>Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn start_activity_stream(
        &self,
        input: StartActivityStreamRequest,
    ) -> Result<StartActivityStreamResponse, RusotoError<StartActivityStreamError>>;

    /// <p><p>Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web Services console, the stop-db-cluster CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn start_db_cluster(
        &self,
        input: StartDBClusterMessage,
    ) -> Result<StartDBClusterResult, RusotoError<StartDBClusterError>>;

    /// <p><p> Starts an Amazon RDS DB instance that was stopped using the Amazon Web Services console, the stop-db-instance CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note></p>
    async fn start_db_instance(
        &self,
        input: StartDBInstanceMessage,
    ) -> Result<StartDBInstanceResult, RusotoError<StartDBInstanceError>>;

    /// <p>Enables replication of automated backups to a different Amazon Web Services Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html"> Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn start_db_instance_automated_backups_replication(
        &self,
        input: StartDBInstanceAutomatedBackupsReplicationMessage,
    ) -> Result<
        StartDBInstanceAutomatedBackupsReplicationResult,
        RusotoError<StartDBInstanceAutomatedBackupsReplicationError>,
    >;

    /// <p>Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. </p>
    async fn start_export_task(
        &self,
        input: StartExportTaskMessage,
    ) -> Result<ExportTask, RusotoError<StartExportTaskError>>;

    /// <p>Stops a database activity stream that was started using the Amazon Web Services console, the <code>start-activity-stream</code> CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn stop_activity_stream(
        &self,
        input: StopActivityStreamRequest,
    ) -> Result<StopActivityStreamResponse, RusotoError<StopActivityStreamError>>;

    /// <p><p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn stop_db_cluster(
        &self,
        input: StopDBClusterMessage,
    ) -> Result<StopDBClusterResult, RusotoError<StopDBClusterError>>;

    /// <p><p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance&#39;s metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note></p>
    async fn stop_db_instance(
        &self,
        input: StopDBInstanceMessage,
    ) -> Result<StopDBInstanceResult, RusotoError<StopDBInstanceError>>;

    /// <p>Stops automated backup replication for a DB instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html"> Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn stop_db_instance_automated_backups_replication(
        &self,
        input: StopDBInstanceAutomatedBackupsReplicationMessage,
    ) -> Result<
        StopDBInstanceAutomatedBackupsReplicationResult,
        RusotoError<StopDBInstanceAutomatedBackupsReplicationError>,
    >;
}
/// A client for the Amazon RDS API.
#[derive(Clone)]
pub struct RdsClient {
    client: Client,
    region: region::Region,
}

impl RdsClient {
    /// Creates a client backed by the default tokio event loop.
    ///
    /// The client will use the default credentials provider and tls client.
    pub fn new(region: region::Region) -> RdsClient {
        RdsClient {
            client: Client::shared(),
            region,
        }
    }

    pub fn new_with<P, D>(
        request_dispatcher: D,
        credentials_provider: P,
        region: region::Region,
    ) -> RdsClient
    where
        P: ProvideAwsCredentials + Send + Sync + 'static,
        D: DispatchSignedRequest + Send + Sync + 'static,
    {
        RdsClient {
            client: Client::new_with(credentials_provider, request_dispatcher),
            region,
        }
    }

    pub fn new_with_client(client: Client, region: region::Region) -> RdsClient {
        RdsClient { client, region }
    }
}

#[async_trait]
impl Rds for RdsClient {
    /// <p><p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other Amazon Web Services Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn add_role_to_db_cluster(
        &self,
        input: AddRoleToDBClusterMessage,
    ) -> Result<(), RusotoError<AddRoleToDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("AddRoleToDBCluster");
        let mut params = params;
        AddRoleToDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, AddRoleToDBClusterError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p><p>Associates an Amazon Web Services Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note></p>
    async fn add_role_to_db_instance(
        &self,
        input: AddRoleToDBInstanceMessage,
    ) -> Result<(), RusotoError<AddRoleToDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("AddRoleToDBInstance");
        let mut params = params;
        AddRoleToDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, AddRoleToDBInstanceError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Adds a source identifier to an existing RDS event notification subscription.</p>
    async fn add_source_identifier_to_subscription(
        &self,
        input: AddSourceIdentifierToSubscriptionMessage,
    ) -> Result<
        AddSourceIdentifierToSubscriptionResult,
        RusotoError<AddSourceIdentifierToSubscriptionError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("AddSourceIdentifierToSubscription");
        let mut params = params;
        AddSourceIdentifierToSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                AddSourceIdentifierToSubscriptionError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = AddSourceIdentifierToSubscriptionResultDeserializer::deserialize(
                "AddSourceIdentifierToSubscriptionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
    async fn add_tags_to_resource(
        &self,
        input: AddTagsToResourceMessage,
    ) -> Result<(), RusotoError<AddTagsToResourceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("AddTagsToResource");
        let mut params = params;
        AddTagsToResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, AddTagsToResourceError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
    async fn apply_pending_maintenance_action(
        &self,
        input: ApplyPendingMaintenanceActionMessage,
    ) -> Result<ApplyPendingMaintenanceActionResult, RusotoError<ApplyPendingMaintenanceActionError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ApplyPendingMaintenanceAction");
        let mut params = params;
        ApplyPendingMaintenanceActionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ApplyPendingMaintenanceActionError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ApplyPendingMaintenanceActionResultDeserializer::deserialize(
                "ApplyPendingMaintenanceActionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one Amazon Web Services Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
    async fn authorize_db_security_group_ingress(
        &self,
        input: AuthorizeDBSecurityGroupIngressMessage,
    ) -> Result<
        AuthorizeDBSecurityGroupIngressResult,
        RusotoError<AuthorizeDBSecurityGroupIngressError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("AuthorizeDBSecurityGroupIngress");
        let mut params = params;
        AuthorizeDBSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, AuthorizeDBSecurityGroupIngressError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = AuthorizeDBSecurityGroupIngressResultDeserializer::deserialize(
                "AuthorizeDBSecurityGroupIngressResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora MySQL DB clusters.</p> </note></p>
    async fn backtrack_db_cluster(
        &self,
        input: BacktrackDBClusterMessage,
    ) -> Result<DBClusterBacktrack, RusotoError<BacktrackDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("BacktrackDBCluster");
        let mut params = params;
        BacktrackDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, BacktrackDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBClusterBacktrackDeserializer::deserialize("BacktrackDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. </p>
    async fn cancel_export_task(
        &self,
        input: CancelExportTaskMessage,
    ) -> Result<ExportTask, RusotoError<CancelExportTaskError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CancelExportTask");
        let mut params = params;
        CancelExportTaskMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CancelExportTaskError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ExportTaskDeserializer::deserialize("CancelExportTaskResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn copy_db_cluster_parameter_group(
        &self,
        input: CopyDBClusterParameterGroupMessage,
    ) -> Result<CopyDBClusterParameterGroupResult, RusotoError<CopyDBClusterParameterGroupError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CopyDBClusterParameterGroup");
        let mut params = params;
        CopyDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CopyDBClusterParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CopyDBClusterParameterGroupResultDeserializer::deserialize(
                "CopyDBClusterParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another Amazon Web Services Region. In that case, the Amazon Web Services Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination Amazon Web Services Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another Amazon Web Services Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source Amazon Web Services Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source Amazon Web Services Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in &quot;copying&quot; status.</p> <p>For more information on copying encrypted DB cluster snapshots from one Amazon Web Services Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn copy_db_cluster_snapshot(
        &self,
        input: CopyDBClusterSnapshotMessage,
    ) -> Result<CopyDBClusterSnapshotResult, RusotoError<CopyDBClusterSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CopyDBClusterSnapshot");
        let mut params = params;
        CopyDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CopyDBClusterSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CopyDBClusterSnapshotResultDeserializer::deserialize(
                "CopyDBClusterSnapshotResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Copies the specified DB parameter group.</p>
    async fn copy_db_parameter_group(
        &self,
        input: CopyDBParameterGroupMessage,
    ) -> Result<CopyDBParameterGroupResult, RusotoError<CopyDBParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CopyDBParameterGroup");
        let mut params = params;
        CopyDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CopyDBParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CopyDBParameterGroupResultDeserializer::deserialize(
                "CopyDBParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Copies the specified DB snapshot. The source DB snapshot must be in the <code>available</code> state.</p> <p>You can copy a snapshot from one Amazon Web Services Region to another. In that case, the Amazon Web Services Region where you call the <code>CopyDBSnapshot</code> action is the destination Amazon Web Services Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn copy_db_snapshot(
        &self,
        input: CopyDBSnapshotMessage,
    ) -> Result<CopyDBSnapshotResult, RusotoError<CopyDBSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CopyDBSnapshot");
        let mut params = params;
        CopyDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CopyDBSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CopyDBSnapshotResultDeserializer::deserialize("CopyDBSnapshotResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Copies the specified option group.</p>
    async fn copy_option_group(
        &self,
        input: CopyOptionGroupMessage,
    ) -> Result<CopyOptionGroupResult, RusotoError<CopyOptionGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CopyOptionGroup");
        let mut params = params;
        CopyOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CopyOptionGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CopyOptionGroupResultDeserializer::deserialize("CopyOptionGroupResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn create_custom_availability_zone(
        &self,
        input: CreateCustomAvailabilityZoneMessage,
    ) -> Result<CreateCustomAvailabilityZoneResult, RusotoError<CreateCustomAvailabilityZoneError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateCustomAvailabilityZone");
        let mut params = params;
        CreateCustomAvailabilityZoneMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateCustomAvailabilityZoneError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateCustomAvailabilityZoneResultDeserializer::deserialize(
                "CreateCustomAvailabilityZoneResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a read replica of another DB cluster or Amazon RDS MySQL or PostgreSQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster(
        &self,
        input: CreateDBClusterMessage,
    ) -> Result<CreateDBClusterResult, RusotoError<CreateDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBCluster");
        let mut params = params;
        CreateDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CreateDBClusterResultDeserializer::deserialize("CreateDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_endpoint(
        &self,
        input: CreateDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<CreateDBClusterEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBClusterEndpoint");
        let mut params = params;
        CreateDBClusterEndpointMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBClusterEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBClusterEndpointDeserializer::deserialize("CreateDBClusterEndpointResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_parameter_group(
        &self,
        input: CreateDBClusterParameterGroupMessage,
    ) -> Result<CreateDBClusterParameterGroupResult, RusotoError<CreateDBClusterParameterGroupError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBClusterParameterGroup");
        let mut params = params;
        CreateDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBClusterParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBClusterParameterGroupResultDeserializer::deserialize(
                "CreateDBClusterParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_db_cluster_snapshot(
        &self,
        input: CreateDBClusterSnapshotMessage,
    ) -> Result<CreateDBClusterSnapshotResult, RusotoError<CreateDBClusterSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBClusterSnapshot");
        let mut params = params;
        CreateDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBClusterSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBClusterSnapshotResultDeserializer::deserialize(
                "CreateDBClusterSnapshotResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a new DB instance.</p>
    async fn create_db_instance(
        &self,
        input: CreateDBInstanceMessage,
    ) -> Result<CreateDBInstanceResult, RusotoError<CreateDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBInstance");
        let mut params = params;
        CreateDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CreateDBInstanceResultDeserializer::deserialize("CreateDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB instance that acts as a read replica for an existing source DB instance. You can create a read replica for a DB instance running MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn&#39;t support this action. Call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster.</p> <p>All read replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified.</p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important></p>
    async fn create_db_instance_read_replica(
        &self,
        input: CreateDBInstanceReadReplicaMessage,
    ) -> Result<CreateDBInstanceReadReplicaResult, RusotoError<CreateDBInstanceReadReplicaError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBInstanceReadReplica");
        let mut params = params;
        CreateDBInstanceReadReplicaMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBInstanceReadReplicaError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBInstanceReadReplicaResultDeserializer::deserialize(
                "CreateDBInstanceReadReplicaResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important></p>
    async fn create_db_parameter_group(
        &self,
        input: CreateDBParameterGroupMessage,
    ) -> Result<CreateDBParameterGroupResult, RusotoError<CreateDBParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBParameterGroup");
        let mut params = params;
        CreateDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBParameterGroupResultDeserializer::deserialize(
                "CreateDBParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a new DB proxy.</p>
    async fn create_db_proxy(
        &self,
        input: CreateDBProxyRequest,
    ) -> Result<CreateDBProxyResponse, RusotoError<CreateDBProxyError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBProxy");
        let mut params = params;
        CreateDBProxyRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBProxyError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CreateDBProxyResponseDeserializer::deserialize("CreateDBProxyResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p> Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are associated with Aurora DB clusters. You can use DB proxy endpoints to specify read/write or read-only access to the DB cluster. You can also use DB proxy endpoints to access a DB proxy through a different VPC than the proxy's default VPC. </p>
    async fn create_db_proxy_endpoint(
        &self,
        input: CreateDBProxyEndpointRequest,
    ) -> Result<CreateDBProxyEndpointResponse, RusotoError<CreateDBProxyEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBProxyEndpoint");
        let mut params = params;
        CreateDBProxyEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBProxyEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBProxyEndpointResponseDeserializer::deserialize(
                "CreateDBProxyEndpointResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note></p>
    async fn create_db_security_group(
        &self,
        input: CreateDBSecurityGroupMessage,
    ) -> Result<CreateDBSecurityGroupResult, RusotoError<CreateDBSecurityGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBSecurityGroup");
        let mut params = params;
        CreateDBSecurityGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBSecurityGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBSecurityGroupResultDeserializer::deserialize(
                "CreateDBSecurityGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a snapshot of a DB instance. The source DB instance must be in the <code>available</code> or <code>storage-optimization</code> state.</p>
    async fn create_db_snapshot(
        &self,
        input: CreateDBSnapshotMessage,
    ) -> Result<CreateDBSnapshotResult, RusotoError<CreateDBSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBSnapshot");
        let mut params = params;
        CreateDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CreateDBSnapshotResultDeserializer::deserialize("CreateDBSnapshotResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
    async fn create_db_subnet_group(
        &self,
        input: CreateDBSubnetGroupMessage,
    ) -> Result<CreateDBSubnetGroupResult, RusotoError<CreateDBSubnetGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateDBSubnetGroup");
        let mut params = params;
        CreateDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateDBSubnetGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateDBSubnetGroupResultDeserializer::deserialize(
                "CreateDBSubnetGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of and provide a list of RDS sources (<code>SourceIds</code>) that triggers the events. You can also provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code> = <code>mydbinstance1</code>, <code>mydbinstance2</code> and <code>EventCategories</code> = <code>Availability</code>, <code>Backup</code>.</p> <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType</code> = <code>db-instance</code> and <code>SourceIdentifier</code> = <code>myDBInstance1</code>, you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your RDS sources. If you don&#39;t specify either the SourceType or the <code>SourceIdentifier</code>, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren&#39;t sent for the topic.</p> </note></p>
    async fn create_event_subscription(
        &self,
        input: CreateEventSubscriptionMessage,
    ) -> Result<CreateEventSubscriptionResult, RusotoError<CreateEventSubscriptionError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateEventSubscription");
        let mut params = params;
        CreateEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateEventSubscriptionError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateEventSubscriptionResultDeserializer::deserialize(
                "CreateEventSubscriptionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Creates an Aurora global database spread across multiple Amazon Web Services Regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn create_global_cluster(
        &self,
        input: CreateGlobalClusterMessage,
    ) -> Result<CreateGlobalClusterResult, RusotoError<CreateGlobalClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateGlobalCluster");
        let mut params = params;
        CreateGlobalClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateGlobalClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CreateGlobalClusterResultDeserializer::deserialize(
                "CreateGlobalClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Creates a new option group. You can create up to 20 option groups.</p>
    async fn create_option_group(
        &self,
        input: CreateOptionGroupMessage,
    ) -> Result<CreateOptionGroupResult, RusotoError<CreateOptionGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("CreateOptionGroup");
        let mut params = params;
        CreateOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, CreateOptionGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CreateOptionGroupResultDeserializer::deserialize("CreateOptionGroupResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn delete_custom_availability_zone(
        &self,
        input: DeleteCustomAvailabilityZoneMessage,
    ) -> Result<DeleteCustomAvailabilityZoneResult, RusotoError<DeleteCustomAvailabilityZoneError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteCustomAvailabilityZone");
        let mut params = params;
        DeleteCustomAvailabilityZoneMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteCustomAvailabilityZoneError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteCustomAvailabilityZoneResultDeserializer::deserialize(
                "DeleteCustomAvailabilityZoneResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster(
        &self,
        input: DeleteDBClusterMessage,
    ) -> Result<DeleteDBClusterResult, RusotoError<DeleteDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBCluster");
        let mut params = params;
        DeleteDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DeleteDBClusterResultDeserializer::deserialize("DeleteDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_endpoint(
        &self,
        input: DeleteDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<DeleteDBClusterEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBClusterEndpoint");
        let mut params = params;
        DeleteDBClusterEndpointMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBClusterEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBClusterEndpointDeserializer::deserialize("DeleteDBClusterEndpointResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_parameter_group(
        &self,
        input: DeleteDBClusterParameterGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBClusterParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBClusterParameterGroup");
        let mut params = params;
        DeleteDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBClusterParameterGroupError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p><p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_db_cluster_snapshot(
        &self,
        input: DeleteDBClusterSnapshotMessage,
    ) -> Result<DeleteDBClusterSnapshotResult, RusotoError<DeleteDBClusterSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBClusterSnapshot");
        let mut params = params;
        DeleteDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBClusterSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteDBClusterSnapshotResultDeserializer::deserialize(
                "DeleteDBClusterSnapshotResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a read replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a read replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
    async fn delete_db_instance(
        &self,
        input: DeleteDBInstanceMessage,
    ) -> Result<DeleteDBInstanceResult, RusotoError<DeleteDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBInstance");
        let mut params = params;
        DeleteDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DeleteDBInstanceResultDeserializer::deserialize("DeleteDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes automated backups using the <code>DbiResourceId</code> value of the source DB instance or the Amazon Resource Name (ARN) of the automated backups.</p>
    async fn delete_db_instance_automated_backup(
        &self,
        input: DeleteDBInstanceAutomatedBackupMessage,
    ) -> Result<
        DeleteDBInstanceAutomatedBackupResult,
        RusotoError<DeleteDBInstanceAutomatedBackupError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBInstanceAutomatedBackup");
        let mut params = params;
        DeleteDBInstanceAutomatedBackupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBInstanceAutomatedBackupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteDBInstanceAutomatedBackupResultDeserializer::deserialize(
                "DeleteDBInstanceAutomatedBackupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.</p>
    async fn delete_db_parameter_group(
        &self,
        input: DeleteDBParameterGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBParameterGroup");
        let mut params = params;
        DeleteDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBParameterGroupError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Deletes an existing DB proxy.</p>
    async fn delete_db_proxy(
        &self,
        input: DeleteDBProxyRequest,
    ) -> Result<DeleteDBProxyResponse, RusotoError<DeleteDBProxyError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBProxy");
        let mut params = params;
        DeleteDBProxyRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBProxyError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DeleteDBProxyResponseDeserializer::deserialize("DeleteDBProxyResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to access the DB proxy using the endpoint that you defined. The endpoint that you delete might have provided capabilities such as read/write or read-only operations, or using a different VPC than the DB proxy's default VPC.</p>
    async fn delete_db_proxy_endpoint(
        &self,
        input: DeleteDBProxyEndpointRequest,
    ) -> Result<DeleteDBProxyEndpointResponse, RusotoError<DeleteDBProxyEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBProxyEndpoint");
        let mut params = params;
        DeleteDBProxyEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBProxyEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteDBProxyEndpointResponseDeserializer::deserialize(
                "DeleteDBProxyEndpointResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note></p>
    async fn delete_db_security_group(
        &self,
        input: DeleteDBSecurityGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBSecurityGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBSecurityGroup");
        let mut params = params;
        DeleteDBSecurityGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBSecurityGroupError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p><p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note></p>
    async fn delete_db_snapshot(
        &self,
        input: DeleteDBSnapshotMessage,
    ) -> Result<DeleteDBSnapshotResult, RusotoError<DeleteDBSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBSnapshot");
        let mut params = params;
        DeleteDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DeleteDBSnapshotResultDeserializer::deserialize("DeleteDBSnapshotResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note></p>
    async fn delete_db_subnet_group(
        &self,
        input: DeleteDBSubnetGroupMessage,
    ) -> Result<(), RusotoError<DeleteDBSubnetGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteDBSubnetGroup");
        let mut params = params;
        DeleteDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteDBSubnetGroupError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Deletes an RDS event notification subscription.</p>
    async fn delete_event_subscription(
        &self,
        input: DeleteEventSubscriptionMessage,
    ) -> Result<DeleteEventSubscriptionResult, RusotoError<DeleteEventSubscriptionError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteEventSubscription");
        let mut params = params;
        DeleteEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteEventSubscriptionError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteEventSubscriptionResultDeserializer::deserialize(
                "DeleteEventSubscriptionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn delete_global_cluster(
        &self,
        input: DeleteGlobalClusterMessage,
    ) -> Result<DeleteGlobalClusterResult, RusotoError<DeleteGlobalClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteGlobalCluster");
        let mut params = params;
        DeleteGlobalClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteGlobalClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DeleteGlobalClusterResultDeserializer::deserialize(
                "DeleteGlobalClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
    async fn delete_installation_media(
        &self,
        input: DeleteInstallationMediaMessage,
    ) -> Result<InstallationMedia, RusotoError<DeleteInstallationMediaError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteInstallationMedia");
        let mut params = params;
        DeleteInstallationMediaMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteInstallationMediaError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                InstallationMediaDeserializer::deserialize("DeleteInstallationMediaResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Deletes an existing option group.</p>
    async fn delete_option_group(
        &self,
        input: DeleteOptionGroupMessage,
    ) -> Result<(), RusotoError<DeleteOptionGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeleteOptionGroup");
        let mut params = params;
        DeleteOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeleteOptionGroupError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
    async fn deregister_db_proxy_targets(
        &self,
        input: DeregisterDBProxyTargetsRequest,
    ) -> Result<DeregisterDBProxyTargetsResponse, RusotoError<DeregisterDBProxyTargetsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DeregisterDBProxyTargets");
        let mut params = params;
        DeregisterDBProxyTargetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DeregisterDBProxyTargetsError::from_response)
            .await?;

        let result = DeregisterDBProxyTargetsResponse::default();

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
    async fn describe_account_attributes(
        &self,
        input: DescribeAccountAttributesMessage,
    ) -> Result<AccountAttributesMessage, RusotoError<DescribeAccountAttributesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeAccountAttributes");
        let mut params = params;
        DescribeAccountAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeAccountAttributesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = AccountAttributesMessageDeserializer::deserialize(
                "DescribeAccountAttributesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Lists the set of CA certificates provided by Amazon RDS for this Amazon Web Services account.</p>
    async fn describe_certificates(
        &self,
        input: DescribeCertificatesMessage,
    ) -> Result<CertificateMessage, RusotoError<DescribeCertificatesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeCertificates");
        let mut params = params;
        DescribeCertificatesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeCertificatesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                CertificateMessageDeserializer::deserialize("DescribeCertificatesResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> RDS on VMware User Guide.</a> </p>
    async fn describe_custom_availability_zones(
        &self,
        input: DescribeCustomAvailabilityZonesMessage,
    ) -> Result<CustomAvailabilityZoneMessage, RusotoError<DescribeCustomAvailabilityZonesError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeCustomAvailabilityZones");
        let mut params = params;
        DescribeCustomAvailabilityZonesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeCustomAvailabilityZonesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = CustomAvailabilityZoneMessageDeserializer::deserialize(
                "DescribeCustomAvailabilityZonesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora MySQL DB clusters.</p> </note></p>
    async fn describe_db_cluster_backtracks(
        &self,
        input: DescribeDBClusterBacktracksMessage,
    ) -> Result<DBClusterBacktrackMessage, RusotoError<DescribeDBClusterBacktracksError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterBacktracks");
        let mut params = params;
        DescribeDBClusterBacktracksMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBClusterBacktracksError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterBacktrackMessageDeserializer::deserialize(
                "DescribeDBClusterBacktracksResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_endpoints(
        &self,
        input: DescribeDBClusterEndpointsMessage,
    ) -> Result<DBClusterEndpointMessage, RusotoError<DescribeDBClusterEndpointsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterEndpoints");
        let mut params = params;
        DescribeDBClusterEndpointsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBClusterEndpointsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterEndpointMessageDeserializer::deserialize(
                "DescribeDBClusterEndpointsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_parameter_groups(
        &self,
        input: DescribeDBClusterParameterGroupsMessage,
    ) -> Result<DBClusterParameterGroupsMessage, RusotoError<DescribeDBClusterParameterGroupsError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterParameterGroups");
        let mut params = params;
        DescribeDBClusterParameterGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeDBClusterParameterGroupsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterParameterGroupsMessageDeserializer::deserialize(
                "DescribeDBClusterParameterGroupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_parameters(
        &self,
        input: DescribeDBClusterParametersMessage,
    ) -> Result<DBClusterParameterGroupDetails, RusotoError<DescribeDBClusterParametersError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterParameters");
        let mut params = params;
        DescribeDBClusterParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBClusterParametersError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterParameterGroupDetailsDeserializer::deserialize(
                "DescribeDBClusterParametersResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_snapshot_attributes(
        &self,
        input: DescribeDBClusterSnapshotAttributesMessage,
    ) -> Result<
        DescribeDBClusterSnapshotAttributesResult,
        RusotoError<DescribeDBClusterSnapshotAttributesError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterSnapshotAttributes");
        let mut params = params;
        DescribeDBClusterSnapshotAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeDBClusterSnapshotAttributesError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBClusterSnapshotAttributesResultDeserializer::deserialize(
                "DescribeDBClusterSnapshotAttributesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_db_cluster_snapshots(
        &self,
        input: DescribeDBClusterSnapshotsMessage,
    ) -> Result<DBClusterSnapshotMessage, RusotoError<DescribeDBClusterSnapshotsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusterSnapshots");
        let mut params = params;
        DescribeDBClusterSnapshotsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBClusterSnapshotsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterSnapshotMessageDeserializer::deserialize(
                "DescribeDBClusterSnapshotsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note></p>
    async fn describe_db_clusters(
        &self,
        input: DescribeDBClustersMessage,
    ) -> Result<DBClusterMessage, RusotoError<DescribeDBClustersError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBClusters");
        let mut params = params;
        DescribeDBClustersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBClustersError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBClusterMessageDeserializer::deserialize("DescribeDBClustersResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of the available DB engines.</p>
    async fn describe_db_engine_versions(
        &self,
        input: DescribeDBEngineVersionsMessage,
    ) -> Result<DBEngineVersionMessage, RusotoError<DescribeDBEngineVersionsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBEngineVersions");
        let mut params = params;
        DescribeDBEngineVersionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBEngineVersionsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBEngineVersionMessageDeserializer::deserialize(
                "DescribeDBEngineVersionsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
    async fn describe_db_instance_automated_backups(
        &self,
        input: DescribeDBInstanceAutomatedBackupsMessage,
    ) -> Result<
        DBInstanceAutomatedBackupMessage,
        RusotoError<DescribeDBInstanceAutomatedBackupsError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBInstanceAutomatedBackups");
        let mut params = params;
        DescribeDBInstanceAutomatedBackupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeDBInstanceAutomatedBackupsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBInstanceAutomatedBackupMessageDeserializer::deserialize(
                "DescribeDBInstanceAutomatedBackupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note></p>
    async fn describe_db_instances(
        &self,
        input: DescribeDBInstancesMessage,
    ) -> Result<DBInstanceMessage, RusotoError<DescribeDBInstancesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBInstances");
        let mut params = params;
        DescribeDBInstancesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBInstancesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBInstanceMessageDeserializer::deserialize("DescribeDBInstancesResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of DB log files for the DB instance.</p>
    async fn describe_db_log_files(
        &self,
        input: DescribeDBLogFilesMessage,
    ) -> Result<DescribeDBLogFilesResponse, RusotoError<DescribeDBLogFilesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBLogFiles");
        let mut params = params;
        DescribeDBLogFilesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBLogFilesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBLogFilesResponseDeserializer::deserialize(
                "DescribeDBLogFilesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p> Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. </p>
    async fn describe_db_parameter_groups(
        &self,
        input: DescribeDBParameterGroupsMessage,
    ) -> Result<DBParameterGroupsMessage, RusotoError<DescribeDBParameterGroupsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBParameterGroups");
        let mut params = params;
        DescribeDBParameterGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBParameterGroupsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBParameterGroupsMessageDeserializer::deserialize(
                "DescribeDBParameterGroupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns the detailed parameter list for a particular DB parameter group.</p>
    async fn describe_db_parameters(
        &self,
        input: DescribeDBParametersMessage,
    ) -> Result<DBParameterGroupDetails, RusotoError<DescribeDBParametersError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBParameters");
        let mut params = params;
        DescribeDBParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBParametersError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBParameterGroupDetailsDeserializer::deserialize(
                "DescribeDBParametersResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about DB proxies.</p>
    async fn describe_db_proxies(
        &self,
        input: DescribeDBProxiesRequest,
    ) -> Result<DescribeDBProxiesResponse, RusotoError<DescribeDBProxiesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBProxies");
        let mut params = params;
        DescribeDBProxiesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBProxiesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBProxiesResponseDeserializer::deserialize(
                "DescribeDBProxiesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about DB proxy endpoints.</p>
    async fn describe_db_proxy_endpoints(
        &self,
        input: DescribeDBProxyEndpointsRequest,
    ) -> Result<DescribeDBProxyEndpointsResponse, RusotoError<DescribeDBProxyEndpointsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBProxyEndpoints");
        let mut params = params;
        DescribeDBProxyEndpointsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBProxyEndpointsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBProxyEndpointsResponseDeserializer::deserialize(
                "DescribeDBProxyEndpointsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
    async fn describe_db_proxy_target_groups(
        &self,
        input: DescribeDBProxyTargetGroupsRequest,
    ) -> Result<DescribeDBProxyTargetGroupsResponse, RusotoError<DescribeDBProxyTargetGroupsError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBProxyTargetGroups");
        let mut params = params;
        DescribeDBProxyTargetGroupsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBProxyTargetGroupsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBProxyTargetGroupsResponseDeserializer::deserialize(
                "DescribeDBProxyTargetGroupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
    async fn describe_db_proxy_targets(
        &self,
        input: DescribeDBProxyTargetsRequest,
    ) -> Result<DescribeDBProxyTargetsResponse, RusotoError<DescribeDBProxyTargetsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBProxyTargets");
        let mut params = params;
        DescribeDBProxyTargetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBProxyTargetsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBProxyTargetsResponseDeserializer::deserialize(
                "DescribeDBProxyTargetsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p> Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. </p>
    async fn describe_db_security_groups(
        &self,
        input: DescribeDBSecurityGroupsMessage,
    ) -> Result<DBSecurityGroupMessage, RusotoError<DescribeDBSecurityGroupsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBSecurityGroups");
        let mut params = params;
        DescribeDBSecurityGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBSecurityGroupsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBSecurityGroupMessageDeserializer::deserialize(
                "DescribeDBSecurityGroupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
    async fn describe_db_snapshot_attributes(
        &self,
        input: DescribeDBSnapshotAttributesMessage,
    ) -> Result<DescribeDBSnapshotAttributesResult, RusotoError<DescribeDBSnapshotAttributesError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBSnapshotAttributes");
        let mut params = params;
        DescribeDBSnapshotAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBSnapshotAttributesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeDBSnapshotAttributesResultDeserializer::deserialize(
                "DescribeDBSnapshotAttributesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about DB snapshots. This API action supports pagination.</p>
    async fn describe_db_snapshots(
        &self,
        input: DescribeDBSnapshotsMessage,
    ) -> Result<DBSnapshotMessage, RusotoError<DescribeDBSnapshotsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBSnapshots");
        let mut params = params;
        DescribeDBSnapshotsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBSnapshotsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBSnapshotMessageDeserializer::deserialize("DescribeDBSnapshotsResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
    async fn describe_db_subnet_groups(
        &self,
        input: DescribeDBSubnetGroupsMessage,
    ) -> Result<DBSubnetGroupMessage, RusotoError<DescribeDBSubnetGroupsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeDBSubnetGroups");
        let mut params = params;
        DescribeDBSubnetGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeDBSubnetGroupsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBSubnetGroupMessageDeserializer::deserialize(
                "DescribeDBSubnetGroupsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
    async fn describe_engine_default_cluster_parameters(
        &self,
        input: DescribeEngineDefaultClusterParametersMessage,
    ) -> Result<
        DescribeEngineDefaultClusterParametersResult,
        RusotoError<DescribeEngineDefaultClusterParametersError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeEngineDefaultClusterParameters");
        let mut params = params;
        DescribeEngineDefaultClusterParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeEngineDefaultClusterParametersError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeEngineDefaultClusterParametersResultDeserializer::deserialize(
                "DescribeEngineDefaultClusterParametersResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns the default engine and system parameter information for the specified database engine.</p>
    async fn describe_engine_default_parameters(
        &self,
        input: DescribeEngineDefaultParametersMessage,
    ) -> Result<
        DescribeEngineDefaultParametersResult,
        RusotoError<DescribeEngineDefaultParametersError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeEngineDefaultParameters");
        let mut params = params;
        DescribeEngineDefaultParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeEngineDefaultParametersError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeEngineDefaultParametersResultDeserializer::deserialize(
                "DescribeEngineDefaultParametersResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn describe_event_categories(
        &self,
        input: DescribeEventCategoriesMessage,
    ) -> Result<EventCategoriesMessage, RusotoError<DescribeEventCategoriesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeEventCategories");
        let mut params = params;
        DescribeEventCategoriesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeEventCategoriesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = EventCategoriesMessageDeserializer::deserialize(
                "DescribeEventCategoriesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p> <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
    async fn describe_event_subscriptions(
        &self,
        input: DescribeEventSubscriptionsMessage,
    ) -> Result<EventSubscriptionsMessage, RusotoError<DescribeEventSubscriptionsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeEventSubscriptions");
        let mut params = params;
        DescribeEventSubscriptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeEventSubscriptionsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = EventSubscriptionsMessageDeserializer::deserialize(
                "DescribeEventSubscriptionsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots for the past 14 days. Events specific to a particular DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, and DB cluster snapshots group can be obtained by providing the name as a parameter.</p> <note> <p>By default, the past hour of events are returned.</p> </note></p>
    async fn describe_events(
        &self,
        input: DescribeEventsMessage,
    ) -> Result<EventsMessage, RusotoError<DescribeEventsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeEvents");
        let mut params = params;
        DescribeEventsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeEventsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = EventsMessageDeserializer::deserialize("DescribeEventsResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about a snapshot export to Amazon S3. This API operation supports pagination. </p>
    async fn describe_export_tasks(
        &self,
        input: DescribeExportTasksMessage,
    ) -> Result<ExportTasksMessage, RusotoError<DescribeExportTasksError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeExportTasks");
        let mut params = params;
        DescribeExportTasksMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeExportTasksError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ExportTasksMessageDeserializer::deserialize("DescribeExportTasksResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn describe_global_clusters(
        &self,
        input: DescribeGlobalClustersMessage,
    ) -> Result<GlobalClustersMessage, RusotoError<DescribeGlobalClustersError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeGlobalClusters");
        let mut params = params;
        DescribeGlobalClustersMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeGlobalClustersError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = GlobalClustersMessageDeserializer::deserialize(
                "DescribeGlobalClustersResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.</p>
    async fn describe_installation_media(
        &self,
        input: DescribeInstallationMediaMessage,
    ) -> Result<InstallationMediaMessage, RusotoError<DescribeInstallationMediaError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeInstallationMedia");
        let mut params = params;
        DescribeInstallationMediaMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeInstallationMediaError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = InstallationMediaMessageDeserializer::deserialize(
                "DescribeInstallationMediaResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Describes all available options.</p>
    async fn describe_option_group_options(
        &self,
        input: DescribeOptionGroupOptionsMessage,
    ) -> Result<OptionGroupOptionsMessage, RusotoError<DescribeOptionGroupOptionsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeOptionGroupOptions");
        let mut params = params;
        DescribeOptionGroupOptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeOptionGroupOptionsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = OptionGroupOptionsMessageDeserializer::deserialize(
                "DescribeOptionGroupOptionsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Describes the available option groups.</p>
    async fn describe_option_groups(
        &self,
        input: DescribeOptionGroupsMessage,
    ) -> Result<OptionGroups, RusotoError<DescribeOptionGroupsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeOptionGroups");
        let mut params = params;
        DescribeOptionGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeOptionGroupsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                OptionGroupsDeserializer::deserialize("DescribeOptionGroupsResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of orderable DB instance options for the specified engine.</p>
    async fn describe_orderable_db_instance_options(
        &self,
        input: DescribeOrderableDBInstanceOptionsMessage,
    ) -> Result<
        OrderableDBInstanceOptionsMessage,
        RusotoError<DescribeOrderableDBInstanceOptionsError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeOrderableDBInstanceOptions");
        let mut params = params;
        DescribeOrderableDBInstanceOptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeOrderableDBInstanceOptionsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = OrderableDBInstanceOptionsMessageDeserializer::deserialize(
                "DescribeOrderableDBInstanceOptionsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>
    async fn describe_pending_maintenance_actions(
        &self,
        input: DescribePendingMaintenanceActionsMessage,
    ) -> Result<PendingMaintenanceActionsMessage, RusotoError<DescribePendingMaintenanceActionsError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribePendingMaintenanceActions");
        let mut params = params;
        DescribePendingMaintenanceActionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribePendingMaintenanceActionsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = PendingMaintenanceActionsMessageDeserializer::deserialize(
                "DescribePendingMaintenanceActionsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>
    async fn describe_reserved_db_instances(
        &self,
        input: DescribeReservedDBInstancesMessage,
    ) -> Result<ReservedDBInstanceMessage, RusotoError<DescribeReservedDBInstancesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeReservedDBInstances");
        let mut params = params;
        DescribeReservedDBInstancesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeReservedDBInstancesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ReservedDBInstanceMessageDeserializer::deserialize(
                "DescribeReservedDBInstancesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Lists available reserved DB instance offerings.</p>
    async fn describe_reserved_db_instances_offerings(
        &self,
        input: DescribeReservedDBInstancesOfferingsMessage,
    ) -> Result<
        ReservedDBInstancesOfferingMessage,
        RusotoError<DescribeReservedDBInstancesOfferingsError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeReservedDBInstancesOfferings");
        let mut params = params;
        DescribeReservedDBInstancesOfferingsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeReservedDBInstancesOfferingsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ReservedDBInstancesOfferingMessageDeserializer::deserialize(
                "DescribeReservedDBInstancesOfferingsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Returns a list of the source Amazon Web Services Regions where the current Amazon Web Services Region can create a read replica, copy a DB snapshot from, or replicate automated backups from. This API action supports pagination.</p>
    async fn describe_source_regions(
        &self,
        input: DescribeSourceRegionsMessage,
    ) -> Result<SourceRegionMessage, RusotoError<DescribeSourceRegionsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeSourceRegions");
        let mut params = params;
        DescribeSourceRegionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DescribeSourceRegionsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                SourceRegionMessageDeserializer::deserialize("DescribeSourceRegionsResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. </p>
    async fn describe_valid_db_instance_modifications(
        &self,
        input: DescribeValidDBInstanceModificationsMessage,
    ) -> Result<
        DescribeValidDBInstanceModificationsResult,
        RusotoError<DescribeValidDBInstanceModificationsError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DescribeValidDBInstanceModifications");
        let mut params = params;
        DescribeValidDBInstanceModificationsMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                DescribeValidDBInstanceModificationsError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DescribeValidDBInstanceModificationsResultDeserializer::deserialize(
                "DescribeValidDBInstanceModificationsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>
    async fn download_db_log_file_portion(
        &self,
        input: DownloadDBLogFilePortionMessage,
    ) -> Result<DownloadDBLogFilePortionDetails, RusotoError<DownloadDBLogFilePortionError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("DownloadDBLogFilePortion");
        let mut params = params;
        DownloadDBLogFilePortionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, DownloadDBLogFilePortionError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DownloadDBLogFilePortionDetailsDeserializer::deserialize(
                "DownloadDBLogFilePortionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn failover_db_cluster(
        &self,
        input: FailoverDBClusterMessage,
    ) -> Result<FailoverDBClusterResult, RusotoError<FailoverDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("FailoverDBCluster");
        let mut params = params;
        FailoverDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, FailoverDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                FailoverDBClusterResultDeserializer::deserialize("FailoverDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Initiates the failover process for an Aurora global database (<a>GlobalCluster</a>).</p> <p>A failover for an Aurora global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected (target) DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Aurora global database.</p> <p>For more information about failing over an Amazon Aurora global database, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Managed planned failover for Amazon Aurora global databases</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action applies to <a>GlobalCluster</a> (Aurora global databases) only. Use this action only on healthy Aurora global databases with running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios or to reconfigure your Aurora global database topology. </p> </note></p>
    async fn failover_global_cluster(
        &self,
        input: FailoverGlobalClusterMessage,
    ) -> Result<FailoverGlobalClusterResult, RusotoError<FailoverGlobalClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("FailoverGlobalCluster");
        let mut params = params;
        FailoverGlobalClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, FailoverGlobalClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = FailoverGlobalClusterResultDeserializer::deserialize(
                "FailoverGlobalClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.</p>
    async fn import_installation_media(
        &self,
        input: ImportInstallationMediaMessage,
    ) -> Result<InstallationMedia, RusotoError<ImportInstallationMediaError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ImportInstallationMedia");
        let mut params = params;
        ImportInstallationMediaMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ImportInstallationMediaError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                InstallationMediaDeserializer::deserialize("ImportInstallationMediaResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
    async fn list_tags_for_resource(
        &self,
        input: ListTagsForResourceMessage,
    ) -> Result<TagListMessage, RusotoError<ListTagsForResourceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ListTagsForResource");
        let mut params = params;
        ListTagsForResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ListTagsForResourceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                TagListMessageDeserializer::deserialize("ListTagsForResourceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified Amazon Web Services Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified Amazon Web Services Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn modify_certificates(
        &self,
        input: ModifyCertificatesMessage,
    ) -> Result<ModifyCertificatesResult, RusotoError<ModifyCertificatesError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyCertificates");
        let mut params = params;
        ModifyCertificatesMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyCertificatesError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyCertificatesResultDeserializer::deserialize(
                "ModifyCertificatesResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_current_db_cluster_capacity(
        &self,
        input: ModifyCurrentDBClusterCapacityMessage,
    ) -> Result<DBClusterCapacityInfo, RusotoError<ModifyCurrentDBClusterCapacityError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyCurrentDBClusterCapacity");
        let mut params = params;
        ModifyCurrentDBClusterCapacityMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyCurrentDBClusterCapacityError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterCapacityInfoDeserializer::deserialize(
                "ModifyCurrentDBClusterCapacityResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster(
        &self,
        input: ModifyDBClusterMessage,
    ) -> Result<ModifyDBClusterResult, RusotoError<ModifyDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBCluster");
        let mut params = params;
        ModifyDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ModifyDBClusterResultDeserializer::deserialize("ModifyDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_endpoint(
        &self,
        input: ModifyDBClusterEndpointMessage,
    ) -> Result<DBClusterEndpoint, RusotoError<ModifyDBClusterEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBClusterEndpoint");
        let mut params = params;
        ModifyDBClusterEndpointMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBClusterEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                DBClusterEndpointDeserializer::deserialize("ModifyDBClusterEndpointResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_parameter_group(
        &self,
        input: ModifyDBClusterParameterGroupMessage,
    ) -> Result<DBClusterParameterGroupNameMessage, RusotoError<ModifyDBClusterParameterGroupError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBClusterParameterGroup");
        let mut params = params;
        ModifyDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBClusterParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterParameterGroupNameMessageDeserializer::deserialize(
                "ModifyDBClusterParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts.</p> <note> <p>Don&#39;t add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts.</p> </note> <p>If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can&#39;t use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot is public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action. The accounts are returned as values for the <code>restore</code> attribute.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_db_cluster_snapshot_attribute(
        &self,
        input: ModifyDBClusterSnapshotAttributeMessage,
    ) -> Result<
        ModifyDBClusterSnapshotAttributeResult,
        RusotoError<ModifyDBClusterSnapshotAttributeError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBClusterSnapshotAttribute");
        let mut params = params;
        ModifyDBClusterSnapshotAttributeMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                ModifyDBClusterSnapshotAttributeError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyDBClusterSnapshotAttributeResultDeserializer::deserialize(
                "ModifyDBClusterSnapshotAttributeResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. </p>
    async fn modify_db_instance(
        &self,
        input: ModifyDBInstanceMessage,
    ) -> Result<ModifyDBInstanceResult, RusotoError<ModifyDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBInstance");
        let mut params = params;
        ModifyDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ModifyDBInstanceResultDeserializer::deserialize("ModifyDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character<em>set</em>database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important></p>
    async fn modify_db_parameter_group(
        &self,
        input: ModifyDBParameterGroupMessage,
    ) -> Result<DBParameterGroupNameMessage, RusotoError<ModifyDBParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBParameterGroup");
        let mut params = params;
        ModifyDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBParameterGroupNameMessageDeserializer::deserialize(
                "ModifyDBParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Changes the settings for an existing DB proxy.</p>
    async fn modify_db_proxy(
        &self,
        input: ModifyDBProxyRequest,
    ) -> Result<ModifyDBProxyResponse, RusotoError<ModifyDBProxyError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBProxy");
        let mut params = params;
        ModifyDBProxyRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBProxyError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ModifyDBProxyResponseDeserializer::deserialize("ModifyDBProxyResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Changes the settings for an existing DB proxy endpoint.</p>
    async fn modify_db_proxy_endpoint(
        &self,
        input: ModifyDBProxyEndpointRequest,
    ) -> Result<ModifyDBProxyEndpointResponse, RusotoError<ModifyDBProxyEndpointError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBProxyEndpoint");
        let mut params = params;
        ModifyDBProxyEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBProxyEndpointError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyDBProxyEndpointResponseDeserializer::deserialize(
                "ModifyDBProxyEndpointResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
    async fn modify_db_proxy_target_group(
        &self,
        input: ModifyDBProxyTargetGroupRequest,
    ) -> Result<ModifyDBProxyTargetGroupResponse, RusotoError<ModifyDBProxyTargetGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBProxyTargetGroup");
        let mut params = params;
        ModifyDBProxyTargetGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBProxyTargetGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyDBProxyTargetGroupResponseDeserializer::deserialize(
                "ModifyDBProxyTargetGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted or unencrypted, but not shared or public. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
    async fn modify_db_snapshot(
        &self,
        input: ModifyDBSnapshotMessage,
    ) -> Result<ModifyDBSnapshotResult, RusotoError<ModifyDBSnapshotError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBSnapshot");
        let mut params = params;
        ModifyDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ModifyDBSnapshotResultDeserializer::deserialize("ModifyDBSnapshotResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all Amazon Web Services accounts.</p> <note> <p>Don't add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all Amazon Web Services accounts.</p> </note> <p>If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action. The accounts are returned as values for the <code>restore</code> attribute.</p>
    async fn modify_db_snapshot_attribute(
        &self,
        input: ModifyDBSnapshotAttributeMessage,
    ) -> Result<ModifyDBSnapshotAttributeResult, RusotoError<ModifyDBSnapshotAttributeError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBSnapshotAttribute");
        let mut params = params;
        ModifyDBSnapshotAttributeMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBSnapshotAttributeError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyDBSnapshotAttributeResultDeserializer::deserialize(
                "ModifyDBSnapshotAttributeResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
    async fn modify_db_subnet_group(
        &self,
        input: ModifyDBSubnetGroupMessage,
    ) -> Result<ModifyDBSubnetGroupResult, RusotoError<ModifyDBSubnetGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyDBSubnetGroup");
        let mut params = params;
        ModifyDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyDBSubnetGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyDBSubnetGroupResultDeserializer::deserialize(
                "ModifyDBSubnetGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given source type (<code>SourceType</code>) in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation.</p>
    async fn modify_event_subscription(
        &self,
        input: ModifyEventSubscriptionMessage,
    ) -> Result<ModifyEventSubscriptionResult, RusotoError<ModifyEventSubscriptionError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyEventSubscription");
        let mut params = params;
        ModifyEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyEventSubscriptionError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyEventSubscriptionResultDeserializer::deserialize(
                "ModifyEventSubscriptionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn modify_global_cluster(
        &self,
        input: ModifyGlobalClusterMessage,
    ) -> Result<ModifyGlobalClusterResult, RusotoError<ModifyGlobalClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyGlobalCluster");
        let mut params = params;
        ModifyGlobalClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyGlobalClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ModifyGlobalClusterResultDeserializer::deserialize(
                "ModifyGlobalClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies an existing option group.</p>
    async fn modify_option_group(
        &self,
        input: ModifyOptionGroupMessage,
    ) -> Result<ModifyOptionGroupResult, RusotoError<ModifyOptionGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ModifyOptionGroup");
        let mut params = params;
        ModifyOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ModifyOptionGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                ModifyOptionGroupResultDeserializer::deserialize("ModifyOptionGroupResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Promotes a read replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a read replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a read replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your read replica, configure the automated backup window so that daily backups do not interfere with read replica promotion.</p> </li> <li> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note></p>
    async fn promote_read_replica(
        &self,
        input: PromoteReadReplicaMessage,
    ) -> Result<PromoteReadReplicaResult, RusotoError<PromoteReadReplicaError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("PromoteReadReplica");
        let mut params = params;
        PromoteReadReplicaMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, PromoteReadReplicaError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = PromoteReadReplicaResultDeserializer::deserialize(
                "PromoteReadReplicaResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Promotes a read replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn promote_read_replica_db_cluster(
        &self,
        input: PromoteReadReplicaDBClusterMessage,
    ) -> Result<PromoteReadReplicaDBClusterResult, RusotoError<PromoteReadReplicaDBClusterError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("PromoteReadReplicaDBCluster");
        let mut params = params;
        PromoteReadReplicaDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, PromoteReadReplicaDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = PromoteReadReplicaDBClusterResultDeserializer::deserialize(
                "PromoteReadReplicaDBClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Purchases a reserved DB instance offering.</p>
    async fn purchase_reserved_db_instances_offering(
        &self,
        input: PurchaseReservedDBInstancesOfferingMessage,
    ) -> Result<
        PurchaseReservedDBInstancesOfferingResult,
        RusotoError<PurchaseReservedDBInstancesOfferingError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("PurchaseReservedDBInstancesOffering");
        let mut params = params;
        PurchaseReservedDBInstancesOfferingMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                PurchaseReservedDBInstancesOfferingError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = PurchaseReservedDBInstancesOfferingResultDeserializer::deserialize(
                "PurchaseReservedDBInstancesOfferingResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn reboot_db_instance(
        &self,
        input: RebootDBInstanceMessage,
    ) -> Result<RebootDBInstanceResult, RusotoError<RebootDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RebootDBInstance");
        let mut params = params;
        RebootDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RebootDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                RebootDBInstanceResultDeserializer::deserialize("RebootDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
    async fn register_db_proxy_targets(
        &self,
        input: RegisterDBProxyTargetsRequest,
    ) -> Result<RegisterDBProxyTargetsResponse, RusotoError<RegisterDBProxyTargetsError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RegisterDBProxyTargets");
        let mut params = params;
        RegisterDBProxyTargetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RegisterDBProxyTargetsError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RegisterDBProxyTargetsResponseDeserializer::deserialize(
                "RegisterDBProxyTargetsResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn remove_from_global_cluster(
        &self,
        input: RemoveFromGlobalClusterMessage,
    ) -> Result<RemoveFromGlobalClusterResult, RusotoError<RemoveFromGlobalClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RemoveFromGlobalCluster");
        let mut params = params;
        RemoveFromGlobalClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RemoveFromGlobalClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RemoveFromGlobalClusterResultDeserializer::deserialize(
                "RemoveFromGlobalClusterResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other Amazon Web Services Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn remove_role_from_db_cluster(
        &self,
        input: RemoveRoleFromDBClusterMessage,
    ) -> Result<(), RusotoError<RemoveRoleFromDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RemoveRoleFromDBCluster");
        let mut params = params;
        RemoveRoleFromDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RemoveRoleFromDBClusterError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from a DB instance.</p>
    async fn remove_role_from_db_instance(
        &self,
        input: RemoveRoleFromDBInstanceMessage,
    ) -> Result<(), RusotoError<RemoveRoleFromDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RemoveRoleFromDBInstance");
        let mut params = params;
        RemoveRoleFromDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RemoveRoleFromDBInstanceError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p>Removes a source identifier from an existing RDS event notification subscription.</p>
    async fn remove_source_identifier_from_subscription(
        &self,
        input: RemoveSourceIdentifierFromSubscriptionMessage,
    ) -> Result<
        RemoveSourceIdentifierFromSubscriptionResult,
        RusotoError<RemoveSourceIdentifierFromSubscriptionError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RemoveSourceIdentifierFromSubscription");
        let mut params = params;
        RemoveSourceIdentifierFromSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                RemoveSourceIdentifierFromSubscriptionError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RemoveSourceIdentifierFromSubscriptionResultDeserializer::deserialize(
                "RemoveSourceIdentifierFromSubscriptionResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn remove_tags_from_resource(
        &self,
        input: RemoveTagsFromResourceMessage,
    ) -> Result<(), RusotoError<RemoveTagsFromResourceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RemoveTagsFromResource");
        let mut params = params;
        RemoveTagsFromResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RemoveTagsFromResourceError::from_response)
            .await?;

        std::mem::drop(response);
        Ok(())
    }

    /// <p><p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn reset_db_cluster_parameter_group(
        &self,
        input: ResetDBClusterParameterGroupMessage,
    ) -> Result<DBClusterParameterGroupNameMessage, RusotoError<ResetDBClusterParameterGroupError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ResetDBClusterParameterGroup");
        let mut params = params;
        ResetDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ResetDBClusterParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBClusterParameterGroupNameMessageDeserializer::deserialize(
                "ResetDBClusterParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. </p>
    async fn reset_db_parameter_group(
        &self,
        input: ResetDBParameterGroupMessage,
    ) -> Result<DBParameterGroupNameMessage, RusotoError<ResetDBParameterGroupError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("ResetDBParameterGroup");
        let mut params = params;
        ResetDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, ResetDBParameterGroupError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = DBParameterGroupNameMessageDeserializer::deserialize(
                "ResetDBParameterGroupResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3"> Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromS3</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters. The source DB engine must be MySQL.</p> </note></p>
    async fn restore_db_cluster_from_s3(
        &self,
        input: RestoreDBClusterFromS3Message,
    ) -> Result<RestoreDBClusterFromS3Result, RusotoError<RestoreDBClusterFromS3Error>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBClusterFromS3");
        let mut params = params;
        RestoreDBClusterFromS3MessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBClusterFromS3Error::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBClusterFromS3ResultDeserializer::deserialize(
                "RestoreDBClusterFromS3Result",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only applies to Aurora DB clusters.</p> <p>The target DB cluster is created from the source snapshot with a default configuration. If you don&#39;t specify a security group, the new DB cluster is associated with the default security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn restore_db_cluster_from_snapshot(
        &self,
        input: RestoreDBClusterFromSnapshotMessage,
    ) -> Result<RestoreDBClusterFromSnapshotResult, RusotoError<RestoreDBClusterFromSnapshotError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBClusterFromSnapshot");
        let mut params = params;
        RestoreDBClusterFromSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBClusterFromSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBClusterFromSnapshotResultDeserializer::deserialize(
                "RestoreDBClusterFromSnapshotResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn restore_db_cluster_to_point_in_time(
        &self,
        input: RestoreDBClusterToPointInTimeMessage,
    ) -> Result<RestoreDBClusterToPointInTimeResult, RusotoError<RestoreDBClusterToPointInTimeError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBClusterToPointInTime");
        let mut params = params;
        RestoreDBClusterToPointInTimeMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBClusterToPointInTimeError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBClusterToPointInTimeResultDeserializer::deserialize(
                "RestoreDBClusterToPointInTimeResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most of the source&#39;s original configuration, including the default security group and DB parameter group. By default, the new DB instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p> <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn&#39;t allow two DB instances with the same name. After you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note></p>
    async fn restore_db_instance_from_db_snapshot(
        &self,
        input: RestoreDBInstanceFromDBSnapshotMessage,
    ) -> Result<
        RestoreDBInstanceFromDBSnapshotResult,
        RusotoError<RestoreDBInstanceFromDBSnapshotError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBInstanceFromDBSnapshot");
        let mut params = params;
        RestoreDBInstanceFromDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBInstanceFromDBSnapshotError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBInstanceFromDBSnapshotResultDeserializer::deserialize(
                "RestoreDBInstanceFromDBSnapshotResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn restore_db_instance_from_s3(
        &self,
        input: RestoreDBInstanceFromS3Message,
    ) -> Result<RestoreDBInstanceFromS3Result, RusotoError<RestoreDBInstanceFromS3Error>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBInstanceFromS3");
        let mut params = params;
        RestoreDBInstanceFromS3MessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBInstanceFromS3Error::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBInstanceFromS3ResultDeserializer::deserialize(
                "RestoreDBInstanceFromS3Result",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note></p>
    async fn restore_db_instance_to_point_in_time(
        &self,
        input: RestoreDBInstanceToPointInTimeMessage,
    ) -> Result<
        RestoreDBInstanceToPointInTimeResult,
        RusotoError<RestoreDBInstanceToPointInTimeError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RestoreDBInstanceToPointInTime");
        let mut params = params;
        RestoreDBInstanceToPointInTimeMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RestoreDBInstanceToPointInTimeError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RestoreDBInstanceToPointInTimeResultDeserializer::deserialize(
                "RestoreDBInstanceToPointInTimeResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>
    async fn revoke_db_security_group_ingress(
        &self,
        input: RevokeDBSecurityGroupIngressMessage,
    ) -> Result<RevokeDBSecurityGroupIngressResult, RusotoError<RevokeDBSecurityGroupIngressError>>
    {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("RevokeDBSecurityGroupIngress");
        let mut params = params;
        RevokeDBSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, RevokeDBSecurityGroupIngressError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = RevokeDBSecurityGroupIngressResultDeserializer::deserialize(
                "RevokeDBSecurityGroupIngressResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn start_activity_stream(
        &self,
        input: StartActivityStreamRequest,
    ) -> Result<StartActivityStreamResponse, RusotoError<StartActivityStreamError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StartActivityStream");
        let mut params = params;
        StartActivityStreamRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StartActivityStreamError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = StartActivityStreamResponseDeserializer::deserialize(
                "StartActivityStreamResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p>Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web Services console, the stop-db-cluster CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn start_db_cluster(
        &self,
        input: StartDBClusterMessage,
    ) -> Result<StartDBClusterResult, RusotoError<StartDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StartDBCluster");
        let mut params = params;
        StartDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StartDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                StartDBClusterResultDeserializer::deserialize("StartDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Starts an Amazon RDS DB instance that was stopped using the Amazon Web Services console, the stop-db-instance CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note></p>
    async fn start_db_instance(
        &self,
        input: StartDBInstanceMessage,
    ) -> Result<StartDBInstanceResult, RusotoError<StartDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StartDBInstance");
        let mut params = params;
        StartDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StartDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                StartDBInstanceResultDeserializer::deserialize("StartDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Enables replication of automated backups to a different Amazon Web Services Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html"> Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn start_db_instance_automated_backups_replication(
        &self,
        input: StartDBInstanceAutomatedBackupsReplicationMessage,
    ) -> Result<
        StartDBInstanceAutomatedBackupsReplicationResult,
        RusotoError<StartDBInstanceAutomatedBackupsReplicationError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StartDBInstanceAutomatedBackupsReplication");
        let mut params = params;
        StartDBInstanceAutomatedBackupsReplicationMessageSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                StartDBInstanceAutomatedBackupsReplicationError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = StartDBInstanceAutomatedBackupsReplicationResultDeserializer::deserialize(
                "StartDBInstanceAutomatedBackupsReplicationResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. </p>
    async fn start_export_task(
        &self,
        input: StartExportTaskMessage,
    ) -> Result<ExportTask, RusotoError<StartExportTaskError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StartExportTask");
        let mut params = params;
        StartExportTaskMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StartExportTaskError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = ExportTaskDeserializer::deserialize("StartExportTaskResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Stops a database activity stream that was started using the Amazon Web Services console, the <code>start-activity-stream</code> CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
    async fn stop_activity_stream(
        &self,
        input: StopActivityStreamRequest,
    ) -> Result<StopActivityStreamResponse, RusotoError<StopActivityStreamError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StopActivityStream");
        let mut params = params;
        StopActivityStreamRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StopActivityStreamError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = StopActivityStreamResponseDeserializer::deserialize(
                "StopActivityStreamResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note></p>
    async fn stop_db_cluster(
        &self,
        input: StopDBClusterMessage,
    ) -> Result<StopDBClusterResult, RusotoError<StopDBClusterError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StopDBCluster");
        let mut params = params;
        StopDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StopDBClusterError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                StopDBClusterResultDeserializer::deserialize("StopDBClusterResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p><p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance&#39;s metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn&#39;t apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note></p>
    async fn stop_db_instance(
        &self,
        input: StopDBInstanceMessage,
    ) -> Result<StopDBInstanceResult, RusotoError<StopDBInstanceError>> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StopDBInstance");
        let mut params = params;
        StopDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(request, StopDBInstanceError::from_response)
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result =
                StopDBInstanceResultDeserializer::deserialize("StopDBInstanceResult", stack)?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }

    /// <p>Stops automated backup replication for a DB instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html"> Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i> </p>
    async fn stop_db_instance_automated_backups_replication(
        &self,
        input: StopDBInstanceAutomatedBackupsReplicationMessage,
    ) -> Result<
        StopDBInstanceAutomatedBackupsReplicationResult,
        RusotoError<StopDBInstanceAutomatedBackupsReplicationError>,
    > {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let params = self.new_params("StopDBInstanceAutomatedBackupsReplication");
        let mut params = params;
        StopDBInstanceAutomatedBackupsReplicationMessageSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        let response = self
            .sign_and_dispatch(
                request,
                StopDBInstanceAutomatedBackupsReplicationError::from_response,
            )
            .await?;

        let mut response = response;
        let result = xml_util::parse_response(&mut response, |actual_tag_name, stack| {
            xml_util::start_element(actual_tag_name, stack)?;
            let result = StopDBInstanceAutomatedBackupsReplicationResultDeserializer::deserialize(
                "StopDBInstanceAutomatedBackupsReplicationResult",
                stack,
            )?;
            skip_tree(stack);
            xml_util::end_element(actual_tag_name, stack)?;
            Ok(result)
        })
        .await?;

        drop(response); // parse non-payload
        Ok(result)
    }
}

#[cfg(test)]
mod protocol_tests {

    extern crate rusoto_mock;

    use self::rusoto_mock::*;
    use super::*;
    use rusoto_core::Region as rusoto_region;

    #[tokio::test]
    async fn test_parse_error_rds_describe_db_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/error",
            "rds-describe-db-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(400).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBInstancesMessage::default();
        let result = client.describe_db_instances(request).await;
        assert!(!result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_engine_versions() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-engine-versions.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBEngineVersionsMessage::default();
        let result = client.describe_db_engine_versions(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBInstancesMessage::default();
        let result = client.describe_db_instances(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_parameter_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-parameter-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBParameterGroupsMessage::default();
        let result = client.describe_db_parameter_groups(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_security_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-security-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSecurityGroupsMessage::default();
        let result = client.describe_db_security_groups(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_snapshots() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-snapshots.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSnapshotsMessage::default();
        let result = client.describe_db_snapshots(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_db_subnet_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-db-subnet-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSubnetGroupsMessage::default();
        let result = client.describe_db_subnet_groups(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_event_categories() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-event-categories.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventCategoriesMessage::default();
        let result = client.describe_event_categories(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_event_subscriptions() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-event-subscriptions.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventSubscriptionsMessage::default();
        let result = client.describe_event_subscriptions(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_events() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-events.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventsMessage::default();
        let result = client.describe_events(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_option_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-option-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeOptionGroupsMessage::default();
        let result = client.describe_option_groups(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_reserved_db_instances_offerings() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-reserved-db-instances-offerings.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedDBInstancesOfferingsMessage::default();
        let result = client
            .describe_reserved_db_instances_offerings(request)
            .await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[tokio::test]
    async fn test_parse_valid_rds_describe_reserved_db_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "rds-describe-reserved-db-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedDBInstancesMessage::default();
        let result = client.describe_reserved_db_instances(request).await;
        assert!(result.is_ok(), "parse error: {:?}", result);
    }
}
